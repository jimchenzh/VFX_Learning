//
// Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float MaxGlobalDistance;           // Offset:    0 Size:     4 [unused]
//   float4 GlobalVolumeCenterAndExtent[4];// Offset:   16 Size:    64 [unused]
//   float4 GlobalVolumeWorldToUVAddAndMul[4];// Offset:   80 Size:    64 [unused]
//   float GlobalVolumeDimension;       // Offset:  144 Size:     4 [unused]
//   float GlobalVolumeTexelSize;       // Offset:  148 Size:     4 [unused]
//   uint EmitterTickCounter;           // Offset:  152 Size:     4
//   int4 EmitterSpawnInfoOffsets[2];   // Offset:  160 Size:    32
//   float4 EmitterSpawnInfoParams[8];  // Offset:  192 Size:   128
//   uint SpawnedInstances;             // Offset:  320 Size:     4
//   uint UpdateStartInstance;          // Offset:  324 Size:     4
//   int DefaultSimulationStageIndex;   // Offset:  328 Size:     4 [unused]
//   int SimulationStageIndex;          // Offset:  332 Size:     4 [unused]
//   int IterationInterfaceCount;       // Offset:  336 Size:     4 [unused]
//   uint ComponentBufferSizeRead;      // Offset:  340 Size:     4
//   uint ComponentBufferSizeWrite;     // Offset:  344 Size:     4
//   int NumEventsPerParticle;          // Offset:  348 Size:     4 [unused]
//   int NumParticlesPerEvent;          // Offset:  352 Size:     4 [unused]
//   uint CopyInstancesBeforeStart;     // Offset:  356 Size:     4 [unused]
//   uint SimStart;                     // Offset:  360 Size:     4 [unused]
//   uint ReadInstanceCountOffset;      // Offset:  364 Size:     4
//   uint WriteInstanceCountOffset;     // Offset:  368 Size:     4
//   int NumSpawnedParticles_Emitter_AttributeReader001;// Offset:  372 Size:     4 [unused]
//   int SpawnedParticlesAcquireTag_Emitter_AttributeReader001;// Offset:  376 Size:     4 [unused]
//   uint InstanceCountOffset_Emitter_AttributeReader001;// Offset:  380 Size:     4
//   uint ParticleStrideFloat_Emitter_AttributeReader001;// Offset:  384 Size:     4
//   uint ParticleStrideInt_Emitter_AttributeReader001;// Offset:  388 Size:     4 [unused]
//   int AcquireTagRegisterIndex_Emitter_AttributeReader001;// Offset:  392 Size:     4 [unused]
//   int4 AttributeIndices_Emitter_AttributeReader001;// Offset:  400 Size:    16
//
// }
//
// cbuffer FNiagaraGlobalParameters
// {
//
//   float Engine_DeltaTime;            // Offset:    0 Size:     4
//   float Engine_InverseDeltaTime;     // Offset:    4 Size:     4
//   float Engine_Time;                 // Offset:    8 Size:     4 [unused]
//   float Engine_RealTime;             // Offset:   12 Size:     4 [unused]
//
// }
//
// cbuffer FNiagaraOwnerParameters
// {
//
//   row_major float4x4 Engine_Owner_SystemLocalToWorld;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 Engine_Owner_SystemWorldToLocal;// Offset:   64 Size:    64 [unused]
//   row_major float4x4 Engine_Owner_SystemLocalToWorldTransposed;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 Engine_Owner_SystemWorldToLocalTransposed;// Offset:  192 Size:    64 [unused]
//   row_major float4x4 Engine_Owner_SystemLocalToWorldNoScale;// Offset:  256 Size:    64 [unused]
//   row_major float4x4 Engine_Owner_SystemWorldToLocalNoScale;// Offset:  320 Size:    64 [unused]
//   float4 Engine_Owner_Rotation;      // Offset:  384 Size:    16 [unused]
//   float4 Engine_Owner_Position;      // Offset:  400 Size:    16
//   float4 Engine_Owner_Velocity;      // Offset:  416 Size:    16 [unused]
//   float4 Engine_Owner_SystemXAxis;   // Offset:  432 Size:    16 [unused]
//   float4 Engine_Owner_SystemYAxis;   // Offset:  448 Size:    16 [unused]
//   float4 Engine_Owner_SystemZAxis;   // Offset:  464 Size:    16 [unused]
//   float4 Engine_Owner_Scale;         // Offset:  480 Size:    16 [unused]
//
// }
//
// cbuffer FNiagaraEmitterParameters
// {
//
//   int Engine_Emitter_NumParticles;   // Offset:    0 Size:     4 [unused]
//   int Engine_Emitter_TotalSpawnedParticles;// Offset:    4 Size:     4
//   float Engine_Emitter_SpawnCountScale;// Offset:    8 Size:     4 [unused]
//   float Emitter_Age;                 // Offset:   12 Size:     4 [unused]
//   int Emitter_RandomSeed;            // Offset:   16 Size:     4 [unused]
//   int Engine_Emitter_PaddingInt32_0; // Offset:   20 Size:     4 [unused]
//   int Engine_Emitter_PaddingInt32_1; // Offset:   24 Size:     4 [unused]
//   int Engine_Emitter_PaddingInt32_2; // Offset:   28 Size:     4 [unused]
//
// }
//
// cbuffer FNiagaraExternalParameters
// {
//
//   float Constants_Emitter_InitializeRibbon_Lifetime;// Offset:    0 Size:     4
//   float4 Constants_Emitter_InitializeRibbon_Color;// Offset:   16 Size:    16
//   float Constants_Emitter_InitializeRibbon_Mass;// Offset:   32 Size:     4
//   float Constants_Emitter_InitializeRibbon_RibbonWidth;// Offset:   36 Size:     4 [unused]
//   float Constants_Emitter_InitializeRibbon_RibbonTwist;// Offset:   40 Size:     4 [unused]
//   float Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;// Offset:   44 Size:     4 [unused]
//   float Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;// Offset:   48 Size:     4 [unused]
//   float Emitter_SpawnRate;           // Offset:   52 Size:     4 [unused]
//
// }
//
// cbuffer PREV_FNiagaraOwnerParameters
// {
//
//   row_major float4x4 PREV_Engine_Owner_SystemLocalToWorld;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 PREV_Engine_Owner_SystemWorldToLocal;// Offset:   64 Size:    64 [unused]
//   row_major float4x4 PREV_Engine_Owner_SystemLocalToWorldTransposed;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 PREV_Engine_Owner_SystemWorldToLocalTransposed;// Offset:  192 Size:    64 [unused]
//   row_major float4x4 PREV_Engine_Owner_SystemLocalToWorldNoScale;// Offset:  256 Size:    64 [unused]
//   row_major float4x4 PREV_Engine_Owner_SystemWorldToLocalNoScale;// Offset:  320 Size:    64 [unused]
//   float4 PREV_Engine_Owner_Rotation; // Offset:  384 Size:    16 [unused]
//   float4 PREV_Engine_Owner_Position; // Offset:  400 Size:    16
//   float4 PREV_Engine_Owner_Velocity; // Offset:  416 Size:    16 [unused]
//   float4 PREV_Engine_Owner_SystemXAxis;// Offset:  432 Size:    16 [unused]
//   float4 PREV_Engine_Owner_SystemYAxis;// Offset:  448 Size:    16 [unused]
//   float4 PREV_Engine_Owner_SystemZAxis;// Offset:  464 Size:    16 [unused]
//   float4 PREV_Engine_Owner_Scale;    // Offset:  480 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// InputFloat                        texture   float         buf             t0      1 
// InputInt                          texture    sint         buf             t1      1 
// FreeIDList                        texture    sint         buf             t2      1 
// InputFloatBuffer_Emitter_AttributeReader001    texture   float         buf             t3      1 
// RWOutputInt                           UAV    sint         buf             u0      1 
// RWOutputFloat                         UAV   float         buf             u1      1 
// RWInstanceCounts                      UAV    uint         buf             u2      1 
// RWIDToIndexTable                      UAV    sint         buf             u3      1 
// $Globals                          cbuffer      NA          NA            cb0      1 
// FNiagaraGlobalParameters          cbuffer      NA          NA            cb1      1 
// FNiagaraOwnerParameters           cbuffer      NA          NA            cb2      1 
// FNiagaraEmitterParameters         cbuffer      NA          NA            cb3      1 
// FNiagaraExternalParameters        cbuffer      NA          NA            cb4      1 
// PREV_FNiagaraOwnerParameters      cbuffer      NA          NA            cb5      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[26], dynamicIndexed
dcl_constantbuffer CB1[1], immediateIndexed
dcl_constantbuffer CB2[26], immediateIndexed
dcl_constantbuffer CB3[1], immediateIndexed
dcl_constantbuffer CB4[3], immediateIndexed
dcl_constantbuffer CB5[26], immediateIndexed
dcl_resource_buffer (float,float,float,float) t0
dcl_resource_buffer (sint,sint,sint,sint) t1
dcl_resource_buffer (sint,sint,sint,sint) t2
dcl_resource_buffer (float,float,float,float) t3
dcl_uav_typed_buffer (sint,sint,sint,sint) u0
dcl_uav_typed_buffer (float,float,float,float) u1
dcl_uav_typed_buffer (uint,uint,uint,uint) u2
dcl_uav_typed_buffer (sint,sint,sint,sint) u3
dcl_input vThreadIDInGroup.x
dcl_input vThreadID.x
dcl_temps 12
dcl_tgsm_structured g0, 4, 32
dcl_tgsm_structured g1, 4, 8
dcl_tgsm_structured g2, 4, 2
dcl_tgsm_raw g3, 4
dcl_thread_group 32, 1, 1
iadd r0.x, vThreadID.x, cb0[20].y
ieq r0.y, cb0[22].w, l(-1)
ld_uav_typed_indexable(buffer)(uint,uint,uint,uint) r0.z, cb0[22].wwww, u2.yzxw
movc r0.y, r0.y, l(0), r0.z
iadd r0.z, r0.y, cb0[20].x
iadd r0.z, r0.z, cb0[20].y
ult r0.zw, r0.xxxx, r0.zzzy
and r0.w, r0.z, r0.w
if_nz r0.w
  ld_indexable(buffer)(float,float,float,float) r0.w, r0.xxxx, t0.yzwx
  iadd r1.x, r0.x, cb0[21].y
  ld_indexable(buffer)(float,float,float,float) r1.y, r1.xxxx, t0.yxzw
  ishl r1.zw, cb0[21].yyyy, l(0, 0, 1, 2)
  iadd r1.zw, r0.xxxx, r1.zzzw
  ld_indexable(buffer)(float,float,float,float) r1.z, r1.zzzz, t0.yzxw
  imad r2.xyzw, l(3, 5, 6, 7), cb0[21].yyyy, r0.xxxx
  ld_indexable(buffer)(float,float,float,float) r2.x, r2.xxxx, t0.xyzw
  ld_indexable(buffer)(float,float,float,float) r1.w, r1.wwww, t0.yzwx
  ld_indexable(buffer)(sint,sint,sint,sint) r3.x, r0.xxxx, t1.xyzw
  ld_indexable(buffer)(sint,sint,sint,sint) r1.x, r1.xxxx, t1.xyzw
  ld_indexable(buffer)(float,float,float,float) r2.y, r2.yyyy, t0.yxzw
  ld_indexable(buffer)(float,float,float,float) r3.y, r2.zzzz, t0.yxzw
  ld_indexable(buffer)(float,float,float,float) r2.w, r2.wwww, t0.yzwx
  imad r4.xyzw, l(10, 11, 12, 17), cb0[21].yyyy, r0.xxxx
  ld_indexable(buffer)(float,float,float,float) r5.x, r4.xxxx, t0.xyzw
  ld_indexable(buffer)(float,float,float,float) r5.y, r4.yyyy, t0.yxzw
  ld_indexable(buffer)(float,float,float,float) r5.z, r4.zzzz, t0.yzxw
  ld_indexable(buffer)(float,float,float,float) r3.z, r4.wwww, t0.yzxw
  ld_indexable(buffer)(sint,sint,sint,sint) r2.z, r2.zzzz, t1.yzxw
  imad r4.xyz, l(19, 20, 21, 0), cb0[21].yyyy, r0.xxxx
  ld_indexable(buffer)(float,float,float,float) r6.x, r4.xxxx, t0.xyzw
  ld_indexable(buffer)(float,float,float,float) r6.y, r4.yyyy, t0.yxzw
  ld_indexable(buffer)(float,float,float,float) r6.z, r4.zzzz, t0.yzxw
  add r0.w, r0.w, cb1[0].x
  max r3.w, r2.y, l(0.000010)
  add r4.x, r3.w, l(-0.000100)
  lt r4.x, r0.w, r4.x
  div r3.w, r0.w, r3.w
  add r4.y, -r3.w, l(1.000000)
  itof r4.z, r3.x
  lt r4.w, l(1.000000), r4.z
  add r7.xy, r4.zzzz, l(-1.000000, 1.000000, 0.000000, 0.000000)
  movc r4.z, r4.w, r7.x, r4.z
  ftoi r4.z, r4.z
  ine r4.w, cb0[23].w, l(-1)
  ld_uav_typed_indexable(buffer)(uint,uint,uint,uint) r5.w, cb0[23].wwww, u2.yzwx
  and r5.w, r4.w, r5.w
  ine r6.w, cb0[25].x, l(-1)
  ige r7.x, r4.z, l(0)
  and r7.x, r6.w, r7.x
  ilt r5.w, r4.z, r5.w
  and r5.w, r5.w, r7.x
  if_nz r5.w
    imad r7.x, cb0[25].x, cb0[24].x, r4.z
    ld_indexable(buffer)(float,float,float,float) r7.x, r7.xxxx, t3.xwyz
    iadd r8.xy, cb0[25].xxxx, l(1, 2, 0, 0)
    imad r8.xy, r8.xyxx, cb0[24].xxxx, r4.zzzz
    ld_indexable(buffer)(float,float,float,float) r7.z, r8.xxxx, t3.ywxz
    ld_indexable(buffer)(float,float,float,float) r7.w, r8.yyyy, t3.ywzx
  else 
    mov r7.xzw, l(0,0,0,0)
  endif 
  ftoi r4.z, r7.y
  ld_uav_typed_indexable(buffer)(uint,uint,uint,uint) r7.y, cb0[23].wwww, u2.yxzw
  and r4.w, r4.w, r7.y
  ige r7.y, r4.z, l(0)
  and r6.w, r6.w, r7.y
  ilt r4.w, r4.z, r4.w
  and r6.w, r4.w, r6.w
  if_nz r6.w
    imad r6.w, cb0[25].x, cb0[24].x, r4.z
    ld_indexable(buffer)(float,float,float,float) r8.x, r6.wwww, t3.xyzw
    iadd r9.xy, cb0[25].xxxx, l(1, 2, 0, 0)
    imad r9.xy, r9.xyxx, cb0[24].xxxx, r4.zzzz
    ld_indexable(buffer)(float,float,float,float) r8.y, r9.xxxx, t3.yxzw
    ld_indexable(buffer)(float,float,float,float) r8.z, r9.yyyy, t3.yzxw
  else 
    mov r8.xyz, l(0,0,0,0)
  endif 
  add r7.xzw, -r5.xxyz, r7.xxzw
  dp3 r4.z, r7.xzwx, r7.xzwx
  sqrt r4.z, r4.z
  add r7.xzw, -r5.xxyz, r8.xxyz
  dp3 r6.w, r7.xzwx, r7.xzwx
  sqrt r6.w, r6.w
  add r4.z, r4.z, r6.w
  mad r4.z, -r4.z, l(0.500000), l(30.000000)
  max r4.z, r4.z, l(0.000000)
  and r5.w, r5.w, r7.y
  and r4.w, r4.w, r5.w
  and r4.z, r4.z, r4.w
  mul r4.y, r4.z, r4.y
  mul r4.z, r3.w, l(6.283185)
  sincos r4.z, null, r4.z
  mul r7.z, r4.z, l(0.030000)
  mov r7.xy, l(0,0,0,0)
  add r5.xyz, r5.xyzx, r7.xyzx
  mad r5.xyz, r6.xyzx, cb1[0].xxxx, r5.xyzx
  mov r4.z, r0.w
  mov r4.w, r3.x
  mov r5.w, r1.x
  mov r6.w, r4.y
  mov r7.xyz, r6.xyzx
else 
  uge r7.w, r0.x, r0.y
  and r0.z, r0.z, r7.w
  if_nz r0.z
    iadd r0.x, -r0.y, r0.x
    ige r8.xyzw, r0.xxxx, cb0[10].xyzw
    and r8.xyzw, r8.xyzw, l(1, 1, 1, 1)
    iadd r0.y, r8.y, r8.x
    iadd r0.y, r8.z, r0.y
    iadd r0.y, r8.w, r0.y
    ige r8.xyzw, r0.xxxx, cb0[11].xyzw
    and r8.xyzw, r8.xyzw, l(1, 1, 1, 1)
    iadd r0.z, r8.y, r8.x
    iadd r0.z, r8.z, r0.z
    iadd r0.z, r8.w, r0.z
    iadd r0.y, r0.z, r0.y
    iadd r0.z, r0.x, -cb0[r0.y + 12].w
    ld_indexable(buffer)(sint,sint,sint,sint) r3.x, r0.xxxx, t2.xyzw
    iadd r2.z, r0.z, cb3[0].y
    itof r0.x, r0.z
    mad r0.x, cb0[r0.y + 12].x, r0.x, cb0[r0.y + 12].y
    add r0.w, -r0.x, cb1[0].x
    mul r0.x, r0.x, cb1[0].y
    add r8.xyz, cb2[25].xyzx, -cb5[25].xyzx
    mad r0.xyz, r0.xxxx, r8.xyzx, cb5[25].xyzx
    mov r8.x, vThreadID.x
    mov r8.y, cb0[9].z
    imad r8.xy, r8.xyxx, l(0x0019660d, 0x0019660d, 0, 0), l(0x3c6ef35f, 0x3c6ef35f, 0, 0)
    imad r7.w, r8.x, r8.x, l(0x3c3c2745)
    imad r8.z, r8.y, r7.w, r8.x
    imad r8.y, r7.w, r8.z, r8.y
    imad r8.x, r8.z, r8.y, r8.x
    imad r7.w, r8.z, r8.x, r7.w
    ishr r7.w, r7.w, l(8)
    and r7.w, r7.w, l(0x00ffffff)
    utof r7.w, r7.w
    mul r2.w, r7.w, l(0.000000)
    max r7.w, cb4[0].x, l(0.000010)
    add r8.x, r7.w, l(-0.000100)
    lt r4.x, r0.w, r8.x
    div r3.w, r0.w, r7.w
    add r7.w, -r3.w, l(1.000000)
    itof r8.x, r3.x
    lt r8.y, l(1.000000), r8.x
    add r8.zw, r8.xxxx, l(0.000000, 0.000000, -1.000000, 1.000000)
    movc r8.x, r8.y, r8.z, r8.x
    ftoi r8.x, r8.x
    ine r8.y, cb0[23].w, l(-1)
    ld_uav_typed_indexable(buffer)(uint,uint,uint,uint) r8.z, cb0[23].wwww, u2.yzxw
    and r8.z, r8.z, r8.y
    ine r9.x, cb0[25].x, l(-1)
    ige r9.y, r8.x, l(0)
    and r9.y, r9.y, r9.x
    ilt r8.z, r8.x, r8.z
    and r8.z, r8.z, r9.y
    if_nz r8.z
      imad r9.y, cb0[25].x, cb0[24].x, r8.x
      ld_indexable(buffer)(float,float,float,float) r9.y, r9.yyyy, t3.wxyz
      iadd r10.xy, cb0[25].xxxx, l(1, 2, 0, 0)
      imad r10.xy, r10.xyxx, cb0[24].xxxx, r8.xxxx
      ld_indexable(buffer)(float,float,float,float) r9.z, r10.xxxx, t3.wyxz
      ld_indexable(buffer)(float,float,float,float) r9.w, r10.yyyy, t3.wyzx
    else 
      mov r9.yzw, l(0,0,0,0)
    endif 
    ftoi r8.x, r8.w
    ld_uav_typed_indexable(buffer)(uint,uint,uint,uint) r8.w, cb0[23].wwww, u2.yzwx
    and r8.y, r8.w, r8.y
    ige r8.w, r8.x, l(0)
    and r9.x, r8.w, r9.x
    ilt r8.y, r8.x, r8.y
    and r9.x, r8.y, r9.x
    if_nz r9.x
      imad r9.x, cb0[25].x, cb0[24].x, r8.x
      ld_indexable(buffer)(float,float,float,float) r10.x, r9.xxxx, t3.xyzw
      iadd r11.xy, cb0[25].xxxx, l(1, 2, 0, 0)
      imad r11.xy, r11.xyxx, cb0[24].xxxx, r8.xxxx
      ld_indexable(buffer)(float,float,float,float) r10.y, r11.xxxx, t3.yxzw
      ld_indexable(buffer)(float,float,float,float) r10.z, r11.yyyy, t3.yzxw
    else 
      mov r10.xyz, l(0,0,0,0)
    endif 
    add r9.xyz, -r0.xyzx, r9.yzwy
    dp3 r8.x, r9.xyzx, r9.xyzx
    sqrt r8.x, r8.x
    add r9.xyz, -r0.xyzx, r10.xyzx
    dp3 r9.x, r9.xyzx, r9.xyzx
    sqrt r9.x, r9.x
    add r8.x, r8.x, r9.x
    mad r8.x, -r8.x, l(0.500000), l(30.000000)
    max r8.x, r8.x, l(0.000000)
    and r8.z, r8.w, r8.z
    and r8.y, r8.y, r8.z
    and r8.x, r8.x, r8.y
    mul r4.y, r7.w, r8.x
    mul r7.w, r3.w, l(6.283185)
    sincos r7.w, null, r7.w
    mul r8.z, r7.w, l(0.030000)
    mov r8.xy, l(0,0,0,0)
    add r5.xyz, r0.xyzx, r8.xyzx
    mov r4.z, r0.w
    mov r2.x, cb4[1].z
    mov r1.yzw, cb4[1].xxyw
    mov r4.w, r3.x
    mov r5.w, cb0[9].z
    mov r2.y, cb4[0].x
    mov r3.y, cb4[2].x
    mov r1.x, cb0[9].z
    mov r6.w, r4.y
  else 
    mov r1.xyzw, l(0,0,0,0)
    mov r6.w, l(0)
    mov r3.xyw, l(0,0,0,0)
    mov r5.xyzw, l(0,0,0,0)
    mov r0.w, l(0)
    mov r2.xyzw, l(0,0,0,0)
    mov r4.xyzw, l(0,0,0,0)
  endif 
  mov r7.xyz, l(0,0,0,0)
  mov r3.z, l(0)
  mov r6.xyz, l(0,0,0,0)
endif 
and r0.x, r4.x, l(1)
store_structured g0.x, vThreadIDInGroup.x, l(0), r0.x
sync_g_t
and r0.yz, vThreadIDInGroup.xxxx, l(0, 3, 15, 0)
if_z r0.y
  iadd r8.xyz, vThreadIDInGroup.xxxx, l(1, 2, 3, 0)
  ld_structured r0.y, r8.x, l(0), g0.xxxx
  iadd r0.y, r0.y, r0.x
  ld_structured r7.w, r8.y, l(0), g0.xxxx
  iadd r7.w, r0.y, r7.w
  ld_structured r8.w, r8.z, l(0), g0.xxxx
  iadd r8.w, r7.w, r8.w
  store_structured g0.x, vThreadIDInGroup.x, l(0), l(0)
  store_structured g0.x, r8.x, l(0), r0.x
  store_structured g0.x, r8.y, l(0), r0.y
  store_structured g0.x, r8.z, l(0), r7.w
  ushr r0.x, vThreadIDInGroup.x, l(2)
  store_structured g1.x, r0.x, l(0), r8.w
endif 
sync_g_t
if_z r0.z
  ushr r0.x, vThreadIDInGroup.x, l(2)
  ld_structured r0.y, r0.x, l(0), g1.xxxx
  iadd r8.xyz, r0.xxxx, l(1, 2, 3, 0)
  ld_structured r0.z, r8.x, l(0), g1.xxxx
  iadd r0.z, r0.z, r0.y
  ld_structured r7.w, r8.y, l(0), g1.xxxx
  iadd r7.w, r0.z, r7.w
  ld_structured r8.w, r8.z, l(0), g1.xxxx
  iadd r8.w, r7.w, r8.w
  store_structured g1.x, r0.x, l(0), l(0)
  store_structured g1.x, r8.x, l(0), r0.y
  store_structured g1.x, r8.y, l(0), r0.z
  store_structured g1.x, r8.z, l(0), r7.w
  ushr r0.x, r0.x, l(2)
  store_structured g2.x, r0.x, l(0), r8.w
endif 
sync_g_t
if_z vThreadIDInGroup.x
  ld_structured r0.x, l(0), l(0), g2.xxxx
  ld_structured r0.y, l(1), l(0), g2.xxxx
  iadd r0.y, r0.y, r0.x
  store_structured g2.x, l(0), l(0), l(0)
  store_structured g2.x, l(1), l(0), r0.x
  imm_atomic_iadd r8.x, u2, cb0[23].x, r0.y
  store_raw g3.x, l(0), r8.x
endif 
sync_g_t
if_nz r4.x
  ld_raw r0.x, l(0), g3.xxxx
  ushr r0.yz, vThreadIDInGroup.xxxx, l(0, 4, 2, 0)
  ld_structured r0.y, r0.y, l(0), g2.xxxx
  iadd r0.x, r0.y, r0.x
  ld_structured r0.y, r0.z, l(0), g1.xxxx
  iadd r0.x, r0.y, r0.x
  ld_structured r0.y, vThreadIDInGroup.x, l(0), g0.xxxx
  iadd r0.x, r0.y, r0.x
  store_uav_typed u3.xyzw, r4.wwww, r0.xxxx
  iadd r0.y, r0.x, cb0[20].y
  store_uav_typed u1.xyzw, r0.yyyy, r4.zzzz
  iadd r0.z, r0.x, cb0[21].z
  iadd r0.z, r0.z, cb0[20].y
  store_uav_typed u1.xyzw, r0.zzzz, r1.yyyy
  ishl r8.xyzw, cb0[21].zzzz, l(1, 2, 3, 4)
  iadd r8.xyzw, r0.xxxx, r8.xyzw
  iadd r8.xyzw, r8.xyzw, cb0[20].yyyy
  store_uav_typed u1.xyzw, r8.xxxx, r1.zzzz
  imad r9.xyzw, l(3, 5, 6, 7), cb0[21].zzzz, r0.xxxx
  iadd r9.xyzw, r9.xyzw, cb0[20].yyyy
  store_uav_typed u1.xyzw, r9.xxxx, r2.xxxx
  store_uav_typed u1.xyzw, r8.yyyy, r1.wwww
  store_uav_typed u0.xyzw, r0.yyyy, r4.wwww
  store_uav_typed u0.xyzw, r0.zzzz, r5.wwww
  store_uav_typed u1.xyzw, r9.yyyy, r2.yyyy
  store_uav_typed u1.xyzw, r9.zzzz, r3.yyyy
  store_uav_typed u1.xyzw, r9.wwww, r2.wwww
  store_uav_typed u0.xyzw, r8.xxxx, r3.xxxx
  store_uav_typed u0.xyzw, r9.xxxx, r1.xxxx
  store_uav_typed u1.xyzw, r8.zzzz, r6.wwww
  imad r1.xyzw, l(9, 10, 11, 12), cb0[21].zzzz, r0.xxxx
  iadd r1.xyzw, r1.xyzw, cb0[20].yyyy
  store_uav_typed u1.xyzw, r1.xxxx, r3.wwww
  store_uav_typed u1.xyzw, r1.yyyy, r5.xxxx
  store_uav_typed u1.xyzw, r1.zzzz, r5.yyyy
  store_uav_typed u1.xyzw, r1.wwww, r5.zzzz
  imad r1.xyzw, l(13, 14, 15, 17), cb0[21].zzzz, r0.xxxx
  iadd r1.xyzw, r1.xyzw, cb0[20].yyyy
  store_uav_typed u1.xyzw, r1.xxxx, r7.xxxx
  store_uav_typed u1.xyzw, r1.yyyy, r7.yyyy
  store_uav_typed u1.xyzw, r1.zzzz, r7.zzzz
  store_uav_typed u0.xyzw, r8.yyyy, l(0,0,0,0)
  store_uav_typed u0.xyzw, r9.yyyy, l(0,0,0,0)
  store_uav_typed u1.xyzw, r8.wwww, r0.wwww
  store_uav_typed u1.xyzw, r1.wwww, r3.zzzz
  imad r0.xyzw, l(18, 19, 20, 21), cb0[21].zzzz, r0.xxxx
  iadd r0.xyzw, r0.xyzw, cb0[20].yyyy
  store_uav_typed u1.xyzw, r0.xxxx, r4.yyyy
  store_uav_typed u0.xyzw, r9.zzzz, r2.zzzz
  store_uav_typed u1.xyzw, r0.yyyy, r6.xxxx
  store_uav_typed u1.xyzw, r0.zzzz, r6.yyyy
  store_uav_typed u1.xyzw, r0.wwww, r6.zzzz
endif 
ret 
// Approximately 328 instruction slots used
