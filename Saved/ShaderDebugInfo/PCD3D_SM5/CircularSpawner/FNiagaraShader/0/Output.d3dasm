//
// Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float MaxGlobalDistance;           // Offset:    0 Size:     4 [unused]
//   float4 GlobalVolumeCenterAndExtent[4];// Offset:   16 Size:    64 [unused]
//   float4 GlobalVolumeWorldToUVAddAndMul[4];// Offset:   80 Size:    64 [unused]
//   float GlobalVolumeDimension;       // Offset:  144 Size:     4 [unused]
//   float GlobalVolumeTexelSize;       // Offset:  148 Size:     4 [unused]
//   uint EmitterTickCounter;           // Offset:  152 Size:     4
//   float4 EmitterSpawnInfoOffsets[2]; // Offset:  160 Size:    32
//   float4 EmitterSpawnInfoParams[8];  // Offset:  192 Size:   128
//   uint UpdateStartInstance;          // Offset:  320 Size:     4
//   uint ShaderStageIndex;             // Offset:  324 Size:     4 [unused]
//   int IterationInterfaceCount;       // Offset:  328 Size:     4 [unused]
//   uint SpawnedInstances;             // Offset:  332 Size:     4
//   uint ComponentBufferSizeRead;      // Offset:  336 Size:     4
//   uint ComponentBufferSizeWrite;     // Offset:  340 Size:     4
//   int NumEventsPerParticle;          // Offset:  344 Size:     4 [unused]
//   int NumParticlesPerEvent;          // Offset:  348 Size:     4 [unused]
//   uint CopyInstancesBeforeStart;     // Offset:  352 Size:     4 [unused]
//   uint SimStart;                     // Offset:  356 Size:     4 [unused]
//   uint ReadInstanceCountOffset;      // Offset:  360 Size:     4
//   uint WriteInstanceCountOffset;     // Offset:  364 Size:     4
//   float MinTime_LatheProfile;        // Offset:  368 Size:     4 [unused]
//   float MaxTime_LatheProfile;        // Offset:  372 Size:     4 [unused]
//   float InvTimeRange_LatheProfile;   // Offset:  376 Size:     4 [unused]
//   float2 Dimensions_TEXTURE_VAR;     // Offset:  384 Size:     8 [unused]
//   float MinTime_Color_ColorCurve;    // Offset:  392 Size:     4
//   float MaxTime_Color_ColorCurve;    // Offset:  396 Size:     4 [unused]
//   float InvTimeRange_Color_ColorCurve;// Offset:  400 Size:     4
//
// }
//
// cbuffer FEmitterParameters
// {
//
//   float Constants_Emitter_UniformRangedFloat005_Minimum;// Offset:    0 Size:     4
//   float Constants_Emitter_UniformRangedFloat005_Maximum;// Offset:    4 Size:     4
//   int Constants_Emitter_UniformRangedFloat005_RandomSeed;// Offset:    8 Size:     4 [unused]
//   int Emitter_RandomSeed;            // Offset:   12 Size:     4 [unused]
//   int Engine_System_TickCount;       // Offset:   16 Size:     4 [unused]
//   float Constants_Emitter_UniformRangedFloat003_Minimum;// Offset:   20 Size:     4
//   float Constants_Emitter_UniformRangedFloat003_Maximum;// Offset:   24 Size:     4
//   int Constants_Emitter_UniformRangedFloat003_RandomSeed;// Offset:   28 Size:     4 [unused]
//   float Constants_Emitter_UniformRangedFloat004_Minimum;// Offset:   32 Size:     4 [unused]
//   float Constants_Emitter_UniformRangedFloat004_Maximum;// Offset:   36 Size:     4 [unused]
//   int Constants_Emitter_UniformRangedFloat004_RandomSeed;// Offset:   40 Size:     4 [unused]
//   float4 Engine_Owner_Position;      // Offset:   48 Size:    16
//   float4 Constants_Emitter_InitializeParticle_Color;// Offset:   64 Size:    16 [unused]
//   float4 Constants_Emitter_InitializeParticle_SpriteSize;// Offset:   80 Size:    16
//   float4 Constants_Emitter_InitializeParticle_MeshScale;// Offset:   96 Size:    16 [unused]
//   int Constants_Emitter_CylinderLocation_RandomSeed;// Offset:  112 Size:     4 [unused]
//   float Constants_Emitter_CylinderLocation_CylinderHeight;// Offset:  116 Size:     4 [unused]
//   float Constants_Emitter_CylinderLocation_CylinderRadius;// Offset:  120 Size:     4 [unused]
//   float Constants_Emitter_CylinderLocation_SurfaceOnlyBandThickness;// Offset:  124 Size:     4 [unused]
//   float4 Constants_Emitter_CylinderLocation_Offset;// Offset:  128 Size:    16 [unused]
//   float4 Constants_Emitter_CylinderLocation_NonUniformScale;// Offset:  144 Size:    16 [unused]
//   row_major float4x4 Engine_Owner_SystemWorldToLocalTransposed;// Offset:  160 Size:    64 [unused]
//   row_major float4x4 Engine_Owner_SystemLocalToWorldTransposed;// Offset:  224 Size:    64 [unused]
//   row_major float4x4 Engine_Owner_SystemLocalToWorldNoScale;// Offset:  288 Size:    64 [unused]
//   row_major float4x4 Engine_Owner_SystemWorldToLocalNoScale;// Offset:  352 Size:    64 [unused]
//   float4 Constants_Emitter_UniformRangedVector2D_Minimum;// Offset:  416 Size:    16
//   float4 Constants_Emitter_UniformRangedVector2D_Maximum;// Offset:  432 Size:    16
//   int Constants_Emitter_UniformRangedVector2D_RandomSeed;// Offset:  448 Size:     4 [unused]
//   float Engine_DeltaTime;            // Offset:  452 Size:     4
//   float Constants_Emitter_Color_ScaleAlpha;// Offset:  456 Size:     4
//   float Emitter_AlphaScale;          // Offset:  460 Size:     4
//   float Constants_Emitter_RecreateCameraProjection_Fov;// Offset:  464 Size:     4
//   float4 Constants_Emitter_RecreateCameraProjection_RightVector;// Offset:  480 Size:    16
//   float4 Constants_Emitter_RecreateCameraProjection_UpVector;// Offset:  496 Size:    16
//   float4 Constants_Emitter_RecreateCameraProjection_ForwardVector;// Offset:  512 Size:    16
//   float Engine_Time;                 // Offset:  528 Size:     4 [unused]
//   float Engine_InverseDeltaTime;     // Offset:  532 Size:     4 [unused]
//   int Engine_ExecutionCount;         // Offset:  536 Size:     4 [unused]
//   float Emitter_SpawnRate;           // Offset:  540 Size:     4 [unused]
//   int Engine_Emitter_TotalSpawnedParticles;// Offset:  544 Size:     4
//   float PREV_Constants_Emitter_UniformRangedFloat005_Minimum;// Offset:  548 Size:     4 [unused]
//   float PREV_Constants_Emitter_UniformRangedFloat005_Maximum;// Offset:  552 Size:     4 [unused]
//   int PREV_Constants_Emitter_UniformRangedFloat005_RandomSeed;// Offset:  556 Size:     4 [unused]
//   int PREV_Emitter_RandomSeed;       // Offset:  560 Size:     4 [unused]
//   int PREV_Engine_System_TickCount;  // Offset:  564 Size:     4 [unused]
//   float PREV_Constants_Emitter_UniformRangedFloat003_Minimum;// Offset:  568 Size:     4 [unused]
//   float PREV_Constants_Emitter_UniformRangedFloat003_Maximum;// Offset:  572 Size:     4 [unused]
//   int PREV_Constants_Emitter_UniformRangedFloat003_RandomSeed;// Offset:  576 Size:     4 [unused]
//   float PREV_Constants_Emitter_UniformRangedFloat004_Minimum;// Offset:  580 Size:     4 [unused]
//   float PREV_Constants_Emitter_UniformRangedFloat004_Maximum;// Offset:  584 Size:     4 [unused]
//   int PREV_Constants_Emitter_UniformRangedFloat004_RandomSeed;// Offset:  588 Size:     4 [unused]
//   float4 PREV_Engine_Owner_Position; // Offset:  592 Size:    16 [unused]
//   float4 PREV_Constants_Emitter_InitializeParticle_Color;// Offset:  608 Size:    16 [unused]
//   float4 PREV_Constants_Emitter_InitializeParticle_SpriteSize;// Offset:  624 Size:    16 [unused]
//   float4 PREV_Constants_Emitter_InitializeParticle_MeshScale;// Offset:  640 Size:    16 [unused]
//   int PREV_Constants_Emitter_CylinderLocation_RandomSeed;// Offset:  656 Size:     4 [unused]
//   float PREV_Constants_Emitter_CylinderLocation_CylinderHeight;// Offset:  660 Size:     4 [unused]
//   float PREV_Constants_Emitter_CylinderLocation_CylinderRadius;// Offset:  664 Size:     4 [unused]
//   float PREV_Constants_Emitter_CylinderLocation_SurfaceOnlyBandThickness;// Offset:  668 Size:     4 [unused]
//   float4 PREV_Constants_Emitter_CylinderLocation_Offset;// Offset:  672 Size:    16 [unused]
//   float4 PREV_Constants_Emitter_CylinderLocation_NonUniformScale;// Offset:  688 Size:    16 [unused]
//   row_major float4x4 PREV_Engine_Owner_SystemWorldToLocalTransposed;// Offset:  704 Size:    64 [unused]
//   row_major float4x4 PREV_Engine_Owner_SystemLocalToWorldTransposed;// Offset:  768 Size:    64 [unused]
//   row_major float4x4 PREV_Engine_Owner_SystemLocalToWorldNoScale;// Offset:  832 Size:    64 [unused]
//   row_major float4x4 PREV_Engine_Owner_SystemWorldToLocalNoScale;// Offset:  896 Size:    64 [unused]
//   float4 PREV_Constants_Emitter_UniformRangedVector2D_Minimum;// Offset:  960 Size:    16 [unused]
//   float4 PREV_Constants_Emitter_UniformRangedVector2D_Maximum;// Offset:  976 Size:    16 [unused]
//   int PREV_Constants_Emitter_UniformRangedVector2D_RandomSeed;// Offset:  992 Size:     4 [unused]
//   float PREV_Engine_DeltaTime;       // Offset:  996 Size:     4 [unused]
//   float PREV_Constants_Emitter_Color_ScaleAlpha;// Offset: 1000 Size:     4 [unused]
//   float PREV_Emitter_AlphaScale;     // Offset: 1004 Size:     4 [unused]
//   float PREV_Constants_Emitter_RecreateCameraProjection_Fov;// Offset: 1008 Size:     4 [unused]
//   float4 PREV_Constants_Emitter_RecreateCameraProjection_RightVector;// Offset: 1024 Size:    16 [unused]
//   float4 PREV_Constants_Emitter_RecreateCameraProjection_UpVector;// Offset: 1040 Size:    16 [unused]
//   float4 PREV_Constants_Emitter_RecreateCameraProjection_ForwardVector;// Offset: 1056 Size:    16 [unused]
//   float PREV_Engine_Time;            // Offset: 1072 Size:     4 [unused]
//   float PREV_Engine_InverseDeltaTime;// Offset: 1076 Size:     4 [unused]
//   int PREV_Engine_ExecutionCount;    // Offset: 1080 Size:     4 [unused]
//   float PREV_Emitter_SpawnRate;      // Offset: 1084 Size:     4 [unused]
//   int PREV_Engine_Emitter_TotalSpawnedParticles;// Offset: 1088 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// Sampler_TEXTURE_VAR               sampler      NA          NA             s0      1 
// InputFloat                        texture   float         buf             t0      1 
// InputInt                          texture    sint         buf             t1      1 
// Texture_TEXTURE_VAR               texture  float4          2d             t2      1 
// CurveLUT_Color_ColorCurve         texture   float         buf             t3      1 
// RWOutputInt                           UAV    sint         buf             u0      1 
// RWOutputFloat                         UAV   float         buf             u1      1 
// RWInstanceCounts                      UAV    uint         buf             u2      1 
// $Globals                          cbuffer      NA          NA            cb0      1 
// FEmitterParameters                cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[26], dynamicIndexed
dcl_constantbuffer CB1[35], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_buffer (float,float,float,float) t0
dcl_resource_buffer (sint,sint,sint,sint) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_buffer (float,float,float,float) t3
dcl_uav_typed_buffer (sint,sint,sint,sint) u0
dcl_uav_typed_buffer (float,float,float,float) u1
dcl_uav_typed_buffer (uint,uint,uint,uint) u2
dcl_input vThreadID.x
dcl_temps 10
dcl_thread_group 64, 1, 1
iadd r0.x, vThreadID.x, cb0[20].x
ieq r0.y, cb0[22].z, l(-1)
ld_uav_typed_indexable(buffer)(uint,uint,uint,uint) r0.z, cb0[22].zzzz, u2.yzxw
movc r0.y, r0.y, l(0), r0.z
iadd r1.x, r0.y, cb0[20].w
iadd r0.z, r1.x, cb0[20].x
ult r0.z, r0.x, r0.z
if_nz r0.z
  ult r0.z, r0.x, r0.y
  if_nz r0.z
    ld_indexable(buffer)(float,float,float,float) r0.z, r0.xxxx, t0.yzxw
    imad r2.xyzw, l(5, 6, 7, 12), cb0[21].xxxx, r0.xxxx
    ld_indexable(buffer)(float,float,float,float) r0.w, r2.xxxx, t0.yzwx
    ld_indexable(buffer)(float,float,float,float) r1.y, r2.yyyy, t0.yxzw
    ld_indexable(buffer)(float,float,float,float) r1.z, r2.zzzz, t0.yzxw
    ld_indexable(buffer)(float,float,float,float) r1.w, r2.wwww, t0.yzwx
    imad r2.xyzw, l(13, 14, 15, 17), cb0[21].xxxx, r0.xxxx
    ld_indexable(buffer)(float,float,float,float) r2.x, r2.xxxx, t0.xyzw
    ld_indexable(buffer)(float,float,float,float) r2.y, r2.yyyy, t0.yxzw
    ld_indexable(buffer)(float,float,float,float) r2.z, r2.zzzz, t0.yzxw
    ishl r3.xyzw, cb0[21].xyyy, l(4, 1, 2, 3)
    iadd r3.x, r0.x, r3.x
    ld_indexable(buffer)(float,float,float,float) r3.x, r3.xxxx, t0.xyzw
    ld_indexable(buffer)(float,float,float,float) r2.w, r2.wwww, t0.yzwx
    ld_indexable(buffer)(sint,sint,sint,sint) r4.x, r0.xxxx, t1.xyzw
    imad r4.yz, l(0, 18, 19, 0), cb0[21].xxxx, r0.xxxx
    ld_indexable(buffer)(float,float,float,float) r5.x, r4.yyyy, t0.xyzw
    ld_indexable(buffer)(float,float,float,float) r5.y, r4.zzzz, t0.yxzw
    add r0.z, r0.z, cb1[28].y
    max r4.y, r0.w, l(0.000010)
    add r4.z, r4.y, l(-0.000100)
    lt r4.z, r0.z, r4.z
    div r4.y, r0.z, r4.y
    sample_l_indexable(texture2d)(float,float,float,float) r6.xyzw, r5.xyxx, t2.xyzw, s0, l(0.000000)
    add r4.w, r4.y, -cb0[24].z
    mul_sat r4.w, r4.w, cb0[25].x
    mul r5.w, r4.w, l(127.000000)
    round_ni r5.w, r5.w
    lt r7.x, r5.w, l(127.000000)
    add r7.y, r5.w, l(1.000000)
    mad r4.w, r4.w, l(127.000000), -r5.w
    mul r7.z, r5.w, l(4.000000)
    mul r7.y, r7.y, l(4.000000)
    movc r7.x, r7.x, r7.y, l(508.000000)
    ftou r7.y, r7.z
    ld_indexable(buffer)(float,float,float,float) r8.x, r7.yyyy, t3.xyzw
    mad r7.yzw, r5.wwww, l(0.000000, 4.000000, 4.000000, 4.000000), l(0.000000, 1.000000, 2.000000, 3.000000)
    ftou r7.yzw, r7.yyzw
    ld_indexable(buffer)(float,float,float,float) r8.y, r7.yyyy, t3.yxzw
    ld_indexable(buffer)(float,float,float,float) r8.z, r7.zzzz, t3.yzxw
    ld_indexable(buffer)(float,float,float,float) r8.w, r7.wwww, t3.yzwx
    ftou r5.w, r7.x
    ld_indexable(buffer)(float,float,float,float) r9.x, r5.wwww, t3.xyzw
    add r7.xyz, r7.xxxx, l(1.000000, 2.000000, 3.000000, 0.000000)
    ftou r7.xyz, r7.xyzx
    ld_indexable(buffer)(float,float,float,float) r9.y, r7.xxxx, t3.yxzw
    ld_indexable(buffer)(float,float,float,float) r9.z, r7.yyyy, t3.yzxw
    ld_indexable(buffer)(float,float,float,float) r9.w, r7.zzzz, t3.yzwx
    add r7.xyzw, -r8.xyzw, r9.xyzw
    mad r7.xyzw, r4.wwww, r7.xyzw, r8.xyzw
    mul r6.xyz, r6.xyzx, r7.xyzx
    mul r4.w, r7.w, cb1[28].z
    mul r4.w, r4.w, cb1[28].w
    mov r5.z, -r5.y
    add r5.zw, r5.xxxz, l(0.000000, 0.000000, -0.500000, 0.500000)
    mul r7.x, cb1[29].x, l(0.008727)
    sincos r7.x, r8.x, r7.x
    div r7.x, r7.x, r8.x
    mul r5.zw, r5.zzzw, r7.xxxx
    add r5.zw, r5.zzzw, r5.zzzw
    min r7.xy, |r5.zwzz|, l(1.000000, 1.000000, 0.000000, 0.000000)
    max r7.zw, |r5.zzzw|, l(0.000000, 0.000000, 1.000000, 1.000000)
    div r7.zw, l(1.000000, 1.000000, 1.000000, 1.000000), r7.zzzw
    mul r7.xy, r7.zwzz, r7.xyxx
    mul r7.zw, r7.xxxy, r7.xxxy
    mad r8.xy, r7.zwzz, l(0.020835, 0.020835, 0.000000, 0.000000), l(-0.085133, -0.085133, 0.000000, 0.000000)
    mad r8.xy, r7.zwzz, r8.xyxx, l(0.180141, 0.180141, 0.000000, 0.000000)
    mad r8.xy, r7.zwzz, r8.xyxx, l(-0.330299, -0.330299, 0.000000, 0.000000)
    mad r7.zw, r7.zzzw, r8.xxxy, l(0.000000, 0.000000, 0.999866, 0.999866)
    mul r8.xy, r7.zwzz, r7.xyxx
    lt r8.zw, l(0.000000, 0.000000, 1.000000, 1.000000), |r5.zzzw|
    mad r8.xy, r8.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(1.570796, 1.570796, 0.000000, 0.000000)
    and r8.xy, r8.zwzz, r8.xyxx
    mad r7.xy, r7.xyxx, r7.zwzz, r8.xyxx
    min r5.zw, r5.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    lt r5.zw, r5.zzzw, -r5.zzzw
    movc r5.zw, r5.zzzw, -r7.xxxy, r7.xxxy
    mul r5.zw, r5.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    sincos r7.x, r8.x, r5.z
    div r5.z, r7.x, r8.x
    sincos r7.x, r8.x, r5.w
    div r5.w, r7.x, r8.x
    mul r5.zw, r6.wwww, r5.zzzw
    mul r7.xyz, r5.wwww, cb1[31].xyzx
    mad r7.xyz, r5.zzzz, cb1[30].xyzx, r7.xyzx
    mad r7.xyz, r6.wwww, cb1[32].xyzx, r7.xyzx
    add r7.xyz, r7.xyzx, cb1[3].xyzx
    ieq r4.z, r4.z, l(-1)
    if_nz r4.z
      imm_atomic_iadd r1.x, u2, cb0[22].w, l(1)
    endif 
    iadd r4.z, r1.x, cb0[20].x
    store_uav_typed u1.xyzw, r4.zzzz, r0.zzzz
    iadd r0.z, r1.x, cb0[21].y
    iadd r0.z, r0.z, cb0[20].x
    store_uav_typed u1.xyzw, r0.zzzz, r6.xxxx
    iadd r3.yzw, r1.xxxx, r3.yyzw
    iadd r3.yzw, r3.yyzw, cb0[20].xxxx
    store_uav_typed u1.xyzw, r3.yyyy, r6.yyyy
    imad r5.zw, l(0, 0, 3, 5), cb0[21].yyyy, r1.xxxx
    iadd r5.zw, r5.zzzw, cb0[20].xxxx
    store_uav_typed u1.xyzw, r5.zzzz, r6.zzzz
    store_uav_typed u1.xyzw, r3.zzzz, r4.wwww
    store_uav_typed u1.xyzw, r5.wwww, r0.wwww
    imad r6.xyzw, l(6, 7, 9, 10), cb0[21].yyyy, r1.xxxx
    iadd r6.xyzw, r6.xyzw, cb0[20].xxxx
    store_uav_typed u1.xyzw, r6.xxxx, r1.yyyy
    store_uav_typed u1.xyzw, r6.yyyy, r1.zzzz
    store_uav_typed u1.xyzw, r3.wwww, r4.yyyy
    store_uav_typed u1.xyzw, r6.zzzz, r7.xxxx
    store_uav_typed u1.xyzw, r6.wwww, r7.yyyy
    imad r6.xyzw, l(11, 12, 13, 14), cb0[21].yyyy, r1.xxxx
    iadd r6.xyzw, r6.xyzw, cb0[20].xxxx
    store_uav_typed u1.xyzw, r6.xxxx, r7.zzzz
    store_uav_typed u1.xyzw, r6.yyyy, r1.wwww
    store_uav_typed u1.xyzw, r6.zzzz, r2.xxxx
    store_uav_typed u1.xyzw, r6.wwww, r2.yyyy
    imad r6.xyzw, l(15, 17, 18, 19), cb0[21].yyyy, r1.xxxx
    iadd r6.xyzw, r6.xyzw, cb0[20].xxxx
    store_uav_typed u1.xyzw, r6.xxxx, r2.zzzz
    ishl r0.z, cb0[21].y, l(4)
    iadd r0.z, r1.x, r0.z
    iadd r0.z, r0.z, cb0[20].x
    store_uav_typed u1.xyzw, r0.zzzz, r3.xxxx
    store_uav_typed u1.xyzw, r6.yyyy, r2.wwww
    store_uav_typed u0.xyzw, r4.zzzz, r4.xxxx
    store_uav_typed u1.xyzw, r6.zzzz, r5.xxxx
    store_uav_typed u1.xyzw, r6.wwww, r5.yyyy
  else 
    iadd r0.x, -r0.y, r0.x
    itof r0.y, r0.x
    ge r2.xyzw, r0.yyyy, cb0[10].xyzw
    and r2.xyzw, r2.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
    dp4 r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.xyzw
    ge r2.xyzw, r0.yyyy, cb0[11].xyzw
    and r2.xyzw, r2.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
    dp4 r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r2.xyzw
    ftoi r0.yz, r0.yyzy
    iadd r0.y, r0.y, r0.z
    iadd r0.z, r0.x, -cb0[r0.y + 12].w
    iadd r0.x, r0.x, cb1[34].x
    itof r0.z, r0.z
    mad r0.y, cb0[r0.y + 12].x, r0.z, cb0[r0.y + 12].y
    add r0.y, -r0.y, cb1[28].y
    add r0.z, -cb1[0].x, cb1[0].y
    imul null, r2.x, vThreadID.x, l(0x0019660d)
    imul null, r2.y, cb0[9].z, l(0x0019660d)
    iadd r1.yz, r2.xxyx, l(0, 0x3c6ef35f, 0x3c6ef35f, 0)
    imad r2.xyzw, r1.yyyy, r1.yyyy, l(0x3c3c2745, 0x3c22c138, 0x3beff51e, 0x3b8a5cea)
    imad r3.xyzw, r1.zzzz, r2.xyzw, r1.yyyy
    imad r4.xyzw, r2.xyzw, r3.xyzw, r1.zzzz
    imad r5.xyzw, r3.xyzw, r4.xyzw, r1.yyyy
    imad r2.xyzw, r3.wxyz, r5.wxyz, r2.wxyz
    ishr r1.yzw, r2.yyzw, l(0, 8, 8, 8)
    and r1.yzw, r1.yyzw, l(0, 0x00ffffff, 0x00ffffff, 0x00ffffff)
    utof r1.yzw, r1.yyzw
    mul r0.z, r0.z, r1.y
    mad r0.z, r0.z, l(0.000000), cb1[0].x
    add r0.w, -cb1[1].y, cb1[1].z
    mul r0.w, r0.w, r1.z
    mad r0.w, r0.w, l(0.000000), cb1[1].y
    mul r0.z, r0.z, l(360.000000)
    mul r1.y, r1.w, l(0.000000)
    add r1.zw, -cb1[26].xxxy, cb1[27].xxxy
    imad r2.y, r4.w, r2.x, r3.w
    ishr r2.xy, r2.xyxx, l(8, 8, 0, 0)
    and r2.xy, r2.xyxx, l(0x00ffffff, 0x00ffffff, 0, 0)
    utof r2.xy, r2.xyxx
    mul r1.zw, r1.zzzw, r2.xxxy
    mad r2.xy, r1.zwzz, l(0.000000, 0.000000, 0.000000, 0.000000), cb1[26].xyxx
    max r1.z, r0.w, l(0.000010)
    add r1.w, r1.z, l(-0.000100)
    lt r1.w, r0.y, r1.w
    div r1.z, r0.y, r1.z
    sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, r2.xyxx, t2.xyzw, s0, l(0.000000)
    add r2.w, r1.z, -cb0[24].z
    mul_sat r2.w, r2.w, cb0[25].x
    mul r4.x, r2.w, l(127.000000)
    round_ni r4.x, r4.x
    lt r4.y, r4.x, l(127.000000)
    add r4.z, r4.x, l(1.000000)
    mad r2.w, r2.w, l(127.000000), -r4.x
    mul r4.zw, r4.zzzx, l(0.000000, 0.000000, 4.000000, 4.000000)
    movc r4.y, r4.y, r4.z, l(508.000000)
    ftou r4.z, r4.w
    ld_indexable(buffer)(float,float,float,float) r5.x, r4.zzzz, t3.xyzw
    mad r4.xzw, r4.xxxx, l(4.000000, 0.000000, 4.000000, 4.000000), l(1.000000, 0.000000, 2.000000, 3.000000)
    ftou r4.xzw, r4.xxzw
    ld_indexable(buffer)(float,float,float,float) r5.y, r4.xxxx, t3.yxzw
    ld_indexable(buffer)(float,float,float,float) r5.z, r4.zzzz, t3.yzxw
    ld_indexable(buffer)(float,float,float,float) r5.w, r4.wwww, t3.yzwx
    ftou r4.x, r4.y
    ld_indexable(buffer)(float,float,float,float) r6.x, r4.xxxx, t3.xyzw
    add r4.xyz, r4.yyyy, l(1.000000, 2.000000, 3.000000, 0.000000)
    ftou r4.xyz, r4.xyzx
    ld_indexable(buffer)(float,float,float,float) r6.y, r4.xxxx, t3.yxzw
    ld_indexable(buffer)(float,float,float,float) r6.z, r4.yyyy, t3.yzxw
    ld_indexable(buffer)(float,float,float,float) r6.w, r4.zzzz, t3.yzwx
    add r4.xyzw, -r5.xyzw, r6.xyzw
    mad r4.xyzw, r2.wwww, r4.xyzw, r5.xyzw
    mul r3.xyz, r3.xyzx, r4.xyzx
    mul r2.w, r4.w, cb1[28].z
    mul r2.w, r2.w, cb1[28].w
    mov r2.z, -r2.y
    add r4.xy, r2.xzxx, l(-0.500000, 0.500000, 0.000000, 0.000000)
    mul r2.z, cb1[29].x, l(0.008727)
    sincos r5.x, r6.x, r2.z
    div r2.z, r5.x, r6.x
    mul r4.xy, r2.zzzz, r4.xyxx
    add r4.xy, r4.xyxx, r4.xyxx
    min r4.zw, |r4.xxxy|, l(0.000000, 0.000000, 1.000000, 1.000000)
    max r5.xy, |r4.xyxx|, l(1.000000, 1.000000, 0.000000, 0.000000)
    div r5.xy, l(1.000000, 1.000000, 1.000000, 1.000000), r5.xyxx
    mul r4.zw, r4.zzzw, r5.xxxy
    mul r5.xy, r4.zwzz, r4.zwzz
    mad r5.zw, r5.xxxy, l(0.000000, 0.000000, 0.020835, 0.020835), l(0.000000, 0.000000, -0.085133, -0.085133)
    mad r5.zw, r5.xxxy, r5.zzzw, l(0.000000, 0.000000, 0.180141, 0.180141)
    mad r5.zw, r5.xxxy, r5.zzzw, l(0.000000, 0.000000, -0.330299, -0.330299)
    mad r5.xy, r5.xyxx, r5.zwzz, l(0.999866, 0.999866, 0.000000, 0.000000)
    mul r5.zw, r4.zzzw, r5.xxxy
    lt r6.xy, l(1.000000, 1.000000, 0.000000, 0.000000), |r4.xyxx|
    mad r5.zw, r5.zzzw, l(0.000000, 0.000000, -2.000000, -2.000000), l(0.000000, 0.000000, 1.570796, 1.570796)
    and r5.zw, r6.xxxy, r5.zzzw
    mad r4.zw, r4.zzzw, r5.xxxy, r5.zzzw
    min r4.xy, r4.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
    lt r4.xy, r4.xyxx, -r4.xyxx
    movc r4.xy, r4.xyxx, -r4.zwzz, r4.zwzz
    mul r4.xy, r4.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
    sincos r4.x, r5.x, r4.x
    div r2.z, r4.x, r5.x
    mul r2.z, r3.w, r2.z
    sincos r4.x, r5.x, r4.y
    div r4.x, r4.x, r5.x
    mul r4.x, r3.w, r4.x
    mul r4.xyz, r4.xxxx, cb1[31].xyzx
    mad r4.xyz, r2.zzzz, cb1[30].xyzx, r4.xyzx
    mad r4.xyz, r3.wwww, cb1[32].xyzx, r4.xyzx
    add r4.xyz, r4.xyzx, cb1[3].xyzx
    ieq r1.w, r1.w, l(-1)
    if_nz r1.w
      imm_atomic_iadd r1.x, u2, cb0[22].w, l(1)
    endif 
    iadd r1.w, r1.x, cb0[20].x
    store_uav_typed u1.xyzw, r1.wwww, r0.yyyy
    iadd r0.y, r1.x, cb0[21].y
    iadd r0.y, r0.y, cb0[20].x
    store_uav_typed u1.xyzw, r0.yyyy, r3.xxxx
    ishl r5.xyzw, cb0[21].yyyy, l(1, 2, 3, 4)
    iadd r5.xyzw, r1.xxxx, r5.xyzw
    iadd r5.xyzw, r5.xyzw, cb0[20].xxxx
    store_uav_typed u1.xyzw, r5.xxxx, r3.yyyy
    imad r6.xyzw, l(3, 5, 6, 7), cb0[21].yyyy, r1.xxxx
    iadd r6.xyzw, r6.xyzw, cb0[20].xxxx
    store_uav_typed u1.xyzw, r6.xxxx, r3.zzzz
    store_uav_typed u1.xyzw, r5.yyyy, r2.wwww
    store_uav_typed u1.xyzw, r6.yyyy, r0.wwww
    store_uav_typed u1.xyzw, r6.zzzz, l(1.000000,1.000000,1.000000,1.000000)
    store_uav_typed u1.xyzw, r6.wwww, r1.yyyy
    store_uav_typed u1.xyzw, r5.zzzz, r1.zzzz
    imad r3.xyzw, l(9, 10, 11, 12), cb0[21].yyyy, r1.xxxx
    iadd r3.xyzw, r3.xyzw, cb0[20].xxxx
    store_uav_typed u1.xyzw, r3.xxxx, r4.xxxx
    store_uav_typed u1.xyzw, r3.yyyy, r4.yyyy
    store_uav_typed u1.xyzw, r3.zzzz, r4.zzzz
    store_uav_typed u1.xyzw, r3.wwww, l(1.000000,1.000000,1.000000,1.000000)
    imad r3.xyzw, l(13, 14, 15, 17), cb0[21].yyyy, r1.xxxx
    iadd r3.xyzw, r3.xyzw, cb0[20].xxxx
    store_uav_typed u1.xyzw, r3.xxxx, l(1.000000,1.000000,1.000000,1.000000)
    store_uav_typed u1.xyzw, r3.yyyy, l(1.000000,1.000000,1.000000,1.000000)
    store_uav_typed u1.xyzw, r3.zzzz, r0.zzzz
    store_uav_typed u1.xyzw, r5.wwww, cb1[5].xxxx
    store_uav_typed u1.xyzw, r3.wwww, cb1[5].yyyy
    store_uav_typed u0.xyzw, r1.wwww, r0.xxxx
    imad r0.xy, l(18, 19, 0, 0), cb0[21].yyyy, r1.xxxx
    iadd r0.xy, r0.xyxx, cb0[20].xxxx
    store_uav_typed u1.xyzw, r0.xxxx, r2.xxxx
    store_uav_typed u1.xyzw, r0.yyyy, r2.yyyy
  endif 
endif 
ret 
// Approximately 290 instruction slots used
