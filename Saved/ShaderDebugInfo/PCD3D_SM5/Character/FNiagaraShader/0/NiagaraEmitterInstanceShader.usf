// #define ALLOW_STATIC_LIGHTING 1
// #define CLEAR_COAT_BOTTOM_NORMAL 0
// #define COMPILE_SHADERS_FOR_DEVELOPMENT 1
// #define COMPILER_DEFINE #define
// #define COMPUTESHADER 1
// #define DOMAINSHADER 0
// #define DXT5_NORMALMAPS 0
// #define EARLY_Z_PASS_ONLY_MATERIAL_MASKING 0
// #define EIGHT_BIT_MESH_DISTANCE_FIELDS 0
// #define FORWARD_SHADING 0
// #define GBUFFER_HAS_VELOCITY 0
// #define GEOMETRYSHADER 0
// #define GPU_SIMULATION 1
// #define GPU_SIMULATION_SHADER 1
// #define HAS_INVERTED_Z_BUFFER 1
// #define HULLSHADER 0
// #define INSTANCED_STEREO 0
// #define IRIS_NORMAL 0
// #define MOBILE_MULTI_VIEW 0
// #define MULTI_VIEW 0
// #define NIAGARA_MAX_GPU_SPAWN_INFOS 8
// #define ODS_CAPTURE 0
// #define PIXELSHADER 0
// #define PLATFORM_SUPPORTS_DISTANCE_FIELDS 1
// #define PLATFORM_SUPPORTS_PER_PIXEL_DBUFFER_MASK 0
// #define PLATFORM_SUPPORTS_RENDERTARGET_WRITE_MASK 0
// #define PLATFORM_SUPPORTS_SRV_UB 1
// #define POST_PROCESS_ALPHA 0
// #define PROJECT_ALLOW_GLOBAL_CLIP_PLANE 0
// #define PROJECT_MOBILE_DISABLE_VERTEX_FOG 1
// #define PROJECT_MOBILE_USE_LEGACY_SHADING 0
// #define PROJECT_SUPPORT_SKY_ATMOSPHERE 1
// #define PROJECT_SUPPORT_SKY_ATMOSPHERE_AFFECTS_HEIGHFOG 0
// #define PROJECT_SUPPORT_VIRTUAL_TEXTURE 0
// #define PROJECT_VERTEX_FOGGING_FOR_OPAQUE 0
// #define RAYCALLABLESHADER 0
// #define RAYGENSHADER 0
// #define RAYHITGROUPSHADER 0
// #define RAYMISSSHADER 0
// #define SELECTIVE_BASEPASS_OUTPUTS 0
// #define SHADING_PATH_DEFERRED 1
// #define USE_DBUFFER 1
// #define USE_PREEXPOSURE 1
// #define USE_SHADER_STAGES 0
// #define VERTEXSHADER 0
// #define VIRTUAL_TEXTURE_FEEDBACK_FACTOR 16
#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 9 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 39 "/Engine/Public/Platform.ush"
#line 1 "Platform/D3D/D3DCommon.ush"
#line 7 "/Engine/Public/Platform/D3D/D3DCommon.ush"
precise float MakePrecise(precise float v) { return v; }
precise float2 MakePrecise(precise float2 v) { return v; }
precise float3 MakePrecise(precise float3 v) { return v; }
precise float4 MakePrecise(precise float4 v) { return v; }
#line 40 "/Engine/Public/Platform.ush"
#line 46 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 47 "/Engine/Public/Platform.ush"
#line 609 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
#line 10 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Common.ush"
#line 61 "/Engine/Private/Common.ush"
#line 1 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/View.ush"


cbuffer View
{
	float4x4 View_TranslatedWorldToClip;
	float4x4 View_WorldToClip;
	float4x4 View_ClipToWorld;
	float4x4 View_TranslatedWorldToView;
	float4x4 View_ViewToTranslatedWorld;
	float4x4 View_TranslatedWorldToCameraView;
	float4x4 View_CameraViewToTranslatedWorld;
	float4x4 View_ViewToClip;
	float4x4 View_ViewToClipNoAA;
	float4x4 View_ClipToView;
	float4x4 View_ClipToTranslatedWorld;
	float4x4 View_SVPositionToTranslatedWorld;
	float4x4 View_ScreenToWorld;
	float4x4 View_ScreenToTranslatedWorld;
	float4x4 View_MobileMultiviewShadowTransform;
	float3  View_ViewForward;
	float  PrePadding_View_972;
	float3  View_ViewUp;
	float  PrePadding_View_988;
	float3  View_ViewRight;
	float  PrePadding_View_1004;
	float3  View_HMDViewNoRollUp;
	float  PrePadding_View_1020;
	float3  View_HMDViewNoRollRight;
	float  PrePadding_View_1036;
	float4 View_InvDeviceZToWorldZTransform;
	float4  View_ScreenPositionScaleBias;
	float3 View_WorldCameraOrigin;
	float PrePadding_View_1084;
	float3 View_TranslatedWorldCameraOrigin;
	float PrePadding_View_1100;
	float3 View_WorldViewOrigin;
	float PrePadding_View_1116;
	float3 View_PreViewTranslation;
	float PrePadding_View_1132;
	float4x4 View_PrevProjection;
	float4x4 View_PrevViewProj;
	float4x4 View_PrevViewRotationProj;
	float4x4 View_PrevViewToClip;
	float4x4 View_PrevClipToView;
	float4x4 View_PrevTranslatedWorldToClip;
	float4x4 View_PrevTranslatedWorldToView;
	float4x4 View_PrevViewToTranslatedWorld;
	float4x4 View_PrevTranslatedWorldToCameraView;
	float4x4 View_PrevCameraViewToTranslatedWorld;
	float3 View_PrevWorldCameraOrigin;
	float PrePadding_View_1788;
	float3 View_PrevWorldViewOrigin;
	float PrePadding_View_1804;
	float3 View_PrevPreViewTranslation;
	float PrePadding_View_1820;
	float4x4 View_PrevInvViewProj;
	float4x4 View_PrevScreenToTranslatedWorld;
	float4x4 View_ClipToPrevClip;
	float4 View_TemporalAAJitter;
	float4 View_GlobalClippingPlane;
	float2 View_FieldOfViewWideAngles;
	float2 View_PrevFieldOfViewWideAngles;
	float4  View_ViewRectMin;
	float4 View_ViewSizeAndInvSize;
	float4 View_BufferSizeAndInvSize;
	float4 View_BufferBilinearUVMinMax;
	float4 View_ScreenToViewSpace;
	int View_NumSceneColorMSAASamples;
	float  View_PreExposure;
	float  View_OneOverPreExposure;
	float  PrePadding_View_2156;
	float4  View_DiffuseOverrideParameter;
	float4  View_SpecularOverrideParameter;
	float4  View_NormalOverrideParameter;
	float2  View_RoughnessOverrideParameter;
	float View_PrevFrameGameTime;
	float View_PrevFrameRealTime;
	float  View_OutOfBoundsMask;
	float  PrePadding_View_2228;
	float  PrePadding_View_2232;
	float  PrePadding_View_2236;
	float3 View_WorldCameraMovementSinceLastFrame;
	float View_CullingSign;
	float  View_NearPlane;
	float View_AdaptiveTessellationFactor;
	float View_GameTime;
	float View_RealTime;
	float View_DeltaTime;
	float View_MaterialTextureMipBias;
	float View_MaterialTextureDerivativeMultiply;
	uint View_Random;
	uint View_FrameNumber;
	uint View_StateFrameIndexMod8;
	uint View_StateFrameIndex;
	float  View_CameraCut;
	float  View_UnlitViewmodeMask;
	float  PrePadding_View_2308;
	float  PrePadding_View_2312;
	float  PrePadding_View_2316;
	float4  View_DirectionalLightColor;
	float3  View_DirectionalLightDirection;
	float  PrePadding_View_2348;
	float4 View_TranslucencyLightingVolumeMin[2];
	float4 View_TranslucencyLightingVolumeInvSize[2];
	float4 View_TemporalAAParams;
	float4 View_CircleDOFParams;
	float View_DepthOfFieldSensorWidth;
	float View_DepthOfFieldFocalDistance;
	float View_DepthOfFieldScale;
	float View_DepthOfFieldFocalLength;
	float View_DepthOfFieldFocalRegion;
	float View_DepthOfFieldNearTransitionRegion;
	float View_DepthOfFieldFarTransitionRegion;
	float View_MotionBlurNormalizedToPixel;
	float View_bSubsurfacePostprocessEnabled;
	float View_GeneralPurposeTweak;
	float  View_DemosaicVposOffset;
	float  PrePadding_View_2492;
	float3 View_IndirectLightingColorScale;
	float  View_HDR32bppEncodingMode;
	float  View_AtmosphericFogSunPower;
	float  View_AtmosphericFogPower;
	float  View_AtmosphericFogDensityScale;
	float  View_AtmosphericFogDensityOffset;
	float  View_AtmosphericFogGroundOffset;
	float  View_AtmosphericFogDistanceScale;
	float  View_AtmosphericFogAltitudeScale;
	float  View_AtmosphericFogHeightScaleRayleigh;
	float  View_AtmosphericFogStartDistance;
	float  View_AtmosphericFogDistanceOffset;
	float  View_AtmosphericFogSunDiscScale;
	float  PrePadding_View_2556;
	float4 View_AtmosphereLightDirection[2];
	float4 View_AtmosphereLightColor[2];
	float4 View_AtmosphereLightColorGlobalPostTransmittance[2];
	float4 View_AtmosphereLightDiscLuminance[2];
	float4 View_AtmosphereLightDiscCosHalfApexAngle[2];
	float4 View_SkyViewLutSizeAndInvSize;
	float3 View_SkyWorldCameraOrigin;
	float PrePadding_View_2748;
	float4 View_SkyAtmosphereSkyLuminanceFactor;
	float View_SkyAtmosphereHeightFogContribution;
	float View_SkyAtmosphereBottomRadius;
	float View_SkyAtmosphereTopRadius;
	float View_SkyAtmosphereAerialPerspectiveStartDepth;
	float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLength;
	float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthInv;
	float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	uint View_AtmosphericFogRenderMask;
	uint View_AtmosphericFogInscatterAltitudeSampleNum;
	uint PrePadding_View_2812;
	float3 View_NormalCurvatureToRoughnessScaleBias;
	float View_RenderingReflectionCaptureMask;
	float4 View_AmbientCubemapTint;
	float View_AmbientCubemapIntensity;
	float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float View_SkyLightAffectReflectionFlag;
	float View_SkyLightAffectGlobalIlluminationFlag;
	float4 View_SkyLightColor;
	float4 View_SkyIrradianceEnvironmentMap[7];
	float View_MobilePreviewMode;
	float View_HMDEyePaddingOffset;
	float  View_ReflectionCubemapMaxMip;
	float View_ShowDecalsMask;
	uint View_DistanceFieldAOSpecularOcclusionMode;
	float View_IndirectCapsuleSelfShadowingIntensity;
	float PrePadding_View_3016;
	float PrePadding_View_3020;
	float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int View_StereoPassIndex;
	float4 View_GlobalVolumeCenterAndExtent[4];
	float4 View_GlobalVolumeWorldToUVAddAndMul[4];
	float View_GlobalVolumeDimension;
	float View_GlobalVolumeTexelSize;
	float View_MaxGlobalDistance;
	float PrePadding_View_3180;
	int2 View_CursorPosition;
	float View_bCheckerboardSubsurfaceProfileRendering;
	float PrePadding_View_3196;
	float3 View_VolumetricFogInvGridSize;
	float PrePadding_View_3212;
	float3 View_VolumetricFogGridZParams;
	float PrePadding_View_3228;
	float2 View_VolumetricFogSVPosToVolumeUV;
	float View_VolumetricFogMaxDistance;
	float PrePadding_View_3244;
	float3 View_VolumetricLightmapWorldToUVScale;
	float PrePadding_View_3260;
	float3 View_VolumetricLightmapWorldToUVAdd;
	float PrePadding_View_3276;
	float3 View_VolumetricLightmapIndirectionTextureSize;
	float View_VolumetricLightmapBrickSize;
	float3 View_VolumetricLightmapBrickTexelSize;
	float View_StereoIPD;
	float View_IndirectLightingCacheShowFlag;
	float View_EyeToPixelSpreadAngle;
	float PrePadding_View_3320;
	float PrePadding_View_3324;
	float4x4 View_WorldToVirtualTexture;
	float4 View_VirtualTextureParams;
	float4 View_XRPassthroughCameraUVs[2];
	int View_FarShadowStaticMeshLODBias;
	float View_MinRoughness;
	float View_ConstantWaterDepth;
	float PrePadding_View_3452;
	float4 View_HairRenderInfo;
}
SamplerState View_MaterialTextureBilinearWrapedSampler;
SamplerState View_MaterialTextureBilinearClampedSampler;
Texture3D<uint4> View_VolumetricLightmapIndirectionTexture;
Texture3D View_VolumetricLightmapBrickAmbientVector;
Texture3D View_VolumetricLightmapBrickSHCoefficients0;
Texture3D View_VolumetricLightmapBrickSHCoefficients1;
Texture3D View_VolumetricLightmapBrickSHCoefficients2;
Texture3D View_VolumetricLightmapBrickSHCoefficients3;
Texture3D View_VolumetricLightmapBrickSHCoefficients4;
Texture3D View_VolumetricLightmapBrickSHCoefficients5;
Texture3D View_SkyBentNormalBrickTexture;
Texture3D View_DirectionalLightShadowingBrickTexture;
SamplerState View_VolumetricLightmapBrickAmbientVectorSampler;
SamplerState View_VolumetricLightmapTextureSampler0;
SamplerState View_VolumetricLightmapTextureSampler1;
SamplerState View_VolumetricLightmapTextureSampler2;
SamplerState View_VolumetricLightmapTextureSampler3;
SamplerState View_VolumetricLightmapTextureSampler4;
SamplerState View_VolumetricLightmapTextureSampler5;
SamplerState View_SkyBentNormalTextureSampler;
SamplerState View_DirectionalLightShadowingTextureSampler;
Texture3D View_GlobalDistanceFieldTexture0;
SamplerState View_GlobalDistanceFieldSampler0;
Texture3D View_GlobalDistanceFieldTexture1;
SamplerState View_GlobalDistanceFieldSampler1;
Texture3D View_GlobalDistanceFieldTexture2;
SamplerState View_GlobalDistanceFieldSampler2;
Texture3D View_GlobalDistanceFieldTexture3;
SamplerState View_GlobalDistanceFieldSampler3;
Texture2D View_AtmosphereTransmittanceTexture;
SamplerState View_AtmosphereTransmittanceTextureSampler;
Texture2D View_AtmosphereIrradianceTexture;
SamplerState View_AtmosphereIrradianceTextureSampler;
Texture3D View_AtmosphereInscatterTexture;
SamplerState View_AtmosphereInscatterTextureSampler;
Texture2D View_PerlinNoiseGradientTexture;
SamplerState View_PerlinNoiseGradientTextureSampler;
Texture3D View_PerlinNoise3DTexture;
SamplerState View_PerlinNoise3DTextureSampler;
Texture2D<uint> View_SobolSamplingTexture;
SamplerState View_SharedPointWrappedSampler;
SamplerState View_SharedPointClampedSampler;
SamplerState View_SharedBilinearWrappedSampler;
SamplerState View_SharedBilinearClampedSampler;
SamplerState View_SharedTrilinearWrappedSampler;
SamplerState View_SharedTrilinearClampedSampler;
Texture2D View_PreIntegratedBRDF;
SamplerState View_PreIntegratedBRDFSampler;
StructuredBuffer<float4> View_PrimitiveSceneData;
Texture2D<float4> View_PrimitiveSceneDataTexture;
StructuredBuffer<float4> View_LightmapSceneData;
Texture2D View_TransmittanceLutTexture;
SamplerState View_TransmittanceLutTextureSampler;
Texture2D View_SkyViewLutTexture;
SamplerState View_SkyViewLutTextureSampler;
Texture2D View_DistantSkyLightLutTexture;
SamplerState View_DistantSkyLightLutTextureSampler;
Texture3D View_CameraAerialPerspectiveVolume;
SamplerState View_CameraAerialPerspectiveVolumeSampler;
/*atic const struct
{
	float4x4 TranslatedWorldToClip;
	float4x4 WorldToClip;
	float4x4 ClipToWorld;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToWorld;
	float4x4 ScreenToTranslatedWorld;
	float4x4 MobileMultiviewShadowTransform;
	float3  ViewForward;
	float3  ViewUp;
	float3  ViewRight;
	float3  HMDViewNoRollUp;
	float3  HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	float4  ScreenPositionScaleBias;
	float3 WorldCameraOrigin;
	float3 TranslatedWorldCameraOrigin;
	float3 WorldViewOrigin;
	float3 PreViewTranslation;
	float4x4 PrevProjection;
	float4x4 PrevViewProj;
	float4x4 PrevViewRotationProj;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevWorldCameraOrigin;
	float3 PrevWorldViewOrigin;
	float3 PrevPreViewTranslation;
	float4x4 PrevInvViewProj;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	float4  ViewRectMin;
	float4 ViewSizeAndInvSize;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	float4 ScreenToViewSpace;
	int NumSceneColorMSAASamples;
	float  PreExposure;
	float  OneOverPreExposure;
	float4  DiffuseOverrideParameter;
	float4  SpecularOverrideParameter;
	float4  NormalOverrideParameter;
	float2  RoughnessOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	float  OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	float  NearPlane;
	float AdaptiveTessellationFactor;
	float GameTime;
	float RealTime;
	float DeltaTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint StateFrameIndexMod8;
	uint StateFrameIndex;
	float  CameraCut;
	float  UnlitViewmodeMask;
	float4  DirectionalLightColor;
	float3  DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float bSubsurfacePostprocessEnabled;
	float GeneralPurposeTweak;
	float  DemosaicVposOffset;
	float3 IndirectLightingColorScale;
	float  HDR32bppEncodingMode;
	float  AtmosphericFogSunPower;
	float  AtmosphericFogPower;
	float  AtmosphericFogDensityScale;
	float  AtmosphericFogDensityOffset;
	float  AtmosphericFogGroundOffset;
	float  AtmosphericFogDistanceScale;
	float  AtmosphericFogAltitudeScale;
	float  AtmosphericFogHeightScaleRayleigh;
	float  AtmosphericFogStartDistance;
	float  AtmosphericFogDistanceOffset;
	float  AtmosphericFogSunDiscScale;
	float4 AtmosphereLightDirection[2];
	float4 AtmosphereLightColor[2];
	float4 AtmosphereLightColorGlobalPostTransmittance[2];
	float4 AtmosphereLightDiscLuminance[2];
	float4 AtmosphereLightDiscCosHalfApexAngle[2];
	float4 SkyViewLutSizeAndInvSize;
	float3 SkyWorldCameraOrigin;
	float4 SkyAtmosphereSkyLuminanceFactor;
	float SkyAtmosphereHeightFogContribution;
	float SkyAtmosphereBottomRadius;
	float SkyAtmosphereTopRadius;
	float SkyAtmosphereAerialPerspectiveStartDepth;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLength;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthInv;
	float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	uint AtmosphericFogRenderMask;
	uint AtmosphericFogInscatterAltitudeSampleNum;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float SkyLightAffectReflectionFlag;
	float SkyLightAffectGlobalIlluminationFlag;
	float4 SkyLightColor;
	float4 SkyIrradianceEnvironmentMap[7];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	float  ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeCenterAndExtent[4];
	float4 GlobalVolumeWorldToUVAddAndMul[4];
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDistance;
	int2 CursorPosition;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float StereoIPD;
	float IndirectLightingCacheShowFlag;
	float EyeToPixelSpreadAngle;
	float4x4 WorldToVirtualTexture;
	float4 VirtualTextureParams;
	float4 XRPassthroughCameraUVs[2];
	int FarShadowStaticMeshLODBias;
	float MinRoughness;
	float ConstantWaterDepth;
	float4 HairRenderInfo;
	SamplerState MaterialTextureBilinearWrapedSampler;
	SamplerState MaterialTextureBilinearClampedSampler;
	Texture3D<uint4> VolumetricLightmapIndirectionTexture;
	Texture3D VolumetricLightmapBrickAmbientVector;
	Texture3D VolumetricLightmapBrickSHCoefficients0;
	Texture3D VolumetricLightmapBrickSHCoefficients1;
	Texture3D VolumetricLightmapBrickSHCoefficients2;
	Texture3D VolumetricLightmapBrickSHCoefficients3;
	Texture3D VolumetricLightmapBrickSHCoefficients4;
	Texture3D VolumetricLightmapBrickSHCoefficients5;
	Texture3D SkyBentNormalBrickTexture;
	Texture3D DirectionalLightShadowingBrickTexture;
	SamplerState VolumetricLightmapBrickAmbientVectorSampler;
	SamplerState VolumetricLightmapTextureSampler0;
	SamplerState VolumetricLightmapTextureSampler1;
	SamplerState VolumetricLightmapTextureSampler2;
	SamplerState VolumetricLightmapTextureSampler3;
	SamplerState VolumetricLightmapTextureSampler4;
	SamplerState VolumetricLightmapTextureSampler5;
	SamplerState SkyBentNormalTextureSampler;
	SamplerState DirectionalLightShadowingTextureSampler;
	Texture3D GlobalDistanceFieldTexture0;
	SamplerState GlobalDistanceFieldSampler0;
	Texture3D GlobalDistanceFieldTexture1;
	SamplerState GlobalDistanceFieldSampler1;
	Texture3D GlobalDistanceFieldTexture2;
	SamplerState GlobalDistanceFieldSampler2;
	Texture3D GlobalDistanceFieldTexture3;
	SamplerState GlobalDistanceFieldSampler3;
	Texture2D AtmosphereTransmittanceTexture;
	SamplerState AtmosphereTransmittanceTextureSampler;
	Texture2D AtmosphereIrradianceTexture;
	SamplerState AtmosphereIrradianceTextureSampler;
	Texture3D AtmosphereInscatterTexture;
	SamplerState AtmosphereInscatterTextureSampler;
	Texture2D PerlinNoiseGradientTexture;
	SamplerState PerlinNoiseGradientTextureSampler;
	Texture3D PerlinNoise3DTexture;
	SamplerState PerlinNoise3DTextureSampler;
	Texture2D<uint> SobolSamplingTexture;
	SamplerState SharedPointWrappedSampler;
	SamplerState SharedPointClampedSampler;
	SamplerState SharedBilinearWrappedSampler;
	SamplerState SharedBilinearClampedSampler;
	SamplerState SharedTrilinearWrappedSampler;
	SamplerState SharedTrilinearClampedSampler;
	Texture2D PreIntegratedBRDF;
	SamplerState PreIntegratedBRDFSampler;
	StructuredBuffer<float4> PrimitiveSceneData;
	Texture2D<float4> PrimitiveSceneDataTexture;
	StructuredBuffer<float4> LightmapSceneData;
	Texture2D TransmittanceLutTexture;
	SamplerState TransmittanceLutTextureSampler;
	Texture2D SkyViewLutTexture;
	SamplerState SkyViewLutTextureSampler;
	Texture2D DistantSkyLightLutTexture;
	SamplerState DistantSkyLightLutTextureSampler;
	Texture3D CameraAerialPerspectiveVolume;
	SamplerState CameraAerialPerspectiveVolumeSampler;
} View = {View_TranslatedWorldToClip,View_WorldToClip,View_ClipToWorld,View_TranslatedWorldToView,View_ViewToTranslatedWorld,View_TranslatedWorldToCameraView,View_CameraViewToTranslatedWorld,View_ViewToClip,View_ViewToClipNoAA,View_ClipToView,View_ClipToTranslatedWorld,View_SVPositionToTranslatedWorld,View_ScreenToWorld,View_ScreenToTranslatedWorld,View_MobileMultiviewShadowTransform,View_ViewForward,View_ViewUp,View_ViewRight,View_HMDViewNoRollUp,View_HMDViewNoRollRight,View_InvDeviceZToWorldZTransform,View_ScreenPositionScaleBias,View_WorldCameraOrigin,View_TranslatedWorldCameraOrigin,View_WorldViewOrigin,View_PreViewTranslation,View_PrevProjection,View_PrevViewProj,View_PrevViewRotationProj,View_PrevViewToClip,View_PrevClipToView,View_PrevTranslatedWorldToClip,View_PrevTranslatedWorldToView,View_PrevViewToTranslatedWorld,View_PrevTranslatedWorldToCameraView,View_PrevCameraViewToTranslatedWorld,View_PrevWorldCameraOrigin,View_PrevWorldViewOrigin,View_PrevPreViewTranslation,View_PrevInvViewProj,View_PrevScreenToTranslatedWorld,View_ClipToPrevClip,View_TemporalAAJitter,View_GlobalClippingPlane,View_FieldOfViewWideAngles,View_PrevFieldOfViewWideAngles,View_ViewRectMin,View_ViewSizeAndInvSize,View_BufferSizeAndInvSize,View_BufferBilinearUVMinMax,View_ScreenToViewSpace,View_NumSceneColorMSAASamples,View_PreExposure,View_OneOverPreExposure,View_DiffuseOverrideParameter,View_SpecularOverrideParameter,View_NormalOverrideParameter,View_RoughnessOverrideParameter,View_PrevFrameGameTime,View_PrevFrameRealTime,View_OutOfBoundsMask,View_WorldCameraMovementSinceLastFrame,View_CullingSign,View_NearPlane,View_AdaptiveTessellationFactor,View_GameTime,View_RealTime,View_DeltaTime,View_MaterialTextureMipBias,View_MaterialTextureDerivativeMultiply,View_Random,View_FrameNumber,View_StateFrameIndexMod8,View_StateFrameIndex,View_CameraCut,View_UnlitViewmodeMask,View_DirectionalLightColor,View_DirectionalLightDirection,View_TranslucencyLightingVolumeMin,View_TranslucencyLightingVolumeInvSize,View_TemporalAAParams,View_CircleDOFParams,View_DepthOfFieldSensorWidth,View_DepthOfFieldFocalDistance,View_DepthOfFieldScale,View_DepthOfFieldFocalLength,View_DepthOfFieldFocalRegion,View_DepthOfFieldNearTransitionRegion,View_DepthOfFieldFarTransitionRegion,View_MotionBlurNormalizedToPixel,View_bSubsurfacePostprocessEnabled,View_GeneralPurposeTweak,View_DemosaicVposOffset,View_IndirectLightingColorScale,View_HDR32bppEncodingMode,View_AtmosphericFogSunPower,View_AtmosphericFogPower,View_AtmosphericFogDensityScale,View_AtmosphericFogDensityOffset,View_AtmosphericFogGroundOffset,View_AtmosphericFogDistanceScale,View_AtmosphericFogAltitudeScale,View_AtmosphericFogHeightScaleRayleigh,View_AtmosphericFogStartDistance,View_AtmosphericFogDistanceOffset,View_AtmosphericFogSunDiscScale,View_AtmosphereLightDirection,View_AtmosphereLightColor,View_AtmosphereLightColorGlobalPostTransmittance,View_AtmosphereLightDiscLuminance,View_AtmosphereLightDiscCosHalfApexAngle,View_SkyViewLutSizeAndInvSize,View_SkyWorldCameraOrigin,View_SkyAtmosphereSkyLuminanceFactor,View_SkyAtmosphereHeightFogContribution,View_SkyAtmosphereBottomRadius,View_SkyAtmosphereTopRadius,View_SkyAtmosphereAerialPerspectiveStartDepth,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLength,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthInv,View_SkyAtmosphereApplyCameraAerialPerspectiveVolume,View_AtmosphericFogRenderMask,View_AtmosphericFogInscatterAltitudeSampleNum,View_NormalCurvatureToRoughnessScaleBias,View_RenderingReflectionCaptureMask,View_AmbientCubemapTint,View_AmbientCubemapIntensity,View_SkyLightApplyPrecomputedBentNormalShadowingFlag,View_SkyLightAffectReflectionFlag,View_SkyLightAffectGlobalIlluminationFlag,View_SkyLightColor,View_SkyIrradianceEnvironmentMap,View_MobilePreviewMode,View_HMDEyePaddingOffset,View_ReflectionCubemapMaxMip,View_ShowDecalsMask,View_DistanceFieldAOSpecularOcclusionMode,View_IndirectCapsuleSelfShadowingIntensity,View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight,View_StereoPassIndex,View_GlobalVolumeCenterAndExtent,View_GlobalVolumeWorldToUVAddAndMul,View_GlobalVolumeDimension,View_GlobalVolumeTexelSize,View_MaxGlobalDistance,View_CursorPosition,View_bCheckerboardSubsurfaceProfileRendering,View_VolumetricFogInvGridSize,View_VolumetricFogGridZParams,View_VolumetricFogSVPosToVolumeUV,View_VolumetricFogMaxDistance,View_VolumetricLightmapWorldToUVScale,View_VolumetricLightmapWorldToUVAdd,View_VolumetricLightmapIndirectionTextureSize,View_VolumetricLightmapBrickSize,View_VolumetricLightmapBrickTexelSize,View_StereoIPD,View_IndirectLightingCacheShowFlag,View_EyeToPixelSpreadAngle,View_WorldToVirtualTexture,View_VirtualTextureParams,View_XRPassthroughCameraUVs,View_FarShadowStaticMeshLODBias,View_MinRoughness,View_ConstantWaterDepth,View_HairRenderInfo,View_MaterialTextureBilinearWrapedSampler,View_MaterialTextureBilinearClampedSampler,View_VolumetricLightmapIndirectionTexture,View_VolumetricLightmapBrickAmbientVector,View_VolumetricLightmapBrickSHCoefficients0,View_VolumetricLightmapBrickSHCoefficients1,View_VolumetricLightmapBrickSHCoefficients2,View_VolumetricLightmapBrickSHCoefficients3,View_VolumetricLightmapBrickSHCoefficients4,View_VolumetricLightmapBrickSHCoefficients5,View_SkyBentNormalBrickTexture,View_DirectionalLightShadowingBrickTexture,View_VolumetricLightmapBrickAmbientVectorSampler,View_VolumetricLightmapTextureSampler0,View_VolumetricLightmapTextureSampler1,View_VolumetricLightmapTextureSampler2,View_VolumetricLightmapTextureSampler3,View_VolumetricLightmapTextureSampler4,View_VolumetricLightmapTextureSampler5,View_SkyBentNormalTextureSampler,View_DirectionalLightShadowingTextureSampler,View_GlobalDistanceFieldTexture0,View_GlobalDistanceFieldSampler0,View_GlobalDistanceFieldTexture1,View_GlobalDistanceFieldSampler1,View_GlobalDistanceFieldTexture2,View_GlobalDistanceFieldSampler2,View_GlobalDistanceFieldTexture3,View_GlobalDistanceFieldSampler3,View_AtmosphereTransmittanceTexture,View_AtmosphereTransmittanceTextureSampler,View_AtmosphereIrradianceTexture,View_AtmosphereIrradianceTextureSampler,View_AtmosphereInscatterTexture,View_AtmosphereInscatterTextureSampler,View_PerlinNoiseGradientTexture,View_PerlinNoiseGradientTextureSampler,View_PerlinNoise3DTexture,View_PerlinNoise3DTextureSampler,View_SobolSamplingTexture,View_SharedPointWrappedSampler,View_SharedPointClampedSampler,View_SharedBilinearWrappedSampler,View_SharedBilinearClampedSampler,View_SharedTrilinearWrappedSampler,View_SharedTrilinearClampedSampler,View_PreIntegratedBRDF,View_PreIntegratedBRDFSampler,  View_PrimitiveSceneData,  View_PrimitiveSceneDataTexture,  View_LightmapSceneData,  View_TransmittanceLutTexture,View_TransmittanceLutTextureSampler,View_SkyViewLutTexture,View_SkyViewLutTextureSampler,View_DistantSkyLightLutTexture,View_DistantSkyLightLutTextureSampler,View_CameraAerialPerspectiveVolume,View_CameraAerialPerspectiveVolumeSampler,*/
#line 2 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/DrawRectangleParameters.ush"


cbuffer DrawRectangleParameters
{
	float4 DrawRectangleParameters_PosScaleBias;
	float4 DrawRectangleParameters_UVScaleBias;
	float4 DrawRectangleParameters_InvTargetSizeAndTextureSize;
}
/*atic const struct
{
	float4 PosScaleBias;
	float4 UVScaleBias;
	float4 InvTargetSizeAndTextureSize;
} DrawRectangleParameters = {DrawRectangleParameters_PosScaleBias,DrawRectangleParameters_UVScaleBias,DrawRectangleParameters_InvTargetSizeAndTextureSize,*/
#line 3 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/InstancedView.ush"


cbuffer InstancedView
{
	float4x4 InstancedView_TranslatedWorldToClip;
	float4x4 InstancedView_WorldToClip;
	float4x4 InstancedView_ClipToWorld;
	float4x4 InstancedView_TranslatedWorldToView;
	float4x4 InstancedView_ViewToTranslatedWorld;
	float4x4 InstancedView_TranslatedWorldToCameraView;
	float4x4 InstancedView_CameraViewToTranslatedWorld;
	float4x4 InstancedView_ViewToClip;
	float4x4 InstancedView_ViewToClipNoAA;
	float4x4 InstancedView_ClipToView;
	float4x4 InstancedView_ClipToTranslatedWorld;
	float4x4 InstancedView_SVPositionToTranslatedWorld;
	float4x4 InstancedView_ScreenToWorld;
	float4x4 InstancedView_ScreenToTranslatedWorld;
	float4x4 InstancedView_MobileMultiviewShadowTransform;
	float3  InstancedView_ViewForward;
	float  PrePadding_InstancedView_972;
	float3  InstancedView_ViewUp;
	float  PrePadding_InstancedView_988;
	float3  InstancedView_ViewRight;
	float  PrePadding_InstancedView_1004;
	float3  InstancedView_HMDViewNoRollUp;
	float  PrePadding_InstancedView_1020;
	float3  InstancedView_HMDViewNoRollRight;
	float  PrePadding_InstancedView_1036;
	float4 InstancedView_InvDeviceZToWorldZTransform;
	float4  InstancedView_ScreenPositionScaleBias;
	float3 InstancedView_WorldCameraOrigin;
	float PrePadding_InstancedView_1084;
	float3 InstancedView_TranslatedWorldCameraOrigin;
	float PrePadding_InstancedView_1100;
	float3 InstancedView_WorldViewOrigin;
	float PrePadding_InstancedView_1116;
	float3 InstancedView_PreViewTranslation;
	float PrePadding_InstancedView_1132;
	float4x4 InstancedView_PrevProjection;
	float4x4 InstancedView_PrevViewProj;
	float4x4 InstancedView_PrevViewRotationProj;
	float4x4 InstancedView_PrevViewToClip;
	float4x4 InstancedView_PrevClipToView;
	float4x4 InstancedView_PrevTranslatedWorldToClip;
	float4x4 InstancedView_PrevTranslatedWorldToView;
	float4x4 InstancedView_PrevViewToTranslatedWorld;
	float4x4 InstancedView_PrevTranslatedWorldToCameraView;
	float4x4 InstancedView_PrevCameraViewToTranslatedWorld;
	float3 InstancedView_PrevWorldCameraOrigin;
	float PrePadding_InstancedView_1788;
	float3 InstancedView_PrevWorldViewOrigin;
	float PrePadding_InstancedView_1804;
	float3 InstancedView_PrevPreViewTranslation;
	float PrePadding_InstancedView_1820;
	float4x4 InstancedView_PrevInvViewProj;
	float4x4 InstancedView_PrevScreenToTranslatedWorld;
	float4x4 InstancedView_ClipToPrevClip;
	float4 InstancedView_TemporalAAJitter;
	float4 InstancedView_GlobalClippingPlane;
	float2 InstancedView_FieldOfViewWideAngles;
	float2 InstancedView_PrevFieldOfViewWideAngles;
	float4  InstancedView_ViewRectMin;
	float4 InstancedView_ViewSizeAndInvSize;
	float4 InstancedView_BufferSizeAndInvSize;
	float4 InstancedView_BufferBilinearUVMinMax;
	float4 InstancedView_ScreenToViewSpace;
	int InstancedView_NumSceneColorMSAASamples;
	float  InstancedView_PreExposure;
	float  InstancedView_OneOverPreExposure;
	float  PrePadding_InstancedView_2156;
	float4  InstancedView_DiffuseOverrideParameter;
	float4  InstancedView_SpecularOverrideParameter;
	float4  InstancedView_NormalOverrideParameter;
	float2  InstancedView_RoughnessOverrideParameter;
	float InstancedView_PrevFrameGameTime;
	float InstancedView_PrevFrameRealTime;
	float  InstancedView_OutOfBoundsMask;
	float  PrePadding_InstancedView_2228;
	float  PrePadding_InstancedView_2232;
	float  PrePadding_InstancedView_2236;
	float3 InstancedView_WorldCameraMovementSinceLastFrame;
	float InstancedView_CullingSign;
	float  InstancedView_NearPlane;
	float InstancedView_AdaptiveTessellationFactor;
	float InstancedView_GameTime;
	float InstancedView_RealTime;
	float InstancedView_DeltaTime;
	float InstancedView_MaterialTextureMipBias;
	float InstancedView_MaterialTextureDerivativeMultiply;
	uint InstancedView_Random;
	uint InstancedView_FrameNumber;
	uint InstancedView_StateFrameIndexMod8;
	uint InstancedView_StateFrameIndex;
	float  InstancedView_CameraCut;
	float  InstancedView_UnlitViewmodeMask;
	float  PrePadding_InstancedView_2308;
	float  PrePadding_InstancedView_2312;
	float  PrePadding_InstancedView_2316;
	float4  InstancedView_DirectionalLightColor;
	float3  InstancedView_DirectionalLightDirection;
	float  PrePadding_InstancedView_2348;
	float4 InstancedView_TranslucencyLightingVolumeMin[2];
	float4 InstancedView_TranslucencyLightingVolumeInvSize[2];
	float4 InstancedView_TemporalAAParams;
	float4 InstancedView_CircleDOFParams;
	float InstancedView_DepthOfFieldSensorWidth;
	float InstancedView_DepthOfFieldFocalDistance;
	float InstancedView_DepthOfFieldScale;
	float InstancedView_DepthOfFieldFocalLength;
	float InstancedView_DepthOfFieldFocalRegion;
	float InstancedView_DepthOfFieldNearTransitionRegion;
	float InstancedView_DepthOfFieldFarTransitionRegion;
	float InstancedView_MotionBlurNormalizedToPixel;
	float InstancedView_bSubsurfacePostprocessEnabled;
	float InstancedView_GeneralPurposeTweak;
	float  InstancedView_DemosaicVposOffset;
	float  PrePadding_InstancedView_2492;
	float3 InstancedView_IndirectLightingColorScale;
	float  InstancedView_HDR32bppEncodingMode;
	float  InstancedView_AtmosphericFogSunPower;
	float  InstancedView_AtmosphericFogPower;
	float  InstancedView_AtmosphericFogDensityScale;
	float  InstancedView_AtmosphericFogDensityOffset;
	float  InstancedView_AtmosphericFogGroundOffset;
	float  InstancedView_AtmosphericFogDistanceScale;
	float  InstancedView_AtmosphericFogAltitudeScale;
	float  InstancedView_AtmosphericFogHeightScaleRayleigh;
	float  InstancedView_AtmosphericFogStartDistance;
	float  InstancedView_AtmosphericFogDistanceOffset;
	float  InstancedView_AtmosphericFogSunDiscScale;
	float  PrePadding_InstancedView_2556;
	float4 InstancedView_AtmosphereLightDirection[2];
	float4 InstancedView_AtmosphereLightColor[2];
	float4 InstancedView_AtmosphereLightColorGlobalPostTransmittance[2];
	float4 InstancedView_AtmosphereLightDiscLuminance[2];
	float4 InstancedView_AtmosphereLightDiscCosHalfApexAngle[2];
	float4 InstancedView_SkyViewLutSizeAndInvSize;
	float3 InstancedView_SkyWorldCameraOrigin;
	float PrePadding_InstancedView_2748;
	float4 InstancedView_SkyAtmosphereSkyLuminanceFactor;
	float InstancedView_SkyAtmosphereHeightFogContribution;
	float InstancedView_SkyAtmosphereBottomRadius;
	float InstancedView_SkyAtmosphereTopRadius;
	float InstancedView_SkyAtmosphereAerialPerspectiveStartDepth;
	float InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLength;
	float InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthInv;
	float InstancedView_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	uint InstancedView_AtmosphericFogRenderMask;
	uint InstancedView_AtmosphericFogInscatterAltitudeSampleNum;
	uint PrePadding_InstancedView_2812;
	float3 InstancedView_NormalCurvatureToRoughnessScaleBias;
	float InstancedView_RenderingReflectionCaptureMask;
	float4 InstancedView_AmbientCubemapTint;
	float InstancedView_AmbientCubemapIntensity;
	float InstancedView_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float InstancedView_SkyLightAffectReflectionFlag;
	float InstancedView_SkyLightAffectGlobalIlluminationFlag;
	float4 InstancedView_SkyLightColor;
	float4 InstancedView_SkyIrradianceEnvironmentMap[7];
	float InstancedView_MobilePreviewMode;
	float InstancedView_HMDEyePaddingOffset;
	float  InstancedView_ReflectionCubemapMaxMip;
	float InstancedView_ShowDecalsMask;
	uint InstancedView_DistanceFieldAOSpecularOcclusionMode;
	float InstancedView_IndirectCapsuleSelfShadowingIntensity;
	float PrePadding_InstancedView_3016;
	float PrePadding_InstancedView_3020;
	float3 InstancedView_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int InstancedView_StereoPassIndex;
	float4 InstancedView_GlobalVolumeCenterAndExtent[4];
	float4 InstancedView_GlobalVolumeWorldToUVAddAndMul[4];
	float InstancedView_GlobalVolumeDimension;
	float InstancedView_GlobalVolumeTexelSize;
	float InstancedView_MaxGlobalDistance;
	float PrePadding_InstancedView_3180;
	int2 InstancedView_CursorPosition;
	float InstancedView_bCheckerboardSubsurfaceProfileRendering;
	float PrePadding_InstancedView_3196;
	float3 InstancedView_VolumetricFogInvGridSize;
	float PrePadding_InstancedView_3212;
	float3 InstancedView_VolumetricFogGridZParams;
	float PrePadding_InstancedView_3228;
	float2 InstancedView_VolumetricFogSVPosToVolumeUV;
	float InstancedView_VolumetricFogMaxDistance;
	float PrePadding_InstancedView_3244;
	float3 InstancedView_VolumetricLightmapWorldToUVScale;
	float PrePadding_InstancedView_3260;
	float3 InstancedView_VolumetricLightmapWorldToUVAdd;
	float PrePadding_InstancedView_3276;
	float3 InstancedView_VolumetricLightmapIndirectionTextureSize;
	float InstancedView_VolumetricLightmapBrickSize;
	float3 InstancedView_VolumetricLightmapBrickTexelSize;
	float InstancedView_StereoIPD;
	float InstancedView_IndirectLightingCacheShowFlag;
	float InstancedView_EyeToPixelSpreadAngle;
	float PrePadding_InstancedView_3320;
	float PrePadding_InstancedView_3324;
	float4x4 InstancedView_WorldToVirtualTexture;
	float4 InstancedView_VirtualTextureParams;
	float4 InstancedView_XRPassthroughCameraUVs[2];
	int InstancedView_FarShadowStaticMeshLODBias;
	float InstancedView_MinRoughness;
	float InstancedView_ConstantWaterDepth;
	float PrePadding_InstancedView_3452;
	float4 InstancedView_HairRenderInfo;
}
/*atic const struct
{
	float4x4 TranslatedWorldToClip;
	float4x4 WorldToClip;
	float4x4 ClipToWorld;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToWorld;
	float4x4 ScreenToTranslatedWorld;
	float4x4 MobileMultiviewShadowTransform;
	float3  ViewForward;
	float3  ViewUp;
	float3  ViewRight;
	float3  HMDViewNoRollUp;
	float3  HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	float4  ScreenPositionScaleBias;
	float3 WorldCameraOrigin;
	float3 TranslatedWorldCameraOrigin;
	float3 WorldViewOrigin;
	float3 PreViewTranslation;
	float4x4 PrevProjection;
	float4x4 PrevViewProj;
	float4x4 PrevViewRotationProj;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevWorldCameraOrigin;
	float3 PrevWorldViewOrigin;
	float3 PrevPreViewTranslation;
	float4x4 PrevInvViewProj;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	float4  ViewRectMin;
	float4 ViewSizeAndInvSize;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	float4 ScreenToViewSpace;
	int NumSceneColorMSAASamples;
	float  PreExposure;
	float  OneOverPreExposure;
	float4  DiffuseOverrideParameter;
	float4  SpecularOverrideParameter;
	float4  NormalOverrideParameter;
	float2  RoughnessOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	float  OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	float  NearPlane;
	float AdaptiveTessellationFactor;
	float GameTime;
	float RealTime;
	float DeltaTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint StateFrameIndexMod8;
	uint StateFrameIndex;
	float  CameraCut;
	float  UnlitViewmodeMask;
	float4  DirectionalLightColor;
	float3  DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float bSubsurfacePostprocessEnabled;
	float GeneralPurposeTweak;
	float  DemosaicVposOffset;
	float3 IndirectLightingColorScale;
	float  HDR32bppEncodingMode;
	float  AtmosphericFogSunPower;
	float  AtmosphericFogPower;
	float  AtmosphericFogDensityScale;
	float  AtmosphericFogDensityOffset;
	float  AtmosphericFogGroundOffset;
	float  AtmosphericFogDistanceScale;
	float  AtmosphericFogAltitudeScale;
	float  AtmosphericFogHeightScaleRayleigh;
	float  AtmosphericFogStartDistance;
	float  AtmosphericFogDistanceOffset;
	float  AtmosphericFogSunDiscScale;
	float4 AtmosphereLightDirection[2];
	float4 AtmosphereLightColor[2];
	float4 AtmosphereLightColorGlobalPostTransmittance[2];
	float4 AtmosphereLightDiscLuminance[2];
	float4 AtmosphereLightDiscCosHalfApexAngle[2];
	float4 SkyViewLutSizeAndInvSize;
	float3 SkyWorldCameraOrigin;
	float4 SkyAtmosphereSkyLuminanceFactor;
	float SkyAtmosphereHeightFogContribution;
	float SkyAtmosphereBottomRadius;
	float SkyAtmosphereTopRadius;
	float SkyAtmosphereAerialPerspectiveStartDepth;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLength;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthInv;
	float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	uint AtmosphericFogRenderMask;
	uint AtmosphericFogInscatterAltitudeSampleNum;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float SkyLightAffectReflectionFlag;
	float SkyLightAffectGlobalIlluminationFlag;
	float4 SkyLightColor;
	float4 SkyIrradianceEnvironmentMap[7];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	float  ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeCenterAndExtent[4];
	float4 GlobalVolumeWorldToUVAddAndMul[4];
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDistance;
	int2 CursorPosition;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float StereoIPD;
	float IndirectLightingCacheShowFlag;
	float EyeToPixelSpreadAngle;
	float4x4 WorldToVirtualTexture;
	float4 VirtualTextureParams;
	float4 XRPassthroughCameraUVs[2];
	int FarShadowStaticMeshLODBias;
	float MinRoughness;
	float ConstantWaterDepth;
	float4 HairRenderInfo;
} InstancedView = {InstancedView_TranslatedWorldToClip,InstancedView_WorldToClip,InstancedView_ClipToWorld,InstancedView_TranslatedWorldToView,InstancedView_ViewToTranslatedWorld,InstancedView_TranslatedWorldToCameraView,InstancedView_CameraViewToTranslatedWorld,InstancedView_ViewToClip,InstancedView_ViewToClipNoAA,InstancedView_ClipToView,InstancedView_ClipToTranslatedWorld,InstancedView_SVPositionToTranslatedWorld,InstancedView_ScreenToWorld,InstancedView_ScreenToTranslatedWorld,InstancedView_MobileMultiviewShadowTransform,InstancedView_ViewForward,InstancedView_ViewUp,InstancedView_ViewRight,InstancedView_HMDViewNoRollUp,InstancedView_HMDViewNoRollRight,InstancedView_InvDeviceZToWorldZTransform,InstancedView_ScreenPositionScaleBias,InstancedView_WorldCameraOrigin,InstancedView_TranslatedWorldCameraOrigin,InstancedView_WorldViewOrigin,InstancedView_PreViewTranslation,InstancedView_PrevProjection,InstancedView_PrevViewProj,InstancedView_PrevViewRotationProj,InstancedView_PrevViewToClip,InstancedView_PrevClipToView,InstancedView_PrevTranslatedWorldToClip,InstancedView_PrevTranslatedWorldToView,InstancedView_PrevViewToTranslatedWorld,InstancedView_PrevTranslatedWorldToCameraView,InstancedView_PrevCameraViewToTranslatedWorld,InstancedView_PrevWorldCameraOrigin,InstancedView_PrevWorldViewOrigin,InstancedView_PrevPreViewTranslation,InstancedView_PrevInvViewProj,InstancedView_PrevScreenToTranslatedWorld,InstancedView_ClipToPrevClip,InstancedView_TemporalAAJitter,InstancedView_GlobalClippingPlane,InstancedView_FieldOfViewWideAngles,InstancedView_PrevFieldOfViewWideAngles,InstancedView_ViewRectMin,InstancedView_ViewSizeAndInvSize,InstancedView_BufferSizeAndInvSize,InstancedView_BufferBilinearUVMinMax,InstancedView_ScreenToViewSpace,InstancedView_NumSceneColorMSAASamples,InstancedView_PreExposure,InstancedView_OneOverPreExposure,InstancedView_DiffuseOverrideParameter,InstancedView_SpecularOverrideParameter,InstancedView_NormalOverrideParameter,InstancedView_RoughnessOverrideParameter,InstancedView_PrevFrameGameTime,InstancedView_PrevFrameRealTime,InstancedView_OutOfBoundsMask,InstancedView_WorldCameraMovementSinceLastFrame,InstancedView_CullingSign,InstancedView_NearPlane,InstancedView_AdaptiveTessellationFactor,InstancedView_GameTime,InstancedView_RealTime,InstancedView_DeltaTime,InstancedView_MaterialTextureMipBias,InstancedView_MaterialTextureDerivativeMultiply,InstancedView_Random,InstancedView_FrameNumber,InstancedView_StateFrameIndexMod8,InstancedView_StateFrameIndex,InstancedView_CameraCut,InstancedView_UnlitViewmodeMask,InstancedView_DirectionalLightColor,InstancedView_DirectionalLightDirection,InstancedView_TranslucencyLightingVolumeMin,InstancedView_TranslucencyLightingVolumeInvSize,InstancedView_TemporalAAParams,InstancedView_CircleDOFParams,InstancedView_DepthOfFieldSensorWidth,InstancedView_DepthOfFieldFocalDistance,InstancedView_DepthOfFieldScale,InstancedView_DepthOfFieldFocalLength,InstancedView_DepthOfFieldFocalRegion,InstancedView_DepthOfFieldNearTransitionRegion,InstancedView_DepthOfFieldFarTransitionRegion,InstancedView_MotionBlurNormalizedToPixel,InstancedView_bSubsurfacePostprocessEnabled,InstancedView_GeneralPurposeTweak,InstancedView_DemosaicVposOffset,InstancedView_IndirectLightingColorScale,InstancedView_HDR32bppEncodingMode,InstancedView_AtmosphericFogSunPower,InstancedView_AtmosphericFogPower,InstancedView_AtmosphericFogDensityScale,InstancedView_AtmosphericFogDensityOffset,InstancedView_AtmosphericFogGroundOffset,InstancedView_AtmosphericFogDistanceScale,InstancedView_AtmosphericFogAltitudeScale,InstancedView_AtmosphericFogHeightScaleRayleigh,InstancedView_AtmosphericFogStartDistance,InstancedView_AtmosphericFogDistanceOffset,InstancedView_AtmosphericFogSunDiscScale,InstancedView_AtmosphereLightDirection,InstancedView_AtmosphereLightColor,InstancedView_AtmosphereLightColorGlobalPostTransmittance,InstancedView_AtmosphereLightDiscLuminance,InstancedView_AtmosphereLightDiscCosHalfApexAngle,InstancedView_SkyViewLutSizeAndInvSize,InstancedView_SkyWorldCameraOrigin,InstancedView_SkyAtmosphereSkyLuminanceFactor,InstancedView_SkyAtmosphereHeightFogContribution,InstancedView_SkyAtmosphereBottomRadius,InstancedView_SkyAtmosphereTopRadius,InstancedView_SkyAtmosphereAerialPerspectiveStartDepth,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLength,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthInv,InstancedView_SkyAtmosphereApplyCameraAerialPerspectiveVolume,InstancedView_AtmosphericFogRenderMask,InstancedView_AtmosphericFogInscatterAltitudeSampleNum,InstancedView_NormalCurvatureToRoughnessScaleBias,InstancedView_RenderingReflectionCaptureMask,InstancedView_AmbientCubemapTint,InstancedView_AmbientCubemapIntensity,InstancedView_SkyLightApplyPrecomputedBentNormalShadowingFlag,InstancedView_SkyLightAffectReflectionFlag,InstancedView_SkyLightAffectGlobalIlluminationFlag,InstancedView_SkyLightColor,InstancedView_SkyIrradianceEnvironmentMap,InstancedView_MobilePreviewMode,InstancedView_HMDEyePaddingOffset,InstancedView_ReflectionCubemapMaxMip,InstancedView_ShowDecalsMask,InstancedView_DistanceFieldAOSpecularOcclusionMode,InstancedView_IndirectCapsuleSelfShadowingIntensity,InstancedView_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight,InstancedView_StereoPassIndex,InstancedView_GlobalVolumeCenterAndExtent,InstancedView_GlobalVolumeWorldToUVAddAndMul,InstancedView_GlobalVolumeDimension,InstancedView_GlobalVolumeTexelSize,InstancedView_MaxGlobalDistance,InstancedView_CursorPosition,InstancedView_bCheckerboardSubsurfaceProfileRendering,InstancedView_VolumetricFogInvGridSize,InstancedView_VolumetricFogGridZParams,InstancedView_VolumetricFogSVPosToVolumeUV,InstancedView_VolumetricFogMaxDistance,InstancedView_VolumetricLightmapWorldToUVScale,InstancedView_VolumetricLightmapWorldToUVAdd,InstancedView_VolumetricLightmapIndirectionTextureSize,InstancedView_VolumetricLightmapBrickSize,InstancedView_VolumetricLightmapBrickTexelSize,InstancedView_StereoIPD,InstancedView_IndirectLightingCacheShowFlag,InstancedView_EyeToPixelSpreadAngle,InstancedView_WorldToVirtualTexture,InstancedView_VirtualTextureParams,InstancedView_XRPassthroughCameraUVs,InstancedView_FarShadowStaticMeshLODBias,InstancedView_MinRoughness,InstancedView_ConstantWaterDepth,InstancedView_HairRenderInfo,*/
#line 4 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/MobileSceneTextures.ush"


cbuffer MobileSceneTextures
{
}
Texture2D MobileSceneTextures_SceneColorTexture;
SamplerState MobileSceneTextures_SceneColorTextureSampler;
Texture2D MobileSceneTextures_SceneDepthTexture;
SamplerState MobileSceneTextures_SceneDepthTextureSampler;
Texture2D MobileSceneTextures_SceneAlphaCopyTexture;
SamplerState MobileSceneTextures_SceneAlphaCopyTextureSampler;
Texture2D MobileSceneTextures_CustomDepthTexture;
SamplerState MobileSceneTextures_CustomDepthTextureSampler;
Texture2D MobileSceneTextures_MobileCustomStencilTexture;
SamplerState MobileSceneTextures_MobileCustomStencilTextureSampler;
/*atic const struct
{
	Texture2D SceneColorTexture;
	SamplerState SceneColorTextureSampler;
	Texture2D SceneDepthTexture;
	SamplerState SceneDepthTextureSampler;
	Texture2D SceneAlphaCopyTexture;
	SamplerState SceneAlphaCopyTextureSampler;
	Texture2D CustomDepthTexture;
	SamplerState CustomDepthTextureSampler;
	Texture2D MobileCustomStencilTexture;
	SamplerState MobileCustomStencilTextureSampler;
} MobileSceneTextures = {MobileSceneTextures_SceneColorTexture,MobileSceneTextures_SceneColorTextureSampler,MobileSceneTextures_SceneDepthTexture,MobileSceneTextures_SceneDepthTextureSampler,MobileSceneTextures_SceneAlphaCopyTexture,MobileSceneTextures_SceneAlphaCopyTextureSampler,MobileSceneTextures_CustomDepthTexture,MobileSceneTextures_CustomDepthTextureSampler,MobileSceneTextures_MobileCustomStencilTexture,MobileSceneTextures_MobileCustomStencilTextureSampler,*/
#line 5 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/SceneTexturesStruct.ush"


cbuffer SceneTexturesStruct
{
}
Texture2D SceneTexturesStruct_SceneColorTexture;
SamplerState SceneTexturesStruct_SceneColorTextureSampler;
Texture2D SceneTexturesStruct_SceneDepthTexture;
SamplerState SceneTexturesStruct_SceneDepthTextureSampler;
Texture2D<float> SceneTexturesStruct_SceneDepthTextureNonMS;
Texture2D SceneTexturesStruct_GBufferATexture;
Texture2D SceneTexturesStruct_GBufferBTexture;
Texture2D SceneTexturesStruct_GBufferCTexture;
Texture2D SceneTexturesStruct_GBufferDTexture;
Texture2D SceneTexturesStruct_GBufferETexture;
Texture2D SceneTexturesStruct_GBufferVelocityTexture;
Texture2D<float4> SceneTexturesStruct_GBufferATextureNonMS;
Texture2D<float4> SceneTexturesStruct_GBufferBTextureNonMS;
Texture2D<float4> SceneTexturesStruct_GBufferCTextureNonMS;
Texture2D<float4> SceneTexturesStruct_GBufferDTextureNonMS;
Texture2D<float4> SceneTexturesStruct_GBufferETextureNonMS;
Texture2D<float4> SceneTexturesStruct_GBufferVelocityTextureNonMS;
SamplerState SceneTexturesStruct_GBufferATextureSampler;
SamplerState SceneTexturesStruct_GBufferBTextureSampler;
SamplerState SceneTexturesStruct_GBufferCTextureSampler;
SamplerState SceneTexturesStruct_GBufferDTextureSampler;
SamplerState SceneTexturesStruct_GBufferETextureSampler;
SamplerState SceneTexturesStruct_GBufferVelocityTextureSampler;
Texture2D SceneTexturesStruct_ScreenSpaceAOTexture;
SamplerState SceneTexturesStruct_ScreenSpaceAOTextureSampler;
Texture2D<float> SceneTexturesStruct_CustomDepthTextureNonMS;
Texture2D SceneTexturesStruct_CustomDepthTexture;
SamplerState SceneTexturesStruct_CustomDepthTextureSampler;
Texture2D<uint2> SceneTexturesStruct_CustomStencilTexture;
Texture2D<uint2> SceneTexturesStruct_SceneStencilTexture;
Texture2D SceneTexturesStruct_EyeAdaptation;
Texture2D SceneTexturesStruct_SceneColorCopyTexture;
SamplerState SceneTexturesStruct_SceneColorCopyTextureSampler;
/*atic const struct
{
	Texture2D SceneColorTexture;
	SamplerState SceneColorTextureSampler;
	Texture2D SceneDepthTexture;
	SamplerState SceneDepthTextureSampler;
	Texture2D<float> SceneDepthTextureNonMS;
	Texture2D GBufferATexture;
	Texture2D GBufferBTexture;
	Texture2D GBufferCTexture;
	Texture2D GBufferDTexture;
	Texture2D GBufferETexture;
	Texture2D GBufferVelocityTexture;
	Texture2D<float4> GBufferATextureNonMS;
	Texture2D<float4> GBufferBTextureNonMS;
	Texture2D<float4> GBufferCTextureNonMS;
	Texture2D<float4> GBufferDTextureNonMS;
	Texture2D<float4> GBufferETextureNonMS;
	Texture2D<float4> GBufferVelocityTextureNonMS;
	SamplerState GBufferATextureSampler;
	SamplerState GBufferBTextureSampler;
	SamplerState GBufferCTextureSampler;
	SamplerState GBufferDTextureSampler;
	SamplerState GBufferETextureSampler;
	SamplerState GBufferVelocityTextureSampler;
	Texture2D ScreenSpaceAOTexture;
	SamplerState ScreenSpaceAOTextureSampler;
	Texture2D<float> CustomDepthTextureNonMS;
	Texture2D CustomDepthTexture;
	SamplerState CustomDepthTextureSampler;
	Texture2D<uint2> CustomStencilTexture;
	Texture2D<uint2> SceneStencilTexture;
	Texture2D EyeAdaptation;
	Texture2D SceneColorCopyTexture;
	SamplerState SceneColorCopyTextureSampler;
} SceneTexturesStruct = {SceneTexturesStruct_SceneColorTexture,SceneTexturesStruct_SceneColorTextureSampler,SceneTexturesStruct_SceneDepthTexture,SceneTexturesStruct_SceneDepthTextureSampler,SceneTexturesStruct_SceneDepthTextureNonMS,SceneTexturesStruct_GBufferATexture,SceneTexturesStruct_GBufferBTexture,SceneTexturesStruct_GBufferCTexture,SceneTexturesStruct_GBufferDTexture,SceneTexturesStruct_GBufferETexture,SceneTexturesStruct_GBufferVelocityTexture,SceneTexturesStruct_GBufferATextureNonMS,SceneTexturesStruct_GBufferBTextureNonMS,SceneTexturesStruct_GBufferCTextureNonMS,SceneTexturesStruct_GBufferDTextureNonMS,SceneTexturesStruct_GBufferETextureNonMS,SceneTexturesStruct_GBufferVelocityTextureNonMS,SceneTexturesStruct_GBufferATextureSampler,SceneTexturesStruct_GBufferBTextureSampler,SceneTexturesStruct_GBufferCTextureSampler,SceneTexturesStruct_GBufferDTextureSampler,SceneTexturesStruct_GBufferETextureSampler,SceneTexturesStruct_GBufferVelocityTextureSampler,SceneTexturesStruct_ScreenSpaceAOTexture,SceneTexturesStruct_ScreenSpaceAOTextureSampler,SceneTexturesStruct_CustomDepthTextureNonMS,SceneTexturesStruct_CustomDepthTexture,SceneTexturesStruct_CustomDepthTextureSampler,  SceneTexturesStruct_CustomStencilTexture,   SceneTexturesStruct_SceneStencilTexture,  SceneTexturesStruct_EyeAdaptation,SceneTexturesStruct_SceneColorCopyTexture,SceneTexturesStruct_SceneColorCopyTextureSampler,*/
#line 6 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/View.ush"
#line 7 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/DrawRectangleParameters.ush"
#line 8 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/InstancedView.ush"
#line 9 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/MobileSceneTextures.ush"
#line 10 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/SceneTexturesStruct.ush"
#line 11 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 62 "/Engine/Private/Common.ush"
#line 64 "/Engine/Private/Common.ush"
#line 1 "CommonViewUniformBuffer.ush"
#line 12 "/Engine/Private/CommonViewUniformBuffer.ush"
float2 GetTanHalfFieldOfView()
{
	return float2(View_ClipToView[0][0], View_ClipToView[1][1]);
}

float2 GetPrevTanHalfFieldOfView()
{
	return float2(View_PrevClipToView[0][0], View_PrevClipToView[1][1]);
}



float2 GetCotanHalfFieldOfView()
{
	return float2(View_ViewToClip[0][0], View_ViewToClip[1][1]);
}



float2 GetPrevCotanHalfFieldOfView()
{
	return float2(View_PrevViewToClip[0][0], View_PrevViewToClip[1][1]);
}


uint GetPowerOfTwoModulatedFrameIndex(uint Pow2Modulus)
{

	return View_StateFrameIndex & uint(Pow2Modulus - 1);
}
#line 65 "/Engine/Private/Common.ush"
#line 66 "/Engine/Private/Common.ush"
#line 1 "InstancedStereo.ush"
#line 10 "/Engine/Private/InstancedStereo.ush"
#line 1 "/Engine/Generated/UniformBuffers/View.ush"
#line 11 "/Engine/Private/InstancedStereo.ush"
#line 1 "/Engine/Generated/UniformBuffers/InstancedView.ush"
#line 12 "/Engine/Private/InstancedStereo.ush"
#line 15 "/Engine/Private/InstancedStereo.ush"
#line 1 "/Engine/Generated/GeneratedInstancedStereo.ush"
struct ViewState
{
	float4x4 TranslatedWorldToClip;
	float4x4 WorldToClip;
	float4x4 ClipToWorld;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToWorld;
	float4x4 ScreenToTranslatedWorld;
	float4x4 MobileMultiviewShadowTransform;
	float3  ViewForward;
	float3  ViewUp;
	float3  ViewRight;
	float3  HMDViewNoRollUp;
	float3  HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	float4  ScreenPositionScaleBias;
	float3 WorldCameraOrigin;
	float3 TranslatedWorldCameraOrigin;
	float3 WorldViewOrigin;
	float3 PreViewTranslation;
	float4x4 PrevProjection;
	float4x4 PrevViewProj;
	float4x4 PrevViewRotationProj;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevWorldCameraOrigin;
	float3 PrevWorldViewOrigin;
	float3 PrevPreViewTranslation;
	float4x4 PrevInvViewProj;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	float4  ViewRectMin;
	float4 ViewSizeAndInvSize;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	float4 ScreenToViewSpace;
	int NumSceneColorMSAASamples;
	float  PreExposure;
	float  OneOverPreExposure;
	float4  DiffuseOverrideParameter;
	float4  SpecularOverrideParameter;
	float4  NormalOverrideParameter;
	float2  RoughnessOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	float  OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	float  NearPlane;
	float AdaptiveTessellationFactor;
	float GameTime;
	float RealTime;
	float DeltaTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint StateFrameIndexMod8;
	uint StateFrameIndex;
	float  CameraCut;
	float  UnlitViewmodeMask;
	float4  DirectionalLightColor;
	float3  DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float bSubsurfacePostprocessEnabled;
	float GeneralPurposeTweak;
	float  DemosaicVposOffset;
	float3 IndirectLightingColorScale;
	float  HDR32bppEncodingMode;
	float  AtmosphericFogSunPower;
	float  AtmosphericFogPower;
	float  AtmosphericFogDensityScale;
	float  AtmosphericFogDensityOffset;
	float  AtmosphericFogGroundOffset;
	float  AtmosphericFogDistanceScale;
	float  AtmosphericFogAltitudeScale;
	float  AtmosphericFogHeightScaleRayleigh;
	float  AtmosphericFogStartDistance;
	float  AtmosphericFogDistanceOffset;
	float  AtmosphericFogSunDiscScale;
	float4 AtmosphereLightDirection[2];
	float4 AtmosphereLightColor[2];
	float4 AtmosphereLightColorGlobalPostTransmittance[2];
	float4 AtmosphereLightDiscLuminance[2];
	float4 AtmosphereLightDiscCosHalfApexAngle[2];
	float4 SkyViewLutSizeAndInvSize;
	float3 SkyWorldCameraOrigin;
	float4 SkyAtmosphereSkyLuminanceFactor;
	float SkyAtmosphereHeightFogContribution;
	float SkyAtmosphereBottomRadius;
	float SkyAtmosphereTopRadius;
	float SkyAtmosphereAerialPerspectiveStartDepth;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLength;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthInv;
	float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	uint AtmosphericFogRenderMask;
	uint AtmosphericFogInscatterAltitudeSampleNum;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float SkyLightAffectReflectionFlag;
	float SkyLightAffectGlobalIlluminationFlag;
	float4 SkyLightColor;
	float4 SkyIrradianceEnvironmentMap[7];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	float  ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeCenterAndExtent[4];
	float4 GlobalVolumeWorldToUVAddAndMul[4];
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDistance;
	int2 CursorPosition;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float StereoIPD;
	float IndirectLightingCacheShowFlag;
	float EyeToPixelSpreadAngle;
	float4x4 WorldToVirtualTexture;
	float4 VirtualTextureParams;
	float4 XRPassthroughCameraUVs[2];
	int FarShadowStaticMeshLODBias;
	float MinRoughness;
	float ConstantWaterDepth;
	float4 HairRenderInfo;
};
ViewState GetPrimaryView()
{
	ViewState Result;
	Result.TranslatedWorldToClip = View_TranslatedWorldToClip;
	Result.WorldToClip = View_WorldToClip;
	Result.ClipToWorld = View_ClipToWorld;
	Result.TranslatedWorldToView = View_TranslatedWorldToView;
	Result.ViewToTranslatedWorld = View_ViewToTranslatedWorld;
	Result.TranslatedWorldToCameraView = View_TranslatedWorldToCameraView;
	Result.CameraViewToTranslatedWorld = View_CameraViewToTranslatedWorld;
	Result.ViewToClip = View_ViewToClip;
	Result.ViewToClipNoAA = View_ViewToClipNoAA;
	Result.ClipToView = View_ClipToView;
	Result.ClipToTranslatedWorld = View_ClipToTranslatedWorld;
	Result.SVPositionToTranslatedWorld = View_SVPositionToTranslatedWorld;
	Result.ScreenToWorld = View_ScreenToWorld;
	Result.ScreenToTranslatedWorld = View_ScreenToTranslatedWorld;
	Result.MobileMultiviewShadowTransform = View_MobileMultiviewShadowTransform;
	Result.ViewForward = View_ViewForward;
	Result.ViewUp = View_ViewUp;
	Result.ViewRight = View_ViewRight;
	Result.HMDViewNoRollUp = View_HMDViewNoRollUp;
	Result.HMDViewNoRollRight = View_HMDViewNoRollRight;
	Result.InvDeviceZToWorldZTransform = View_InvDeviceZToWorldZTransform;
	Result.ScreenPositionScaleBias = View_ScreenPositionScaleBias;
	Result.WorldCameraOrigin = View_WorldCameraOrigin;
	Result.TranslatedWorldCameraOrigin = View_TranslatedWorldCameraOrigin;
	Result.WorldViewOrigin = View_WorldViewOrigin;
	Result.PreViewTranslation = View_PreViewTranslation;
	Result.PrevProjection = View_PrevProjection;
	Result.PrevViewProj = View_PrevViewProj;
	Result.PrevViewRotationProj = View_PrevViewRotationProj;
	Result.PrevViewToClip = View_PrevViewToClip;
	Result.PrevClipToView = View_PrevClipToView;
	Result.PrevTranslatedWorldToClip = View_PrevTranslatedWorldToClip;
	Result.PrevTranslatedWorldToView = View_PrevTranslatedWorldToView;
	Result.PrevViewToTranslatedWorld = View_PrevViewToTranslatedWorld;
	Result.PrevTranslatedWorldToCameraView = View_PrevTranslatedWorldToCameraView;
	Result.PrevCameraViewToTranslatedWorld = View_PrevCameraViewToTranslatedWorld;
	Result.PrevWorldCameraOrigin = View_PrevWorldCameraOrigin;
	Result.PrevWorldViewOrigin = View_PrevWorldViewOrigin;
	Result.PrevPreViewTranslation = View_PrevPreViewTranslation;
	Result.PrevInvViewProj = View_PrevInvViewProj;
	Result.PrevScreenToTranslatedWorld = View_PrevScreenToTranslatedWorld;
	Result.ClipToPrevClip = View_ClipToPrevClip;
	Result.TemporalAAJitter = View_TemporalAAJitter;
	Result.GlobalClippingPlane = View_GlobalClippingPlane;
	Result.FieldOfViewWideAngles = View_FieldOfViewWideAngles;
	Result.PrevFieldOfViewWideAngles = View_PrevFieldOfViewWideAngles;
	Result.ViewRectMin = View_ViewRectMin;
	Result.ViewSizeAndInvSize = View_ViewSizeAndInvSize;
	Result.BufferSizeAndInvSize = View_BufferSizeAndInvSize;
	Result.BufferBilinearUVMinMax = View_BufferBilinearUVMinMax;
	Result.ScreenToViewSpace = View_ScreenToViewSpace;
	Result.NumSceneColorMSAASamples = View_NumSceneColorMSAASamples;
	Result.PreExposure = View_PreExposure;
	Result.OneOverPreExposure = View_OneOverPreExposure;
	Result.DiffuseOverrideParameter = View_DiffuseOverrideParameter;
	Result.SpecularOverrideParameter = View_SpecularOverrideParameter;
	Result.NormalOverrideParameter = View_NormalOverrideParameter;
	Result.RoughnessOverrideParameter = View_RoughnessOverrideParameter;
	Result.PrevFrameGameTime = View_PrevFrameGameTime;
	Result.PrevFrameRealTime = View_PrevFrameRealTime;
	Result.OutOfBoundsMask = View_OutOfBoundsMask;
	Result.WorldCameraMovementSinceLastFrame = View_WorldCameraMovementSinceLastFrame;
	Result.CullingSign = View_CullingSign;
	Result.NearPlane = View_NearPlane;
	Result.AdaptiveTessellationFactor = View_AdaptiveTessellationFactor;
	Result.GameTime = View_GameTime;
	Result.RealTime = View_RealTime;
	Result.DeltaTime = View_DeltaTime;
	Result.MaterialTextureMipBias = View_MaterialTextureMipBias;
	Result.MaterialTextureDerivativeMultiply = View_MaterialTextureDerivativeMultiply;
	Result.Random = View_Random;
	Result.FrameNumber = View_FrameNumber;
	Result.StateFrameIndexMod8 = View_StateFrameIndexMod8;
	Result.StateFrameIndex = View_StateFrameIndex;
	Result.CameraCut = View_CameraCut;
	Result.UnlitViewmodeMask = View_UnlitViewmodeMask;
	Result.DirectionalLightColor = View_DirectionalLightColor;
	Result.DirectionalLightDirection = View_DirectionalLightDirection;
	Result.TranslucencyLightingVolumeMin = View_TranslucencyLightingVolumeMin;
	Result.TranslucencyLightingVolumeInvSize = View_TranslucencyLightingVolumeInvSize;
	Result.TemporalAAParams = View_TemporalAAParams;
	Result.CircleDOFParams = View_CircleDOFParams;
	Result.DepthOfFieldSensorWidth = View_DepthOfFieldSensorWidth;
	Result.DepthOfFieldFocalDistance = View_DepthOfFieldFocalDistance;
	Result.DepthOfFieldScale = View_DepthOfFieldScale;
	Result.DepthOfFieldFocalLength = View_DepthOfFieldFocalLength;
	Result.DepthOfFieldFocalRegion = View_DepthOfFieldFocalRegion;
	Result.DepthOfFieldNearTransitionRegion = View_DepthOfFieldNearTransitionRegion;
	Result.DepthOfFieldFarTransitionRegion = View_DepthOfFieldFarTransitionRegion;
	Result.MotionBlurNormalizedToPixel = View_MotionBlurNormalizedToPixel;
	Result.bSubsurfacePostprocessEnabled = View_bSubsurfacePostprocessEnabled;
	Result.GeneralPurposeTweak = View_GeneralPurposeTweak;
	Result.DemosaicVposOffset = View_DemosaicVposOffset;
	Result.IndirectLightingColorScale = View_IndirectLightingColorScale;
	Result.HDR32bppEncodingMode = View_HDR32bppEncodingMode;
	Result.AtmosphericFogSunPower = View_AtmosphericFogSunPower;
	Result.AtmosphericFogPower = View_AtmosphericFogPower;
	Result.AtmosphericFogDensityScale = View_AtmosphericFogDensityScale;
	Result.AtmosphericFogDensityOffset = View_AtmosphericFogDensityOffset;
	Result.AtmosphericFogGroundOffset = View_AtmosphericFogGroundOffset;
	Result.AtmosphericFogDistanceScale = View_AtmosphericFogDistanceScale;
	Result.AtmosphericFogAltitudeScale = View_AtmosphericFogAltitudeScale;
	Result.AtmosphericFogHeightScaleRayleigh = View_AtmosphericFogHeightScaleRayleigh;
	Result.AtmosphericFogStartDistance = View_AtmosphericFogStartDistance;
	Result.AtmosphericFogDistanceOffset = View_AtmosphericFogDistanceOffset;
	Result.AtmosphericFogSunDiscScale = View_AtmosphericFogSunDiscScale;
	Result.AtmosphereLightDirection = View_AtmosphereLightDirection;
	Result.AtmosphereLightColor = View_AtmosphereLightColor;
	Result.AtmosphereLightColorGlobalPostTransmittance = View_AtmosphereLightColorGlobalPostTransmittance;
	Result.AtmosphereLightDiscLuminance = View_AtmosphereLightDiscLuminance;
	Result.AtmosphereLightDiscCosHalfApexAngle = View_AtmosphereLightDiscCosHalfApexAngle;
	Result.SkyViewLutSizeAndInvSize = View_SkyViewLutSizeAndInvSize;
	Result.SkyWorldCameraOrigin = View_SkyWorldCameraOrigin;
	Result.SkyAtmosphereSkyLuminanceFactor = View_SkyAtmosphereSkyLuminanceFactor;
	Result.SkyAtmosphereHeightFogContribution = View_SkyAtmosphereHeightFogContribution;
	Result.SkyAtmosphereBottomRadius = View_SkyAtmosphereBottomRadius;
	Result.SkyAtmosphereTopRadius = View_SkyAtmosphereTopRadius;
	Result.SkyAtmosphereAerialPerspectiveStartDepth = View_SkyAtmosphereAerialPerspectiveStartDepth;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLength = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLength;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthInv = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthInv;
	Result.SkyAtmosphereApplyCameraAerialPerspectiveVolume = View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	Result.AtmosphericFogRenderMask = View_AtmosphericFogRenderMask;
	Result.AtmosphericFogInscatterAltitudeSampleNum = View_AtmosphericFogInscatterAltitudeSampleNum;
	Result.NormalCurvatureToRoughnessScaleBias = View_NormalCurvatureToRoughnessScaleBias;
	Result.RenderingReflectionCaptureMask = View_RenderingReflectionCaptureMask;
	Result.AmbientCubemapTint = View_AmbientCubemapTint;
	Result.AmbientCubemapIntensity = View_AmbientCubemapIntensity;
	Result.SkyLightApplyPrecomputedBentNormalShadowingFlag = View_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	Result.SkyLightAffectReflectionFlag = View_SkyLightAffectReflectionFlag;
	Result.SkyLightAffectGlobalIlluminationFlag = View_SkyLightAffectGlobalIlluminationFlag;
	Result.SkyLightColor = View_SkyLightColor;
	Result.SkyIrradianceEnvironmentMap = View_SkyIrradianceEnvironmentMap;
	Result.MobilePreviewMode = View_MobilePreviewMode;
	Result.HMDEyePaddingOffset = View_HMDEyePaddingOffset;
	Result.ReflectionCubemapMaxMip = View_ReflectionCubemapMaxMip;
	Result.ShowDecalsMask = View_ShowDecalsMask;
	Result.DistanceFieldAOSpecularOcclusionMode = View_DistanceFieldAOSpecularOcclusionMode;
	Result.IndirectCapsuleSelfShadowingIntensity = View_IndirectCapsuleSelfShadowingIntensity;
	Result.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight = View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	Result.StereoPassIndex = View_StereoPassIndex;
	Result.GlobalVolumeCenterAndExtent = View_GlobalVolumeCenterAndExtent;
	Result.GlobalVolumeWorldToUVAddAndMul = View_GlobalVolumeWorldToUVAddAndMul;
	Result.GlobalVolumeDimension = View_GlobalVolumeDimension;
	Result.GlobalVolumeTexelSize = View_GlobalVolumeTexelSize;
	Result.MaxGlobalDistance = View_MaxGlobalDistance;
	Result.CursorPosition = View_CursorPosition;
	Result.bCheckerboardSubsurfaceProfileRendering = View_bCheckerboardSubsurfaceProfileRendering;
	Result.VolumetricFogInvGridSize = View_VolumetricFogInvGridSize;
	Result.VolumetricFogGridZParams = View_VolumetricFogGridZParams;
	Result.VolumetricFogSVPosToVolumeUV = View_VolumetricFogSVPosToVolumeUV;
	Result.VolumetricFogMaxDistance = View_VolumetricFogMaxDistance;
	Result.VolumetricLightmapWorldToUVScale = View_VolumetricLightmapWorldToUVScale;
	Result.VolumetricLightmapWorldToUVAdd = View_VolumetricLightmapWorldToUVAdd;
	Result.VolumetricLightmapIndirectionTextureSize = View_VolumetricLightmapIndirectionTextureSize;
	Result.VolumetricLightmapBrickSize = View_VolumetricLightmapBrickSize;
	Result.VolumetricLightmapBrickTexelSize = View_VolumetricLightmapBrickTexelSize;
	Result.StereoIPD = View_StereoIPD;
	Result.IndirectLightingCacheShowFlag = View_IndirectLightingCacheShowFlag;
	Result.EyeToPixelSpreadAngle = View_EyeToPixelSpreadAngle;
	Result.WorldToVirtualTexture = View_WorldToVirtualTexture;
	Result.VirtualTextureParams = View_VirtualTextureParams;
	Result.XRPassthroughCameraUVs = View_XRPassthroughCameraUVs;
	Result.FarShadowStaticMeshLODBias = View_FarShadowStaticMeshLODBias;
	Result.MinRoughness = View_MinRoughness;
	Result.ConstantWaterDepth = View_ConstantWaterDepth;
	Result.HairRenderInfo = View_HairRenderInfo;
	return Result;
}
ViewState GetInstancedView()
{
	ViewState Result;
	Result.TranslatedWorldToClip = InstancedView_TranslatedWorldToClip;
	Result.WorldToClip = InstancedView_WorldToClip;
	Result.ClipToWorld = InstancedView_ClipToWorld;
	Result.TranslatedWorldToView = InstancedView_TranslatedWorldToView;
	Result.ViewToTranslatedWorld = InstancedView_ViewToTranslatedWorld;
	Result.TranslatedWorldToCameraView = InstancedView_TranslatedWorldToCameraView;
	Result.CameraViewToTranslatedWorld = InstancedView_CameraViewToTranslatedWorld;
	Result.ViewToClip = InstancedView_ViewToClip;
	Result.ViewToClipNoAA = InstancedView_ViewToClipNoAA;
	Result.ClipToView = InstancedView_ClipToView;
	Result.ClipToTranslatedWorld = InstancedView_ClipToTranslatedWorld;
	Result.SVPositionToTranslatedWorld = InstancedView_SVPositionToTranslatedWorld;
	Result.ScreenToWorld = InstancedView_ScreenToWorld;
	Result.ScreenToTranslatedWorld = InstancedView_ScreenToTranslatedWorld;
	Result.MobileMultiviewShadowTransform = InstancedView_MobileMultiviewShadowTransform;
	Result.ViewForward = InstancedView_ViewForward;
	Result.ViewUp = InstancedView_ViewUp;
	Result.ViewRight = InstancedView_ViewRight;
	Result.HMDViewNoRollUp = InstancedView_HMDViewNoRollUp;
	Result.HMDViewNoRollRight = InstancedView_HMDViewNoRollRight;
	Result.InvDeviceZToWorldZTransform = InstancedView_InvDeviceZToWorldZTransform;
	Result.ScreenPositionScaleBias = InstancedView_ScreenPositionScaleBias;
	Result.WorldCameraOrigin = InstancedView_WorldCameraOrigin;
	Result.TranslatedWorldCameraOrigin = InstancedView_TranslatedWorldCameraOrigin;
	Result.WorldViewOrigin = InstancedView_WorldViewOrigin;
	Result.PreViewTranslation = InstancedView_PreViewTranslation;
	Result.PrevProjection = InstancedView_PrevProjection;
	Result.PrevViewProj = InstancedView_PrevViewProj;
	Result.PrevViewRotationProj = InstancedView_PrevViewRotationProj;
	Result.PrevViewToClip = InstancedView_PrevViewToClip;
	Result.PrevClipToView = InstancedView_PrevClipToView;
	Result.PrevTranslatedWorldToClip = InstancedView_PrevTranslatedWorldToClip;
	Result.PrevTranslatedWorldToView = InstancedView_PrevTranslatedWorldToView;
	Result.PrevViewToTranslatedWorld = InstancedView_PrevViewToTranslatedWorld;
	Result.PrevTranslatedWorldToCameraView = InstancedView_PrevTranslatedWorldToCameraView;
	Result.PrevCameraViewToTranslatedWorld = InstancedView_PrevCameraViewToTranslatedWorld;
	Result.PrevWorldCameraOrigin = InstancedView_PrevWorldCameraOrigin;
	Result.PrevWorldViewOrigin = InstancedView_PrevWorldViewOrigin;
	Result.PrevPreViewTranslation = InstancedView_PrevPreViewTranslation;
	Result.PrevInvViewProj = InstancedView_PrevInvViewProj;
	Result.PrevScreenToTranslatedWorld = InstancedView_PrevScreenToTranslatedWorld;
	Result.ClipToPrevClip = InstancedView_ClipToPrevClip;
	Result.TemporalAAJitter = InstancedView_TemporalAAJitter;
	Result.GlobalClippingPlane = InstancedView_GlobalClippingPlane;
	Result.FieldOfViewWideAngles = InstancedView_FieldOfViewWideAngles;
	Result.PrevFieldOfViewWideAngles = InstancedView_PrevFieldOfViewWideAngles;
	Result.ViewRectMin = InstancedView_ViewRectMin;
	Result.ViewSizeAndInvSize = InstancedView_ViewSizeAndInvSize;
	Result.BufferSizeAndInvSize = InstancedView_BufferSizeAndInvSize;
	Result.BufferBilinearUVMinMax = InstancedView_BufferBilinearUVMinMax;
	Result.ScreenToViewSpace = InstancedView_ScreenToViewSpace;
	Result.NumSceneColorMSAASamples = InstancedView_NumSceneColorMSAASamples;
	Result.PreExposure = InstancedView_PreExposure;
	Result.OneOverPreExposure = InstancedView_OneOverPreExposure;
	Result.DiffuseOverrideParameter = InstancedView_DiffuseOverrideParameter;
	Result.SpecularOverrideParameter = InstancedView_SpecularOverrideParameter;
	Result.NormalOverrideParameter = InstancedView_NormalOverrideParameter;
	Result.RoughnessOverrideParameter = InstancedView_RoughnessOverrideParameter;
	Result.PrevFrameGameTime = InstancedView_PrevFrameGameTime;
	Result.PrevFrameRealTime = InstancedView_PrevFrameRealTime;
	Result.OutOfBoundsMask = InstancedView_OutOfBoundsMask;
	Result.WorldCameraMovementSinceLastFrame = InstancedView_WorldCameraMovementSinceLastFrame;
	Result.CullingSign = InstancedView_CullingSign;
	Result.NearPlane = InstancedView_NearPlane;
	Result.AdaptiveTessellationFactor = InstancedView_AdaptiveTessellationFactor;
	Result.GameTime = InstancedView_GameTime;
	Result.RealTime = InstancedView_RealTime;
	Result.DeltaTime = InstancedView_DeltaTime;
	Result.MaterialTextureMipBias = InstancedView_MaterialTextureMipBias;
	Result.MaterialTextureDerivativeMultiply = InstancedView_MaterialTextureDerivativeMultiply;
	Result.Random = InstancedView_Random;
	Result.FrameNumber = InstancedView_FrameNumber;
	Result.StateFrameIndexMod8 = InstancedView_StateFrameIndexMod8;
	Result.StateFrameIndex = InstancedView_StateFrameIndex;
	Result.CameraCut = InstancedView_CameraCut;
	Result.UnlitViewmodeMask = InstancedView_UnlitViewmodeMask;
	Result.DirectionalLightColor = InstancedView_DirectionalLightColor;
	Result.DirectionalLightDirection = InstancedView_DirectionalLightDirection;
	Result.TranslucencyLightingVolumeMin = InstancedView_TranslucencyLightingVolumeMin;
	Result.TranslucencyLightingVolumeInvSize = InstancedView_TranslucencyLightingVolumeInvSize;
	Result.TemporalAAParams = InstancedView_TemporalAAParams;
	Result.CircleDOFParams = InstancedView_CircleDOFParams;
	Result.DepthOfFieldSensorWidth = InstancedView_DepthOfFieldSensorWidth;
	Result.DepthOfFieldFocalDistance = InstancedView_DepthOfFieldFocalDistance;
	Result.DepthOfFieldScale = InstancedView_DepthOfFieldScale;
	Result.DepthOfFieldFocalLength = InstancedView_DepthOfFieldFocalLength;
	Result.DepthOfFieldFocalRegion = InstancedView_DepthOfFieldFocalRegion;
	Result.DepthOfFieldNearTransitionRegion = InstancedView_DepthOfFieldNearTransitionRegion;
	Result.DepthOfFieldFarTransitionRegion = InstancedView_DepthOfFieldFarTransitionRegion;
	Result.MotionBlurNormalizedToPixel = InstancedView_MotionBlurNormalizedToPixel;
	Result.bSubsurfacePostprocessEnabled = InstancedView_bSubsurfacePostprocessEnabled;
	Result.GeneralPurposeTweak = InstancedView_GeneralPurposeTweak;
	Result.DemosaicVposOffset = InstancedView_DemosaicVposOffset;
	Result.IndirectLightingColorScale = InstancedView_IndirectLightingColorScale;
	Result.HDR32bppEncodingMode = InstancedView_HDR32bppEncodingMode;
	Result.AtmosphericFogSunPower = InstancedView_AtmosphericFogSunPower;
	Result.AtmosphericFogPower = InstancedView_AtmosphericFogPower;
	Result.AtmosphericFogDensityScale = InstancedView_AtmosphericFogDensityScale;
	Result.AtmosphericFogDensityOffset = InstancedView_AtmosphericFogDensityOffset;
	Result.AtmosphericFogGroundOffset = InstancedView_AtmosphericFogGroundOffset;
	Result.AtmosphericFogDistanceScale = InstancedView_AtmosphericFogDistanceScale;
	Result.AtmosphericFogAltitudeScale = InstancedView_AtmosphericFogAltitudeScale;
	Result.AtmosphericFogHeightScaleRayleigh = InstancedView_AtmosphericFogHeightScaleRayleigh;
	Result.AtmosphericFogStartDistance = InstancedView_AtmosphericFogStartDistance;
	Result.AtmosphericFogDistanceOffset = InstancedView_AtmosphericFogDistanceOffset;
	Result.AtmosphericFogSunDiscScale = InstancedView_AtmosphericFogSunDiscScale;
	Result.AtmosphereLightDirection = InstancedView_AtmosphereLightDirection;
	Result.AtmosphereLightColor = InstancedView_AtmosphereLightColor;
	Result.AtmosphereLightColorGlobalPostTransmittance = InstancedView_AtmosphereLightColorGlobalPostTransmittance;
	Result.AtmosphereLightDiscLuminance = InstancedView_AtmosphereLightDiscLuminance;
	Result.AtmosphereLightDiscCosHalfApexAngle = InstancedView_AtmosphereLightDiscCosHalfApexAngle;
	Result.SkyViewLutSizeAndInvSize = InstancedView_SkyViewLutSizeAndInvSize;
	Result.SkyWorldCameraOrigin = InstancedView_SkyWorldCameraOrigin;
	Result.SkyAtmosphereSkyLuminanceFactor = InstancedView_SkyAtmosphereSkyLuminanceFactor;
	Result.SkyAtmosphereHeightFogContribution = InstancedView_SkyAtmosphereHeightFogContribution;
	Result.SkyAtmosphereBottomRadius = InstancedView_SkyAtmosphereBottomRadius;
	Result.SkyAtmosphereTopRadius = InstancedView_SkyAtmosphereTopRadius;
	Result.SkyAtmosphereAerialPerspectiveStartDepth = InstancedView_SkyAtmosphereAerialPerspectiveStartDepth;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution = InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv = InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLength = InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLength;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthInv = InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthInv;
	Result.SkyAtmosphereApplyCameraAerialPerspectiveVolume = InstancedView_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	Result.AtmosphericFogRenderMask = InstancedView_AtmosphericFogRenderMask;
	Result.AtmosphericFogInscatterAltitudeSampleNum = InstancedView_AtmosphericFogInscatterAltitudeSampleNum;
	Result.NormalCurvatureToRoughnessScaleBias = InstancedView_NormalCurvatureToRoughnessScaleBias;
	Result.RenderingReflectionCaptureMask = InstancedView_RenderingReflectionCaptureMask;
	Result.AmbientCubemapTint = InstancedView_AmbientCubemapTint;
	Result.AmbientCubemapIntensity = InstancedView_AmbientCubemapIntensity;
	Result.SkyLightApplyPrecomputedBentNormalShadowingFlag = InstancedView_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	Result.SkyLightAffectReflectionFlag = InstancedView_SkyLightAffectReflectionFlag;
	Result.SkyLightAffectGlobalIlluminationFlag = InstancedView_SkyLightAffectGlobalIlluminationFlag;
	Result.SkyLightColor = InstancedView_SkyLightColor;
	Result.SkyIrradianceEnvironmentMap = InstancedView_SkyIrradianceEnvironmentMap;
	Result.MobilePreviewMode = InstancedView_MobilePreviewMode;
	Result.HMDEyePaddingOffset = InstancedView_HMDEyePaddingOffset;
	Result.ReflectionCubemapMaxMip = InstancedView_ReflectionCubemapMaxMip;
	Result.ShowDecalsMask = InstancedView_ShowDecalsMask;
	Result.DistanceFieldAOSpecularOcclusionMode = InstancedView_DistanceFieldAOSpecularOcclusionMode;
	Result.IndirectCapsuleSelfShadowingIntensity = InstancedView_IndirectCapsuleSelfShadowingIntensity;
	Result.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight = InstancedView_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	Result.StereoPassIndex = InstancedView_StereoPassIndex;
	Result.GlobalVolumeCenterAndExtent = InstancedView_GlobalVolumeCenterAndExtent;
	Result.GlobalVolumeWorldToUVAddAndMul = InstancedView_GlobalVolumeWorldToUVAddAndMul;
	Result.GlobalVolumeDimension = InstancedView_GlobalVolumeDimension;
	Result.GlobalVolumeTexelSize = InstancedView_GlobalVolumeTexelSize;
	Result.MaxGlobalDistance = InstancedView_MaxGlobalDistance;
	Result.CursorPosition = InstancedView_CursorPosition;
	Result.bCheckerboardSubsurfaceProfileRendering = InstancedView_bCheckerboardSubsurfaceProfileRendering;
	Result.VolumetricFogInvGridSize = InstancedView_VolumetricFogInvGridSize;
	Result.VolumetricFogGridZParams = InstancedView_VolumetricFogGridZParams;
	Result.VolumetricFogSVPosToVolumeUV = InstancedView_VolumetricFogSVPosToVolumeUV;
	Result.VolumetricFogMaxDistance = InstancedView_VolumetricFogMaxDistance;
	Result.VolumetricLightmapWorldToUVScale = InstancedView_VolumetricLightmapWorldToUVScale;
	Result.VolumetricLightmapWorldToUVAdd = InstancedView_VolumetricLightmapWorldToUVAdd;
	Result.VolumetricLightmapIndirectionTextureSize = InstancedView_VolumetricLightmapIndirectionTextureSize;
	Result.VolumetricLightmapBrickSize = InstancedView_VolumetricLightmapBrickSize;
	Result.VolumetricLightmapBrickTexelSize = InstancedView_VolumetricLightmapBrickTexelSize;
	Result.StereoIPD = InstancedView_StereoIPD;
	Result.IndirectLightingCacheShowFlag = InstancedView_IndirectLightingCacheShowFlag;
	Result.EyeToPixelSpreadAngle = InstancedView_EyeToPixelSpreadAngle;
	Result.WorldToVirtualTexture = InstancedView_WorldToVirtualTexture;
	Result.VirtualTextureParams = InstancedView_VirtualTextureParams;
	Result.XRPassthroughCameraUVs = InstancedView_XRPassthroughCameraUVs;
	Result.FarShadowStaticMeshLODBias = InstancedView_FarShadowStaticMeshLODBias;
	Result.MinRoughness = InstancedView_MinRoughness;
	Result.ConstantWaterDepth = InstancedView_ConstantWaterDepth;
	Result.HairRenderInfo = InstancedView_HairRenderInfo;
	return Result;
}
#line 16 "/Engine/Private/InstancedStereo.ush"

static ViewState ResolvedView;

ViewState ResolveView()
{
	return GetPrimaryView();
}
#line 44 "/Engine/Private/InstancedStereo.ush"
bool IsInstancedStereo()
{



	return false;

}

uint GetEyeIndex(uint InstanceId)
{



	return 0;

}

uint GetInstanceId(uint InstanceId)
{



	return InstanceId;

}
#line 67 "/Engine/Private/Common.ush"
#line 68 "/Engine/Private/Common.ush"
#line 1 "Definitions.usf"
#line 69 "/Engine/Private/Common.ush"
#line 82 "/Engine/Private/Common.ush"
const static  float  PI = 3.1415926535897932f;
const static float MaxHalfFloat = 65504.0f;
const static float Max10BitsFloat = 64512.0f;





static float GlobalRayCone_TexArea;
float ComputeRayConeLod(Texture2D Tex)
{






    return 0.0f;

}

float ClampToHalfFloatRange(float X) { return clamp(X, float(0), MaxHalfFloat); }
float2 ClampToHalfFloatRange(float2 X) { return clamp(X, float(0).xx, MaxHalfFloat.xx); }
float3 ClampToHalfFloatRange(float3 X) { return clamp(X, float(0).xxx, MaxHalfFloat.xxx); }
float4 ClampToHalfFloatRange(float4 X) { return clamp(X, float(0).xxxx, MaxHalfFloat.xxxx); }



float4  Texture1DSample(Texture1D Tex, SamplerState Sampler, float UV)
{

	return Tex.SampleLevel(Sampler, UV, 0);
#line 117 "/Engine/Private/Common.ush"
}
float4  Texture2DSample(Texture2D Tex, SamplerState Sampler, float2 UV)
{

	return Tex.SampleLevel(Sampler, UV, ComputeRayConeLod(Tex));
#line 125 "/Engine/Private/Common.ush"
}
float  Texture2DSample_A8(Texture2D Tex, SamplerState Sampler, float2 UV)
{

	return Tex.SampleLevel(Sampler, UV, ComputeRayConeLod(Tex))  .a ;
#line 133 "/Engine/Private/Common.ush"
}
float4  Texture3DSample(Texture3D Tex, SamplerState Sampler, float3 UV)
{

	return Tex.SampleLevel(Sampler, UV, 0);
#line 141 "/Engine/Private/Common.ush"
}
float4  TextureCubeSample(TextureCube Tex, SamplerState Sampler, float3 UV)
{

	return Tex.SampleLevel(Sampler, UV, 0);
#line 149 "/Engine/Private/Common.ush"
}
float4  Texture2DArraySample(Texture2DArray Tex, SamplerState Sampler, float3 UV)
{

	return Tex.SampleLevel(Sampler, UV, 0);
#line 157 "/Engine/Private/Common.ush"
}
float4  Texture1DSampleLevel(Texture1D Tex, SamplerState Sampler, float UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float4  Texture2DSampleLevel(Texture2D Tex, SamplerState Sampler, float2 UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float4  Texture2DSampleBias(Texture2D Tex, SamplerState Sampler, float2 UV,  float  MipBias)
{

	return Tex.SampleLevel(Sampler, UV, ComputeRayConeLod(Tex) + MipBias);
#line 173 "/Engine/Private/Common.ush"
}
float4  Texture2DSampleGrad(Texture2D Tex, SamplerState Sampler, float2 UV,  float2  DDX,  float2  DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}
float4  Texture3DSampleLevel(Texture3D Tex, SamplerState Sampler, float3 UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float4  Texture3DSampleBias(Texture3D Tex, SamplerState Sampler, float3 UV,  float  MipBias)
{

	return Tex.SampleBias(Sampler, UV, 0);
#line 189 "/Engine/Private/Common.ush"
}
float4  Texture3DSampleGrad(Texture3D Tex, SamplerState Sampler, float3 UV,  float3  DDX,  float3  DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}
float4  TextureCubeSampleLevel(TextureCube Tex, SamplerState Sampler, float3 UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float  TextureCubeSampleDepthLevel(TextureCube TexDepth, SamplerState Sampler, float3 UV,  float  Mip)
{
	return TexDepth.SampleLevel(Sampler, UV, Mip).x;
}
float4  TextureCubeSampleBias(TextureCube Tex, SamplerState Sampler, float3 UV,  float  MipBias)
{

	return Tex.SampleLevel(Sampler, UV, 0);
#line 209 "/Engine/Private/Common.ush"
}
float4  TextureCubeSampleGrad(TextureCube Tex, SamplerState Sampler, float3 UV,  float3  DDX,  float3  DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}
float4  TextureExternalSample( Texture2D  Tex, SamplerState Sampler, float2 UV)
{




		return Tex.SampleLevel(Sampler, UV, ComputeRayConeLod(Tex));
#line 225 "/Engine/Private/Common.ush"
}
float4  TextureExternalSampleLevel( Texture2D  Tex, SamplerState Sampler, float2 UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}




float4  Texture1DSample_Decal(Texture1D Tex, SamplerState Sampler, float UV)
{
	return Texture1DSample(Tex, Sampler, UV);
}
float4  Texture2DSample_Decal(Texture2D Tex, SamplerState Sampler, float2 UV)
{



	return Texture2DSample(Tex, Sampler, UV);

}
float4  Texture3DSample_Decal(Texture3D Tex, SamplerState Sampler, float3 UV)
{



	return Texture3DSample(Tex, Sampler, UV);

}
float4  TextureCubeSample_Decal(TextureCube Tex, SamplerState Sampler, float3 UV)
{



	return TextureCubeSample(Tex, Sampler, UV);

}

float4  Texture2DArraySampleLevel(Texture2DArray Tex, SamplerState Sampler, float3 UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float4  Texture2DArraySampleBias(Texture2DArray Tex, SamplerState Sampler, float3 UV,  float  MipBias)
{

	return Tex.SampleLevel(Sampler, UV, 0);
#line 274 "/Engine/Private/Common.ush"
}
float4  Texture2DArraySampleGrad(Texture2DArray Tex, SamplerState Sampler, float3 UV,  float2  DDX,  float2  DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}


float2 Tile1Dto2D(float xsize, float idx)
{
	float2 xyidx = 0;
	xyidx.y = floor(idx / xsize);
	xyidx.x = idx - xsize * xyidx.y;

	return xyidx;
}
#line 301 "/Engine/Private/Common.ush"
float4 PseudoVolumeTexture(Texture2D Tex, SamplerState TexSampler, float3 inPos, float2 xysize, float numframes,
	uint mipmode = 0, float miplevel = 0, float2 InDDX = 0, float2 InDDY = 0)
{
	float z = inPos.z - 0.5f / numframes;
	float zframe = floor(z * numframes);
	float zphase = frac(z * numframes);

	float2 uv = frac(inPos.xy) / xysize;

	float2 curframe = Tile1Dto2D(xysize.x, zframe) / xysize;
	float2 nextframe = Tile1Dto2D(xysize.x, zframe + 1) / xysize;

	float4 sampleA = 0, sampleB = 0;
	switch (mipmode)
	{
	case 0:
		sampleA = Tex.SampleLevel(TexSampler, uv + curframe, miplevel);
		sampleB = Tex.SampleLevel(TexSampler, uv + nextframe, miplevel);
		break;
	case 1:
		sampleA = Texture2DSample(Tex, TexSampler, uv + curframe);
		sampleB = Texture2DSample(Tex, TexSampler, uv + nextframe);
		break;
	case 2:
		sampleA = Tex.SampleGrad(TexSampler, uv + curframe, InDDX, InDDY);
		sampleB = Tex.SampleGrad(TexSampler, uv + nextframe, InDDX, InDDY);
		break;
	default:
		break;
	}

	return lerp(sampleA, sampleB, zphase);
}


	float4  TextureCubeArraySampleLevel(TextureCubeArray Tex, SamplerState Sampler, float3 UV, float ArrayIndex,  float  Mip)
	{
		return Tex.SampleLevel(Sampler, float4(UV, ArrayIndex), Mip);
	}
#line 379 "/Engine/Private/Common.ush"
float  Luminance(  float3  LinearColor )
{
	return dot( LinearColor,  float3 ( 0.3, 0.59, 0.11 ) );
}

float  length2( float2  v)
{
	return dot(v, v);
}
float  length2( float3  v)
{
	return dot(v, v);
}
float  length2( float4  v)
{
	return dot(v, v);
}

uint Mod(uint a, uint b)
{

	return a % b;
#line 404 "/Engine/Private/Common.ush"
}

uint2 Mod(uint2 a, uint2 b)
{

	return a % b;
#line 413 "/Engine/Private/Common.ush"
}

uint3 Mod(uint3 a, uint3 b)
{

	return a % b;
#line 422 "/Engine/Private/Common.ush"
}

float  UnClampedPow( float  X,  float  Y)
{
	return pow(X,  Y );
}
float2  UnClampedPow( float2  X,  float2  Y)
{
	return pow(X,  Y );
}
float3  UnClampedPow( float3  X,  float3  Y)
{
	return pow(X,  Y );
}
float4  UnClampedPow( float4  X,  float4  Y)
{
	return pow(X,  Y );
}


float  ClampedPow( float  X, float  Y)
{
	return pow(max(abs(X),0.000001f), Y );
}
float2  ClampedPow( float2  X, float2  Y)
{
	return pow(max(abs(X), float2 (0.000001f,0.000001f)), Y );
}
float3  ClampedPow( float3  X, float3  Y)
{
	return pow(max(abs(X), float3 (0.000001f,0.000001f,0.000001f)), Y );
}
float4  ClampedPow( float4  X, float4  Y)
{
	return pow(max(abs(X), float4 (0.000001f,0.000001f,0.000001f,0.000001f)), Y );
}
float  PositiveClampedPow( float  X, float  Y)
{
	return pow(max(X,0.0f), Y );
}
float2  PositiveClampedPow( float2  X, float2  Y)
{
	return pow(max(X, float2 (0.0f,0.0f)), Y );
}
float2  PositiveClampedPow( float2  X, float  Y)
{
	return pow(max(X, float2 (0.0f,0.0f)), float2 ( Y , Y ));
}
float3  PositiveClampedPow( float3  X, float3  Y)
{
	return pow(max(X, float3 (0.0f,0.0f,0.0f)), Y );
}
float3  PositiveClampedPow( float3  X, float  Y)
{
	return pow(max(X, float3 (0.0f,0.0f,0.0f)), float3 ( Y , Y , Y ));
}
float4  PositiveClampedPow( float4  X, float4  Y)
{
	return pow(max(X, float4 (0.0f,0.0f,0.0f,0.0f)), Y );
}
float4  PositiveClampedPow( float4  X, float  Y)
{
	return pow(max(X, float4 (0.0f,0.0f,0.0f,0.0f)), float4 ( Y , Y , Y , Y ));
}

float DDX(float Input)
{

	return 0;
#line 494 "/Engine/Private/Common.ush"
}

float2 DDX(float2 Input)
{

	return 0;
#line 503 "/Engine/Private/Common.ush"
}

float3 DDX(float3 Input)
{

	return 0;
#line 512 "/Engine/Private/Common.ush"
}

float4 DDX(float4 Input)
{

	return 0;
#line 521 "/Engine/Private/Common.ush"
}

float DDY(float Input)
{

	return 0;
#line 530 "/Engine/Private/Common.ush"
}

float2 DDY(float2 Input)
{

	return 0;
#line 539 "/Engine/Private/Common.ush"
}

float3 DDY(float3 Input)
{

	return 0;
#line 548 "/Engine/Private/Common.ush"
}

float4 DDY(float4 Input)
{

	return 0;
#line 557 "/Engine/Private/Common.ush"
}
#line 559 "/Engine/Private/Common.ush"
#line 1 "FastMath.ush"
#line 46 "/Engine/Private/FastMath.ush"
float rsqrtFast( float x )
{

	int i = asint(x);
	i = 0x5f3759df - (i >> 1);
	return asfloat(i);
#line 55 "/Engine/Private/FastMath.ush"
}




float sqrtFast( float x )
{

	int i = asint(x);
	i = 0x1FBD1DF5 + (i >> 1);
	return asfloat(i);
#line 69 "/Engine/Private/FastMath.ush"
}




float rcpFast( float x )
{

	int i = asint(x);
	i = 0x7EF311C2 - i;
	return asfloat(i);
#line 83 "/Engine/Private/FastMath.ush"
}





float rcpFastNR1( float x )
{

	int i = asint(x);
	i = 0x7EF311C3 - i;
	float xRcp = asfloat(i);
	xRcp = xRcp * (-xRcp * x + 2.0f);
	return xRcp;
#line 100 "/Engine/Private/FastMath.ush"
}

float lengthFast( float3 v )
{
	float LengthSqr = dot(v,v);
	return sqrtFast( LengthSqr );
}

float3 normalizeFast( float3 v )
{
	float LengthSqr = dot(v,v);
	return v * rsqrtFast( LengthSqr );
}

float4 fastClamp(float4 x, float4 Min, float4 Max)
{




	return clamp(x, Min, Max);

}

float3 fastClamp(float3 x, float3 Min, float3 Max)
{




	return clamp(x, Min, Max);

}

float2 fastClamp(float2 x, float2 Min, float2 Max)
{




	return clamp(x, Min, Max);

}

float fastClamp(float x, float Min, float Max)
{




	return clamp(x, Min, Max);

}









float acosFast(float inX)
{
    float x = abs(inX);
    float res = -0.156583f * x + (0.5 * PI);
    res *= sqrt(1.0f - x);
    return (inX >= 0) ? res : PI - res;
}




float asinFast( float x )
{
    return (0.5 * PI) - acosFast(x);
}





float atanFastPos( float x )
{
    float t0 = (x < 1.0f) ? x : 1.0f / x;
    float t1 = t0 * t0;
    float poly = 0.0872929f;
    poly = -0.301895f + poly * t1;
    poly = 1.0f + poly * t1;
    poly = poly * t0;
    return (x < 1.0f) ? poly : (0.5 * PI) - poly;
}



float atanFast( float x )
{
    float t0 = atanFastPos( abs(x) );
    return (x < 0) ? -t0: t0;
}

float atan2Fast( float y, float x )
{
	float t0 = max( abs(x), abs(y) );
	float t1 = min( abs(x), abs(y) );
	float t3 = t1 / t0;
	float t4 = t3 * t3;


	t0 = + 0.0872929;
	t0 = t0 * t4 - 0.301895;
	t0 = t0 * t4 + 1.0;
	t3 = t0 * t3;

	t3 = abs(y) > abs(x) ? (0.5 * PI) - t3 : t3;
	t3 = x < 0 ? PI - t3 : t3;
	t3 = y < 0 ? -t3 : t3;

	return t3;
}





float acosFast4(float inX)
{
	float x1 = abs(inX);
	float x2 = x1 * x1;
	float x3 = x2 * x1;
	float s;

	s = -0.2121144f * x1 + 1.5707288f;
	s = 0.0742610f * x2 + s;
	s = -0.0187293f * x3 + s;
	s = sqrt(1.0f - x1) * s;



	return inX >= 0.0f ? s : PI - s;
}




float asinFast4( float x )
{
	return (0.5 * PI) - acosFast4(x);
}




float CosBetweenVectors(float3 A, float3 B)
{

	return dot(A, B) * rsqrt(length2(A) * length2(B));
}



float AngleBetweenVectors(float3 A, float3 B)
{
	return acos(CosBetweenVectors(A, B));
}


float AngleBetweenVectorsFast(float3 A, float3 B)
{
	return acosFast(CosBetweenVectors(A, B));
}


int SignFastInt(float v)
{
	return 1 - int((asuint(v) & 0x7fffffff) >> 30);
}

int2 SignFastInt(float2 v)
{
	return int2(SignFastInt(v.x), SignFastInt(v.y));
}
#line 560 "/Engine/Private/Common.ush"
#line 1 "Random.ush"
#line 12 "/Engine/Private/Random.ush"
float PseudoRandom(float2 xy)
{
	float2 pos = frac(xy / 128.0f) * 128.0f + float2(-64.340622f, -72.465622f);


	return frac(dot(pos.xyx * pos.xyy, float3(20.390625f, 60.703125f, 2.4281209f)));
}







float InterleavedGradientNoise( float2 uv, float FrameId )
{

	uv += FrameId * (float2(47, 17) * 0.695f);

    const float3 magic = float3( 0.06711056f, 0.00583715f, 52.9829189f );
    return frac(magic.z * frac(dot(uv, magic.xy)));
}



float RandFast( uint2 PixelPos, float Magic = 3571.0 )
{
	float2 Random2 = ( 1.0 / 4320.0 ) * PixelPos + float2( 0.25, 0.0 );
	float Random = frac( dot( Random2 * Random2, Magic ) );
	Random = frac( Random * Random * (2 * Magic) );
	return Random;
}
#line 56 "/Engine/Private/Random.ush"
float RandBBSfloat(float seed)
{
	float s = frac(seed /  4093 );
	s = frac(s * s *  4093 );
	s = frac(s * s *  4093 );
	return s;
}








uint3 Rand3DPCG16(int3 p)
{

	uint3 v = uint3(p);




	v = v * 1664525u + 1013904223u;
#line 94 "/Engine/Private/Random.ush"
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;


	return v >> 16u;
}








uint3 Rand3DPCG32(int3 p)
{

	uint3 v = uint3(p);


	v = v * 1664525u + 1013904223u;


	v = v * (1u << 16u) + (v >> 16u);


	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return v;
}










uint4 Rand4DPCG32(int4 p)
{

	uint4 v = uint4(p);


	v = v * 1664525u + 1013904223u;


	v = v * (1u << 16u) + (v >> 16u);


	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;

	return v;
}
#line 174 "/Engine/Private/Random.ush"
void FindBestAxisVectors(float3 In, out float3 Axis1, out float3 Axis2 )
{
	const float3 N = abs(In);


	if( N.z > N.x && N.z > N.y )
	{
		Axis1 = float3(1, 0, 0);
	}
	else
	{
		Axis1 = float3(0, 0, 1);
	}

	Axis1 = normalize(Axis1 - In * dot(Axis1, In));
	Axis2 = cross(Axis1, In);
}
#line 215 "/Engine/Private/Random.ush"
uint2 ScrambleTEA(uint2 v, uint IterationCount = 3)
{

	uint k[4] ={ 0xA341316Cu , 0xC8013EA4u , 0xAD90777Du , 0x7E95761Eu };

	uint y = v[0];
	uint z = v[1];
	uint sum = 0;

	[unroll]  for(uint i = 0; i < IterationCount; ++i)
	{
		sum += 0x9e3779b9;
		y += ((z << 4u) + k[0]) ^ (z + sum) ^ ((z >> 5u) + k[1]);
		z += ((y << 4u) + k[2]) ^ (y + sum) ^ ((y >> 5u) + k[3]);
	}

	return uint2(y, z);
}






float3 NoiseTileWrap(float3 v, bool bTiling, float RepeatSize)
{
	return bTiling ? (frac(v / RepeatSize) * RepeatSize) : v;
}




float4 PerlinRamp(float4 t)
{
	return t * t * t * (t * (t * 6 - 15) + 10);
}




float4 PerlinRampDerivative(float4 t)
{
	return t * t * (t * (t * 30 - 60) + 30);
}







float4 MGradient(int seed, float3 offset)
{
	uint rand = Rand3DPCG16(int3(seed,0,0)).x;
	float3 direction = float3(rand.xxx &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	return float4(direction, dot(direction, offset));
}







float3 NoiseSeeds(float3 v, bool bTiling, float RepeatSize,
	out float seed000, out float seed001, out float seed010, out float seed011,
	out float seed100, out float seed101, out float seed110, out float seed111)
{
	float3 fv = frac(v);
	float3 iv = floor(v);

	const float3 primes = float3(19, 47, 101);

	if (bTiling)
	{
		seed000 = dot(primes, NoiseTileWrap(iv, true, RepeatSize));
		seed100 = dot(primes, NoiseTileWrap(iv + float3(1, 0, 0), true, RepeatSize));
		seed010 = dot(primes, NoiseTileWrap(iv + float3(0, 1, 0), true, RepeatSize));
		seed110 = dot(primes, NoiseTileWrap(iv + float3(1, 1, 0), true, RepeatSize));
		seed001 = dot(primes, NoiseTileWrap(iv + float3(0, 0, 1), true, RepeatSize));
		seed101 = dot(primes, NoiseTileWrap(iv + float3(1, 0, 1), true, RepeatSize));
		seed011 = dot(primes, NoiseTileWrap(iv + float3(0, 1, 1), true, RepeatSize));
		seed111 = dot(primes, NoiseTileWrap(iv + float3(1, 1, 1), true, RepeatSize));
	}
	else
	{
		seed000 = dot(iv, primes);
		seed100 = seed000 + primes.x;
		seed010 = seed000 + primes.y;
		seed110 = seed100 + primes.y;
		seed001 = seed000 + primes.z;
		seed101 = seed100 + primes.z;
		seed011 = seed010 + primes.z;
		seed111 = seed110 + primes.z;
	}

	return fv;
}







float GradientNoise3D_ALU(float3 v, bool bTiling, float RepeatSize)
{
	float seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111;
	float3 fv = NoiseSeeds(v, bTiling, RepeatSize, seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111);

	float rand000 = MGradient(int(seed000), fv - float3(0, 0, 0)).w;
	float rand100 = MGradient(int(seed100), fv - float3(1, 0, 0)).w;
	float rand010 = MGradient(int(seed010), fv - float3(0, 1, 0)).w;
	float rand110 = MGradient(int(seed110), fv - float3(1, 1, 0)).w;
	float rand001 = MGradient(int(seed001), fv - float3(0, 0, 1)).w;
	float rand101 = MGradient(int(seed101), fv - float3(1, 0, 1)).w;
	float rand011 = MGradient(int(seed011), fv - float3(0, 1, 1)).w;
	float rand111 = MGradient(int(seed111), fv - float3(1, 1, 1)).w;

	float3 Weights = PerlinRamp(float4(fv, 0)).xyz;

	float i = lerp(lerp(rand000, rand100, Weights.x), lerp(rand010, rand110, Weights.x), Weights.y);
	float j = lerp(lerp(rand001, rand101, Weights.x), lerp(rand011, rand111, Weights.x), Weights.y);
	return lerp(i, j, Weights.z).x;
}





float4x3 SimplexCorners(float3 v)
{

	float3 tet = floor(v + v.x/3 + v.y/3 + v.z/3);
	float3 base = tet - tet.x/6 - tet.y/6 - tet.z/6;
	float3 f = v - base;



	float3 g = step(f.yzx, f.xyz), h = 1 - g.zxy;
	float3 a1 = min(g, h) - 1. / 6., a2 = max(g, h) - 1. / 3.;


	return float4x3(base, base + a1, base + a2, base + 0.5);
}




float4 SimplexSmooth(float4x3 f)
{
	const float scale = 1024. / 375.;
	float4 d = float4(dot(f[0], f[0]), dot(f[1], f[1]), dot(f[2], f[2]), dot(f[3], f[3]));
	float4 s = saturate(2 * d);
	return (1 * scale + s*(-3 * scale + s*(3 * scale - s*scale)));
}




float3x4 SimplexDSmooth(float4x3 f)
{
	const float scale = 1024. / 375.;
	float4 d = float4(dot(f[0], f[0]), dot(f[1], f[1]), dot(f[2], f[2]), dot(f[3], f[3]));
	float4 s = saturate(2 * d);
	s = -12 * scale + s*(24 * scale - s * 12 * scale);

	return float3x4(
		s * float4(f[0][0], f[1][0], f[2][0], f[3][0]),
		s * float4(f[0][1], f[1][1], f[2][1], f[3][1]),
		s * float4(f[0][2], f[1][2], f[2][2], f[3][2]));
}
#line 403 "/Engine/Private/Random.ush"
float3x4 JacobianSimplex_ALU(float3 v, bool bTiling, float RepeatSize)
{

	float4x3 T = SimplexCorners(v);
	uint3 rand;
	float4x3 gvec[3], fv;
	float3x4 grad;



	fv[0] = v - T[0];
	rand = Rand3DPCG16(int3(floor(NoiseTileWrap(6 * T[0] + 0.5, bTiling, RepeatSize))));
	gvec[0][0] = float3(rand.xxx &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[1][0] = float3(rand.yyy &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[2][0] = float3(rand.zzz &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	grad[0][0] = dot(gvec[0][0], fv[0]);
	grad[1][0] = dot(gvec[1][0], fv[0]);
	grad[2][0] = dot(gvec[2][0], fv[0]);

	fv[1] = v - T[1];
	rand = Rand3DPCG16(int3(floor(NoiseTileWrap(6 * T[1] + 0.5, bTiling, RepeatSize))));
	gvec[0][1] = float3(rand.xxx &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[1][1] = float3(rand.yyy &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[2][1] = float3(rand.zzz &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	grad[0][1] = dot(gvec[0][1], fv[1]);
	grad[1][1] = dot(gvec[1][1], fv[1]);
	grad[2][1] = dot(gvec[2][1], fv[1]);

	fv[2] = v - T[2];
	rand = Rand3DPCG16(int3(floor(NoiseTileWrap(6 * T[2] + 0.5, bTiling, RepeatSize))));
	gvec[0][2] = float3(rand.xxx &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[1][2] = float3(rand.yyy &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[2][2] = float3(rand.zzz &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	grad[0][2] = dot(gvec[0][2], fv[2]);
	grad[1][2] = dot(gvec[1][2], fv[2]);
	grad[2][2] = dot(gvec[2][2], fv[2]);

	fv[3] = v - T[3];
	rand = Rand3DPCG16(int3(floor(NoiseTileWrap(6 * T[3] + 0.5, bTiling, RepeatSize))));
	gvec[0][3] = float3(rand.xxx &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[1][3] = float3(rand.yyy &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[2][3] = float3(rand.zzz &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	grad[0][3] = dot(gvec[0][3], fv[3]);
	grad[1][3] = dot(gvec[1][3], fv[3]);
	grad[2][3] = dot(gvec[2][3], fv[3]);


	float4 sv = SimplexSmooth(fv);
	float3x4 ds = SimplexDSmooth(fv);

	float3x4 jacobian;
	jacobian[0] = float4(mul(sv, gvec[0]) + mul(ds, grad[0]), dot(sv, grad[0]));
	jacobian[1] = float4(mul(sv, gvec[1]) + mul(ds, grad[1]), dot(sv, grad[1]));
	jacobian[2] = float4(mul(sv, gvec[2]) + mul(ds, grad[2]), dot(sv, grad[2]));

	return jacobian;
}






float ValueNoise3D_ALU(float3 v, bool bTiling, float RepeatSize)
{
	float seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111;
	float3 fv = NoiseSeeds(v, bTiling, RepeatSize, seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111);

	float rand000 = RandBBSfloat(seed000) * 2 - 1;
	float rand100 = RandBBSfloat(seed100) * 2 - 1;
	float rand010 = RandBBSfloat(seed010) * 2 - 1;
	float rand110 = RandBBSfloat(seed110) * 2 - 1;
	float rand001 = RandBBSfloat(seed001) * 2 - 1;
	float rand101 = RandBBSfloat(seed101) * 2 - 1;
	float rand011 = RandBBSfloat(seed011) * 2 - 1;
	float rand111 = RandBBSfloat(seed111) * 2 - 1;

	float3 Weights = PerlinRamp(float4(fv, 0)).xyz;

	float i = lerp(lerp(rand000, rand100, Weights.x), lerp(rand010, rand110, Weights.x), Weights.y);
	float j = lerp(lerp(rand001, rand101, Weights.x), lerp(rand011, rand111, Weights.x), Weights.y);
	return lerp(i, j, Weights.z).x;
}









float GradientNoise3D_TEX(float3 v, bool bTiling, float RepeatSize)
{
	bTiling = true;
	float3 fv = frac(v);
	float3 iv0 = NoiseTileWrap(floor(v), bTiling, RepeatSize);
	float3 iv1 = NoiseTileWrap(iv0 + 1, bTiling, RepeatSize);

	const int2 ZShear = int2(17, 89);

	float2 OffsetA = iv0.z * ZShear;
	float2 OffsetB = OffsetA + ZShear;
	if (bTiling)
	{
		OffsetB = iv1.z * ZShear;
	}


	float ts = 1 / 128.0f;


	float2 TexA0 = (iv0.xy + OffsetA + 0.5f) * ts;
	float2 TexB0 = (iv0.xy + OffsetB + 0.5f) * ts;


	float2 TexA1 = TexA0 + ts;
	float2 TexB1 = TexB0 + ts;
	if (bTiling)
	{
		TexA1 = (iv1.xy + OffsetA + 0.5f) * ts;
		TexB1 = (iv1.xy + OffsetB + 0.5f) * ts;
	}



	float3 A = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexA0.x, TexA0.y), 0).xyz * 2 - 1;
	float3 B = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexA1.x, TexA0.y), 0).xyz * 2 - 1;
	float3 C = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexA0.x, TexA1.y), 0).xyz * 2 - 1;
	float3 D = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexA1.x, TexA1.y), 0).xyz * 2 - 1;
	float3 E = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexB0.x, TexB0.y), 0).xyz * 2 - 1;
	float3 F = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexB1.x, TexB0.y), 0).xyz * 2 - 1;
	float3 G = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexB0.x, TexB1.y), 0).xyz * 2 - 1;
	float3 H = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexB1.x, TexB1.y), 0).xyz * 2 - 1;

	float a = dot(A, fv - float3(0, 0, 0));
	float b = dot(B, fv - float3(1, 0, 0));
	float c = dot(C, fv - float3(0, 1, 0));
	float d = dot(D, fv - float3(1, 1, 0));
	float e = dot(E, fv - float3(0, 0, 1));
	float f = dot(F, fv - float3(1, 0, 1));
	float g = dot(G, fv - float3(0, 1, 1));
	float h = dot(H, fv - float3(1, 1, 1));

	float3 Weights = PerlinRamp(frac(float4(fv, 0))).xyz;

	float i = lerp(lerp(a, b, Weights.x), lerp(c, d, Weights.x), Weights.y);
	float j = lerp(lerp(e, f, Weights.x), lerp(g, h, Weights.x), Weights.y);

	return lerp(i, j, Weights.z);
}



float FastGradientPerlinNoise3D_TEX(float3 xyz)
{

	float Extent = 16;



	xyz = frac(xyz / (Extent - 1)) * (Extent - 1);


	float3 uvw = frac(xyz);


	float3 p0 = xyz - uvw;


	float3 f = PerlinRamp(float4(uvw, 0)).xyz;

	float3 p = p0 + f;

	float4 NoiseSample = Texture3DSampleLevel(View_PerlinNoise3DTexture, View_PerlinNoise3DTextureSampler, p / Extent + 0.5f / Extent, 0);



	float3 n = NoiseSample.xyz * 255.0f / 127.0f - 1.0f;
	float d = NoiseSample.w * 255.f - 127;
	return dot(xyz, n) - d;
}





float3 VoronoiCornerSample(float3 pos, int Quality)
{

	float3 noise = float3(Rand3DPCG16(int3(pos))) / 0xffff - 0.5;



	if (Quality <= 2)
	{
		return normalize(noise) * 0.2588;
	}



	if (Quality == 3)
	{
		return normalize(noise) * 0.3090;
	}


	return noise;
}








float4 VoronoiCompare(float4 minval, float3 candidate, float3 offset, bool bDistanceOnly)
{
	if (bDistanceOnly)
	{
		return float4(0, 0, 0, min(minval.w, dot(offset, offset)));
	}
	else
	{
		float newdist = dot(offset, offset);
		return newdist > minval.w ? minval : float4(candidate, newdist);
	}
}


float4 VoronoiNoise3D_ALU(float3 v, int Quality, bool bTiling, float RepeatSize, bool bDistanceOnly)
{
	float3 fv = frac(v), fv2 = frac(v + 0.5);
	float3 iv = floor(v), iv2 = floor(v + 0.5);


	float4 mindist = float4(0,0,0,100);
	float3 p, offset;


	if (Quality == 3)
	{
		[unroll]  for (offset.x = -1; offset.x <= 1; ++offset.x)
		{
			[unroll]  for (offset.y = -1; offset.y <= 1; ++offset.y)
			{
				[unroll]  for (offset.z = -1; offset.z <= 1; ++offset.z)
				{
					p = offset + VoronoiCornerSample(NoiseTileWrap(iv2 + offset, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv2 + p, fv2 - p, bDistanceOnly);
				}
			}
		}
	}


	else
	{
		[unroll(3)]  for (offset.x = 0; offset.x <= 1; ++offset.x)
		{
			[unroll(3)]  for (offset.y = 0; offset.y <= 1; ++offset.y)
			{
				[unroll(3)]  for (offset.z = 0; offset.z <= 1; ++offset.z)
				{
					p = offset + VoronoiCornerSample(NoiseTileWrap(iv + offset, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);


					if (Quality == 2)
					{

						p = offset + VoronoiCornerSample(NoiseTileWrap(iv2 + offset, bTiling, RepeatSize) + 467, Quality);
						mindist = VoronoiCompare(mindist, iv2 + p, fv2 - p, bDistanceOnly);
					}
				}
			}
		}
	}


	if (Quality >= 4)
	{
		[unroll(3)]  for (offset.x = -1; offset.x <= 2; offset.x += 3)
		{
			[unroll(3)]  for (offset.y = 0; offset.y <= 1; ++offset.y)
			{
				[unroll(3)]  for (offset.z = 0; offset.z <= 1; ++offset.z)
				{

					p = offset.xyz + VoronoiCornerSample(NoiseTileWrap(iv + offset.xyz, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);


					p = offset.yzx + VoronoiCornerSample(NoiseTileWrap(iv + offset.yzx, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);


					p = offset.zxy + VoronoiCornerSample(NoiseTileWrap(iv + offset.zxy, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);
				}
			}
		}
	}


	return float4(mindist.xyz, sqrt(mindist.w));
}







float3 ComputeSimplexWeights2D(float2 OrthogonalPos, out float2 PosA, out float2 PosB, out float2 PosC)
{
	float2 OrthogonalPosFloor = floor(OrthogonalPos);
	PosA = OrthogonalPosFloor;
	PosB = PosA + float2(1, 1);

	float2 LocalPos = OrthogonalPos - OrthogonalPosFloor;

	PosC = PosA + ((LocalPos.x > LocalPos.y) ? float2(1,0) : float2(0,1));

	float b = min(LocalPos.x, LocalPos.y);
	float c = abs(LocalPos.y - LocalPos.x);
	float a = 1.0f - b - c;

	return float3(a, b, c);
}



float4 ComputeSimplexWeights3D(float3 OrthogonalPos, out float3 PosA, out float3 PosB, out float3 PosC, out float3 PosD)
{
	float3 OrthogonalPosFloor = floor(OrthogonalPos);

	PosA = OrthogonalPosFloor;
	PosB = PosA + float3(1, 1, 1);

	OrthogonalPos -= OrthogonalPosFloor;

	float Largest = max(OrthogonalPos.x, max(OrthogonalPos.y, OrthogonalPos.z));
	float Smallest = min(OrthogonalPos.x, min(OrthogonalPos.y, OrthogonalPos.z));

	PosC = PosA + float3(Largest == OrthogonalPos.x, Largest == OrthogonalPos.y, Largest == OrthogonalPos.z);
	PosD = PosA + float3(Smallest != OrthogonalPos.x, Smallest != OrthogonalPos.y, Smallest != OrthogonalPos.z);

	float4 ret;

	float RG = OrthogonalPos.x - OrthogonalPos.y;
	float RB = OrthogonalPos.x - OrthogonalPos.z;
	float GB = OrthogonalPos.y - OrthogonalPos.z;

	ret.b =
		  min(max(0, RG), max(0, RB))
		+ min(max(0, -RG), max(0, GB))
		+ min(max(0, -RB), max(0, -GB));

	ret.a =
		  min(max(0, -RG), max(0, -RB))
		+ min(max(0, RG), max(0, -GB))
		+ min(max(0, RB), max(0, GB));

	ret.g = Smallest;
	ret.r = 1.0f - ret.g - ret.b - ret.a;

	return ret;
}

float2 GetPerlinNoiseGradientTextureAt(float2 v)
{
	float2 TexA = (v.xy + 0.5f) / 128.0f;


	float3 p = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, TexA, 0).xyz * 2 - 1;
	return normalize(p.xy + p.z * 0.33f);
}

float3 GetPerlinNoiseGradientTextureAt(float3 v)
{
	const float2 ZShear = float2(17.0f, 89.0f);

	float2 OffsetA = v.z * ZShear;
	float2 TexA = (v.xy + OffsetA + 0.5f) / 128.0f;

	return Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, TexA , 0).xyz * 2 - 1;
}

float2 SkewSimplex(float2 In)
{
	return In + dot(In, (sqrt(3.0f) - 1.0f) * 0.5f );
}
float2 UnSkewSimplex(float2 In)
{
	return In - dot(In, (3.0f - sqrt(3.0f)) / 6.0f );
}
float3 SkewSimplex(float3 In)
{
	return In + dot(In, 1.0 / 3.0f );
}
float3 UnSkewSimplex(float3 In)
{
	return In - dot(In, 1.0 / 6.0f );
}




float GradientSimplexNoise2D_TEX(float2 EvalPos)
{
	float2 OrthogonalPos = SkewSimplex(EvalPos);

	float2 PosA, PosB, PosC, PosD;
	float3 Weights = ComputeSimplexWeights2D(OrthogonalPos, PosA, PosB, PosC);


	float2 A = GetPerlinNoiseGradientTextureAt(PosA);
	float2 B = GetPerlinNoiseGradientTextureAt(PosB);
	float2 C = GetPerlinNoiseGradientTextureAt(PosC);

	PosA = UnSkewSimplex(PosA);
	PosB = UnSkewSimplex(PosB);
	PosC = UnSkewSimplex(PosC);

	float DistanceWeight;

	DistanceWeight = saturate(0.5f - length2(EvalPos - PosA)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float a = dot(A, EvalPos - PosA) * DistanceWeight;
	DistanceWeight = saturate(0.5f - length2(EvalPos - PosB)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float b = dot(B, EvalPos - PosB) * DistanceWeight;
	DistanceWeight = saturate(0.5f - length2(EvalPos - PosC)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float c = dot(C, EvalPos - PosC) * DistanceWeight;

	return 70 * (a + b + c);
}






float SimplexNoise3D_TEX(float3 EvalPos)
{
	float3 OrthogonalPos = SkewSimplex(EvalPos);

	float3 PosA, PosB, PosC, PosD;
	float4 Weights = ComputeSimplexWeights3D(OrthogonalPos, PosA, PosB, PosC, PosD);


	float3 A = GetPerlinNoiseGradientTextureAt(PosA);
	float3 B = GetPerlinNoiseGradientTextureAt(PosB);
	float3 C = GetPerlinNoiseGradientTextureAt(PosC);
	float3 D = GetPerlinNoiseGradientTextureAt(PosD);

	PosA = UnSkewSimplex(PosA);
	PosB = UnSkewSimplex(PosB);
	PosC = UnSkewSimplex(PosC);
	PosD = UnSkewSimplex(PosD);

	float DistanceWeight;

	DistanceWeight = saturate(0.6f - length2(EvalPos - PosA)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float a = dot(A, EvalPos - PosA) * DistanceWeight;
	DistanceWeight = saturate(0.6f - length2(EvalPos - PosB)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float b = dot(B, EvalPos - PosB) * DistanceWeight;
	DistanceWeight = saturate(0.6f - length2(EvalPos - PosC)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float c = dot(C, EvalPos - PosC) * DistanceWeight;
	DistanceWeight = saturate(0.6f - length2(EvalPos - PosD)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float d = dot(D, EvalPos - PosD) * DistanceWeight;

	return 32 * (a + b + c + d);
}


float VolumeRaymarch(float3 posPixelWS, float3 posCameraWS)
{
	float ret = 0;
	int cnt = 60;

	[loop]  for(int i=0; i < cnt; ++i)
	{
		ret += saturate(FastGradientPerlinNoise3D_TEX(lerp(posPixelWS, posCameraWS, i/(float)cnt) * 0.01) - 0.2f);
	}

	return ret / cnt * (length(posPixelWS - posCameraWS) * 0.001f );
}
#line 561 "/Engine/Private/Common.ush"
#line 566 "/Engine/Private/Common.ush"
float  PhongShadingPow( float  X,  float  Y)
{
#line 584 "/Engine/Private/Common.ush"
	return ClampedPow(X, Y);
}
#line 618 "/Engine/Private/Common.ush"
Texture2D LightAttenuationTexture;
SamplerState LightAttenuationTextureSampler;





float ConvertTangentUnormToSnorm8(float Input)
{
	int IntVal = int(round(Input * 255.0f));

	IntVal = (IntVal > 127) ? (IntVal | 0xFFFFFF80) : IntVal;
	return clamp(IntVal / 127.0f, -1, 1);
}

float2 ConvertTangentUnormToSnorm8(float2 Input)
{
	int2 IntVal = int2(round(Input * 255.0f));

	IntVal = (IntVal > 127) ? (IntVal | 0xFFFFFF80) : IntVal;
	return clamp(IntVal / 127.0f, -1, 1);
}

float3 ConvertTangentUnormToSnorm8(float3 Input)
{
	int3 IntVal = int3(round(Input * 255.0f));
	IntVal = (IntVal > 127) ? (IntVal | 0xFFFFFF80) : IntVal;
	return clamp(IntVal / 127.0f, -1, 1);
}

float4 ConvertTangentUnormToSnorm8(float4 Input)
{
	int4 IntVal = int4(round(Input * 255.0f));

	IntVal = (IntVal > 127) ? (IntVal | 0xFFFFFF80) : IntVal;
	return clamp(IntVal / 127.0f, -1, 1);
}

float ConvertTangentUnormToSnorm16(float Input)
{
	int IntVal = int(round(Input * 65535.0f));

	IntVal = (IntVal > 32767) ? (IntVal | 0xFFFF8000) : IntVal;
	return clamp(IntVal / 32767.0f, -1, 1);
}

float2 ConvertTangentUnormToSnorm16(float2 Input)
{
	int2 IntVal = int2(round(Input * 65535.0f));

	IntVal = (IntVal > 32767) ? (IntVal | 0xFFFFFF80) : IntVal;
	return clamp(IntVal / 32767.0f, -1, 1);
}

float3 ConvertTangentUnormToSnorm16(float3 Input)
{
	int3 IntVal = int3(round(Input * 65535.0f));
	IntVal = (IntVal > 32767) ? (IntVal | 0xFFFFFF80) : IntVal;
	return clamp(IntVal / 32767.0f, -1, 1);
}

float4 ConvertTangentUnormToSnorm16(float4 Input)
{
	int4 IntVal = int4(round(Input * 65535.0f));

	IntVal = (IntVal > 32767) ? (IntVal | 0xFFFFFF80) : IntVal;
	return clamp(IntVal / 32767.0f, -1, 1);
}

float ConvertTangentSnormToUnorm8(float Input)
{
	float Res = Input >= 0.0f ? Input * 127 : ((Input + 1.0) * 127) + 128;
	return clamp(Res / 255, 0.0f, 0.99f);
}

float2 ConvertTangentSnormToUnorm8(float2 Input)
{
	float2 Res = Input >= 0.0f ? Input * 127 : ((Input + 1.0) * 127) + 128;
	return clamp(Res / 255, 0.0f, 0.99f);
}

float3 ConvertTangentSnormToUnorm8(float3 Input)
{
	float3 Res = Input >= 0.0f ? Input * 127 : ((Input + 1.0) * 127) + 128;
	return clamp(Res / 255, 0.0f, 0.99f);
}

float4 ConvertTangentSnormToUnorm8(float4 Input)
{
	float4 Res = Input >= 0.0f ? Input * 127 : ((Input + 1.0) * 127) + 128;
	return clamp(Res / 255, 0.0f, 0.99f);
}

float ConvertTangentSnormToUnorm16(float Input)
{
	float Res = Input >= 0.0f ? Input * 32767 : ((Input + 1.0) * 32767) + 32768;
	return clamp(Res / 65535, 0.0f, 0.99f);
}

float2 ConvertTangentSnormToUnorm16(float2 Input)
{
	float2 Res = Input >= 0.0f ? Input * 32767 : ((Input + 1.0) * 32767) + 32768;
	return clamp(Res / 65535, 0.0f, 0.99f);
}

float3 ConvertTangentSnormToUnorm16(float3 Input)
{
	float3 Res = Input >= 0.0f ? Input * 32767 : ((Input + 1.0) * 32767) + 32768;
	return clamp(Res / 65535, 0.0f, 0.99f);
}

float4 ConvertTangentSnormToUnorm16(float4 Input)
{
	float4 Res = Input >= 0.0f ? Input * 32767 : ((Input + 1.0) * 32767) + 32768;
	return clamp(Res / 65535, 0.0f, 0.99f);
}






float Square( float x )
{
	return x*x;
}

float2 Square( float2 x )
{
	return x*x;
}

float3 Square( float3 x )
{
	return x*x;
}

float4 Square( float4 x )
{
	return x*x;
}

float Pow2( float x )
{
	return x*x;
}

float2 Pow2( float2 x )
{
	return x*x;
}

float3 Pow2( float3 x )
{
	return x*x;
}

float4 Pow2( float4 x )
{
	return x*x;
}

float Pow3( float x )
{
	return x*x*x;
}

float2 Pow3( float2 x )
{
	return x*x*x;
}

float3 Pow3( float3 x )
{
	return x*x*x;
}

float4 Pow3( float4 x )
{
	return x*x*x;
}

float Pow4( float x )
{
	float xx = x*x;
	return xx * xx;
}

float2 Pow4( float2 x )
{
	float2 xx = x*x;
	return xx * xx;
}

float3 Pow4( float3 x )
{
	float3 xx = x*x;
	return xx * xx;
}

float4 Pow4( float4 x )
{
	float4 xx = x*x;
	return xx * xx;
}

float Pow5( float x )
{
	float xx = x*x;
	return xx * xx * x;
}

float2 Pow5( float2 x )
{
	float2 xx = x*x;
	return xx * xx * x;
}

float3 Pow5( float3 x )
{
	float3 xx = x*x;
	return xx * xx * x;
}

float4 Pow5( float4 x )
{
	float4 xx = x*x;
	return xx * xx * x;
}

float Pow6( float x )
{
	float xx = x*x;
	return xx * xx * xx;
}

float2 Pow6( float2 x )
{
	float2 xx = x*x;
	return xx * xx * xx;
}

float3 Pow6( float3 x )
{
	float3 xx = x*x;
	return xx * xx * xx;
}

float4 Pow6( float4 x )
{
	float4 xx = x*x;
	return xx * xx * xx;
}


float  AtanFast(  float  x )
{

	float3  A = x < 1 ?  float3 ( x, 0, 1 ) :  float3 ( 1/x, 0.5 * PI, -1 );
	return A.y + A.z * ( ( ( -0.130234 * A.x - 0.0954105 ) * A.x + 1.00712 ) * A.x - 0.00001203333 );
}


float  EncodeLightAttenuation( float  InColor)
{


	return sqrt(InColor);
}


float4  EncodeLightAttenuation( float4  InColor)
{
	return sqrt(InColor);
}
#line 921 "/Engine/Private/Common.ush"
float3  HdrMosaic( float3  LinearColor, float2 VPos)
{
	float2 V;
	V = VPos.xy * 0.5;
	V.y += V.x;
	V = frac(V);
	float2  C;
	C = (V *  float2 (2.0 * (-0.5/255.0),  (( 6.0 * ((255.0-( 6.0 / (1.0/2.0) ))/255.0) - (1.0/2.0) ) * 2.0) )) +  float2 (-0.5/255.0,  (1.0/2.0) );
	return (LinearColor * C.y) + C.x;
}





float3  HdrDemosaic( float3  Pixel,  float3  OtherPixel, float2 VPos)
{
	float  A = frac(dot(VPos + View_DemosaicVposOffset, float2(0.5, 0.5)));
	float  B = 0.5 - A;
	A = A *  (((1.0/ 6.0 ) - (1.0/ (1.0/2.0) )) * 2.0)  +  (1.0/ (1.0/2.0) ) ;
	B = B *  (((1.0/ 6.0 ) - (1.0/ (1.0/2.0) )) * 2.0)  +  (1.0/ (1.0/2.0) ) ;





		return max((Pixel * A), (OtherPixel * B));

}



float4  RGBTEncode( float3  Color)
{
	float4  RGBT;
	float  Max = max(max(Color.r, Color.g), max(Color.b, 1e-6));
	float  RcpMax = rcp(Max);
	RGBT.rgb = Color.rgb * RcpMax;
	RGBT.a = Max * rcp(1.0 + Max);
	return RGBT;
}

float3  RGBTDecode( float4  RGBT)
{
	RGBT.a = RGBT.a * rcp(1.0 - RGBT.a);
	return RGBT.rgb * RGBT.a;
}



float4  RGBMEncode(  float3  Color )
{
	Color *= 1.0 / 64.0;

	float4 rgbm;
	rgbm.a = saturate( max( max( Color.r, Color.g ), max( Color.b, 1e-6 ) ) );
	rgbm.a = ceil( rgbm.a * 255.0 ) / 255.0;
	rgbm.rgb = Color / rgbm.a;
	return rgbm;
}

float4  RGBMEncodeFast(  float3  Color )
{

	float4  rgbm;
	rgbm.a = dot( Color, 255.0 / 64.0 );
	rgbm.a = ceil( rgbm.a );
	rgbm.rgb = Color / rgbm.a;
	rgbm *=  float4 ( 255.0 / 64.0, 255.0 / 64.0, 255.0 / 64.0, 1.0 / 255.0 );
	return rgbm;
}

float3  RGBMDecode(  float4  rgbm,  float  MaxValue )
{
	return rgbm.rgb * (rgbm.a * MaxValue);
}

float3  RGBMDecode(  float4  rgbm )
{
	return rgbm.rgb * (rgbm.a * 64.0f);
}

float4  RGBTEncode8BPC( float3  Color,  float  Range)
{
	float  Max = max(max(Color.r, Color.g), max(Color.b, 1e-6));
	Max = min(Max, Range);

	float4  RGBT;
	RGBT.a = (Range + 1) / Range * Max / (1 + Max);


	RGBT.a = ceil(RGBT.a*255.0) / 255.0;
	Max = RGBT.a / (1 + 1 / Range - RGBT.a);

	float  RcpMax = rcp(Max);
	RGBT.rgb = Color.rgb * RcpMax;
	return RGBT;
}

float3  RGBTDecode8BPC( float4  RGBT,  float  Range)
{
	RGBT.a = RGBT.a / (1 + 1 / Range - RGBT.a);
	return RGBT.rgb * RGBT.a;
}






float  GetHDR32bppEncodeMode()
{
#line 1042 "/Engine/Private/Common.ush"
	return  0.0 ;
}



float4  Encode32BPPHDR( float4  Color, float2 SvPosition)
{
	float  Mode = GetHDR32bppEncodeMode();
	if (Mode ==  1.0 )
	{
		return  float4 (HdrMosaic(Color.rgb, SvPosition), Color.a);
	}
	else if (Mode ==  2.0 )
	{
		return RGBTEncode8BPC(Color.rgb,  1024.0 );
	}
	else
	{

		return Color;
	}
}

float4  Decode32BPPHDR( float4  Encoded,  float3  OtherEncoded =  float3 (0, 0, 0), float2 SvPosition = float2(0, 0))
{
	float  Mode = GetHDR32bppEncodeMode();
	if (Mode ==  1.0 )
	{
		return  float4 (HdrDemosaic(Encoded.rgb, OtherEncoded, SvPosition), 0.0f);
	}
	if (Mode ==  2.0 )
	{
		return  float4 (RGBTDecode8BPC(Encoded,  1024.0 ), 0.0f);
	}
	else
	{

		return Encoded;
	}
}


float4 Decode32BPPHDR(float4 Pixel, float2 SvPosition, Texture2D SourceTexture, SamplerState SourceSampler, float2 InTexCoords[4])
{
	float3  PixelColorN = SourceTexture.Sample(SourceSampler, InTexCoords[0].xy).rgb;
	float3  PixelColorE = SourceTexture.Sample(SourceSampler, InTexCoords[1].xy).rgb;
	float3  PixelColorW = SourceTexture.Sample(SourceSampler, InTexCoords[2].xy).rgb;
	float3  PixelColorS = SourceTexture.Sample(SourceSampler, InTexCoords[3].xy).rgb;
	float3  PixelColorV = PixelColorN * 0.5 + PixelColorS * 0.5;
	float3  PixelColorH = PixelColorW * 0.5 + PixelColorE * 0.5;
	if(abs(PixelColorN.g - PixelColorS.g) < abs(PixelColorW.g - PixelColorE.g))
	{
		PixelColorH = PixelColorV;
	}
	Pixel.rgb = Decode32BPPHDR(Pixel, PixelColorH, SvPosition.xy).rgb;
	Pixel.a = 0.0;
	return Pixel;
}
#line 1120 "/Engine/Private/Common.ush"
float2 CalcScreenUVFromOffsetFraction(float4 ScreenPosition, float2 OffsetFraction)
{
	float2 NDC = ScreenPosition.xy / ScreenPosition.w;



	float2 OffsetNDC = clamp(NDC + OffsetFraction * float2(2, -2), -.999f, .999f);
	return float2(OffsetNDC * ResolvedView.ScreenPositionScaleBias.xy + ResolvedView.ScreenPositionScaleBias.wz);
}

float4 GetPerPixelLightAttenuation(float2 UV)
{
	return Square(Texture2DSampleLevel(LightAttenuationTexture, LightAttenuationTextureSampler, UV, 0));
}




float ConvertFromDeviceZ(float DeviceZ)
{

	return DeviceZ * View_InvDeviceZToWorldZTransform[0] + View_InvDeviceZToWorldZTransform[1] + 1.0f / (DeviceZ * View_InvDeviceZToWorldZTransform[2] - View_InvDeviceZToWorldZTransform[3]);
}




float ConvertToDeviceZ(float SceneDepth)
{
	[flatten]
	if (View_ViewToClip[3][3] < 1.0f)
	{

		return 1.0f / ((SceneDepth + View_InvDeviceZToWorldZTransform[3]) * View_InvDeviceZToWorldZTransform[2]);
	}
	else
	{

		return SceneDepth * View_ViewToClip[2][2] + View_ViewToClip[3][2];
	}
}

float2 ScreenPositionToBufferUV(float4 ScreenPosition)
{
	return float2(ScreenPosition.xy / ScreenPosition.w * ResolvedView.ScreenPositionScaleBias.xy + ResolvedView.ScreenPositionScaleBias.wz);
}

float2 SvPositionToBufferUV(float4 SvPosition)
{
	return SvPosition.xy * View_BufferSizeAndInvSize.zw;
}


float3 SvPositionToTranslatedWorld(float4 SvPosition)
{
	float4 HomWorldPos = mul(float4(SvPosition.xyz, 1), View_SVPositionToTranslatedWorld);

	return HomWorldPos.xyz / HomWorldPos.w;
}


float3 SvPositionToResolvedTranslatedWorld(float4 SvPosition)
{
	float4 HomWorldPos = mul(float4(SvPosition.xyz, 1), ResolvedView.SVPositionToTranslatedWorld);

	return HomWorldPos.xyz / HomWorldPos.w;
}


float3 SvPositionToWorld(float4 SvPosition)
{
	return SvPositionToTranslatedWorld(SvPosition) - View_PreViewTranslation;
}


float4 SvPositionToScreenPosition(float4 SvPosition)
{



	float2 PixelPos = SvPosition.xy - View_ViewRectMin.xy;


	float3 NDCPos = float3( (PixelPos * View_ViewSizeAndInvSize.zw - 0.5f) * float2(2, -2), SvPosition.z);


	return float4(NDCPos.xyz, 1) * SvPosition.w;
}


float4 SvPositionToResolvedScreenPosition(float4 SvPosition)
{
	float2 PixelPos = SvPosition.xy - ResolvedView.ViewRectMin.xy;


	float3 NDCPos = float3( (PixelPos * ResolvedView.ViewSizeAndInvSize.zw - 0.5f) * float2(2, -2), SvPosition.z);


	return float4(NDCPos.xyz, 1) * SvPosition.w;
}

float2 SvPositionToViewportUV(float4 SvPosition)
{

	float2 PixelPos = SvPosition.xy - View_ViewRectMin.xy;

	return PixelPos.xy * View_ViewSizeAndInvSize.zw;
}

float2 BufferUVToViewportUV(float2 BufferUV)
{
	float2 PixelPos = BufferUV.xy * View_BufferSizeAndInvSize.xy - View_ViewRectMin.xy;
	return PixelPos.xy * View_ViewSizeAndInvSize.zw;
}

float2 ViewportUVToBufferUV(float2 ViewportUV)
{
	float2 PixelPos = ViewportUV * View_ViewSizeAndInvSize.xy;
	return (PixelPos + View_ViewRectMin.xy) * View_BufferSizeAndInvSize.zw;
}


float2 ViewportUVToScreenPos(float2 ViewportUV)
{
	return float2(2 * ViewportUV.x - 1, 1 - 2 * ViewportUV.y);
}

float2 ScreenPosToViewportUV(float2 ScreenPos)
{
	return float2(0.5 + 0.5 * ScreenPos.x, 0.5 - 0.5 * ScreenPos.y);
}



float3 ScreenToViewPos(float2 ViewportUV, float SceneDepth)
{
	float2 ProjViewPos;

	ProjViewPos.x = ViewportUV.x * View_ScreenToViewSpace.x + View_ScreenToViewSpace.z;
	ProjViewPos.y = ViewportUV.y * View_ScreenToViewSpace.y + View_ScreenToViewSpace.w;
	return float3(ProjViewPos * SceneDepth, SceneDepth);
}
#line 1269 "/Engine/Private/Common.ush"
float2  ScreenAlignedPosition( float4 ScreenPosition )
{
	return  float2 (ScreenPositionToBufferUV(ScreenPosition));
}
#line 1277 "/Engine/Private/Common.ush"
float2  ScreenAlignedUV(  float2  UV )
{
	return (UV* float2 (2,-2) +  float2 (-1,1))*View_ScreenPositionScaleBias.xy + View_ScreenPositionScaleBias.wz;
}
#line 1285 "/Engine/Private/Common.ush"
float2  GetViewportCoordinates( float2  InFragmentCoordinates)
{
	return InFragmentCoordinates;
}
#line 1293 "/Engine/Private/Common.ush"
float4  UnpackNormalMap(  float4  TextureSample )
{






		float2  NormalXY = TextureSample.rg;


	NormalXY = NormalXY *  float2 (2.0f,2.0f) -  float2 (1.0f,1.0f);
	float  NormalZ = sqrt( saturate( 1.0f - dot( NormalXY, NormalXY ) ) );
	return  float4 ( NormalXY.xy, NormalZ, 1.0f );

}


float AntialiasedTextureMask( Texture2D Tex, SamplerState Sampler, float2 UV, float ThresholdConst, int Channel )
{

	float4  MaskConst =  float4 (Channel == 0, Channel == 1, Channel == 2, Channel == 3);


	const float WidthConst = 1.0f;
	float InvWidthConst = 1 / WidthConst;
#line 1341 "/Engine/Private/Common.ush"
	float Result;
	{

		float Sample1 = dot(MaskConst, Texture2DSample(Tex, Sampler, UV));


		float2 TexDD = float2(DDX(Sample1), DDY(Sample1));

		float TexDDLength = max(abs(TexDD.x), abs(TexDD.y));
		float Top = InvWidthConst * (Sample1 - ThresholdConst);
		Result = Top / TexDDLength + ThresholdConst;
	}

	Result = saturate(Result);

	return Result;
}



float Noise3D_Multiplexer(int Function, float3 Position, int Quality, bool bTiling, float RepeatSize)
{

	switch(Function)
	{
		case 0:
			return SimplexNoise3D_TEX(Position);
		case 1:
			return GradientNoise3D_TEX(Position, bTiling, RepeatSize);
		case 2:
			return FastGradientPerlinNoise3D_TEX(Position);
		case 3:
			return GradientNoise3D_ALU(Position, bTiling, RepeatSize);
		case 4:
			return ValueNoise3D_ALU(Position, bTiling, RepeatSize);
		default:
			return VoronoiNoise3D_ALU(Position, Quality, bTiling, RepeatSize, true).w * 2. - 1.;
	}
	return 0;
}



float  MaterialExpressionNoise(float3 Position, float Scale, int Quality, int Function, bool bTurbulence, uint Levels, float OutputMin, float OutputMax, float LevelScale, float FilterWidth, bool bTiling, float RepeatSize)
{
	Position *= Scale;
	FilterWidth *= Scale;

	float Out = 0.0f;
	float OutScale = 1.0f;
	float InvLevelScale = 1.0f / LevelScale;

	[loop]  for(uint i = 0; i < Levels; ++i)
	{

		OutScale *= saturate(1.0 - FilterWidth);

		if(bTurbulence)
		{
			Out += abs(Noise3D_Multiplexer(Function, Position, Quality, bTiling, RepeatSize)) * OutScale;
		}
		else
		{
			Out += Noise3D_Multiplexer(Function, Position, Quality, bTiling, RepeatSize) * OutScale;
		}

		Position *= LevelScale;
		RepeatSize *= LevelScale;
		OutScale *= InvLevelScale;
		FilterWidth *= LevelScale;
	}

	if(!bTurbulence)
	{

		Out = Out * 0.5f + 0.5f;
	}


	return lerp(OutputMin, OutputMax, Out);
}





float4  MaterialExpressionVectorNoise( float3  Position, int Quality, int Function, bool bTiling, float TileSize)
{
	float4 result = float4(0,0,0,1);
	float3x4 Jacobian = JacobianSimplex_ALU(Position, bTiling, TileSize);


	switch (Function)
	{
	case 0:
		result.xyz = float3(Rand3DPCG16(int3(floor(NoiseTileWrap(Position, bTiling, TileSize))))) / 0xffff;
		break;
	case 1:
		result.xyz = float3(Jacobian[0].w, Jacobian[1].w, Jacobian[2].w);
		break;
	case 2:
		result = Jacobian[0];
		break;
	case 3:
		result.xyz = float3(Jacobian[2][1] - Jacobian[1][2], Jacobian[0][2] - Jacobian[2][0], Jacobian[1][0] - Jacobian[0][1]);
		break;
	default:
		result = VoronoiNoise3D_ALU(Position, Quality, bTiling, TileSize, false);
		break;
	}
	return result;
}
#line 1468 "/Engine/Private/Common.ush"
float2 LineBoxIntersect(float3 RayOrigin, float3 RayEnd, float3 BoxMin, float3 BoxMax)
{
	float3 InvRayDir = 1.0f / (RayEnd - RayOrigin);


	float3 FirstPlaneIntersections = (BoxMin - RayOrigin) * InvRayDir;

	float3 SecondPlaneIntersections = (BoxMax - RayOrigin) * InvRayDir;

	float3 ClosestPlaneIntersections = min(FirstPlaneIntersections, SecondPlaneIntersections);

	float3 FurthestPlaneIntersections = max(FirstPlaneIntersections, SecondPlaneIntersections);

	float2 BoxIntersections;

	BoxIntersections.x = max(ClosestPlaneIntersections.x, max(ClosestPlaneIntersections.y, ClosestPlaneIntersections.z));

	BoxIntersections.y = min(FurthestPlaneIntersections.x, min(FurthestPlaneIntersections.y, FurthestPlaneIntersections.z));

	return saturate(BoxIntersections);
}


float  ComputeDistanceFromBoxToPoint( float3  Mins,  float3  Maxs,  float3  InPoint)
{
	float3  DistancesToMin = InPoint < Mins ? abs(InPoint - Mins) : 0;
	float3  DistancesToMax = InPoint > Maxs ? abs(InPoint - Maxs) : 0;


	float  Distance = dot(DistancesToMin, 1);
	Distance += dot(DistancesToMax, 1);
	return Distance;
}


float  ComputeSquaredDistanceFromBoxToPoint( float3  BoxCenter,  float3  BoxExtent,  float3  InPoint)
{
	float3  AxisDistances = max(abs(InPoint - BoxCenter) - BoxExtent, 0);
	return dot(AxisDistances, AxisDistances);
}


float ComputeDistanceFromBoxToPointInside(float3 BoxCenter, float3 BoxExtent, float3 InPoint)
{
	float3 DistancesToMin = max(InPoint - BoxCenter + BoxExtent, 0);
	float3 DistancesToMax = max(BoxCenter + BoxExtent - InPoint, 0);
	float3 ClosestDistances = min(DistancesToMin, DistancesToMax);
	return min(ClosestDistances.x, min(ClosestDistances.y, ClosestDistances.z));
}

bool RayHitSphere(float3 RayOrigin, float3 UnitRayDirection, float3 SphereCenter, float SphereRadius)
{
	float3 ClosestPointOnRay = max(0, dot(SphereCenter - RayOrigin, UnitRayDirection)) * UnitRayDirection;
	float3 CenterToRay = RayOrigin + ClosestPointOnRay - SphereCenter;
	return dot(CenterToRay, CenterToRay) <= Square(SphereRadius);
}

bool RaySegmentHitSphere(float3 RayOrigin, float3 UnitRayDirection, float RayLength, float3 SphereCenter, float SphereRadius)
{
	float DistanceAlongRay = dot(SphereCenter - RayOrigin, UnitRayDirection);
	float3 ClosestPointOnRay = DistanceAlongRay * UnitRayDirection;
	float3 CenterToRay = RayOrigin + ClosestPointOnRay - SphereCenter;
	return dot(CenterToRay, CenterToRay) <= Square(SphereRadius) && DistanceAlongRay > -SphereRadius && DistanceAlongRay - SphereRadius < RayLength;
}
#line 1537 "/Engine/Private/Common.ush"
float2 RayIntersectSphere(float3 RayOrigin, float3 RayDirection, float4 Sphere)
{
	float3 LocalPosition = RayOrigin - Sphere.xyz;
	float LocalPositionSqr = dot(LocalPosition, LocalPosition);

	float3 QuadraticCoef;
	QuadraticCoef.x = dot(RayDirection, RayDirection);
	QuadraticCoef.y = 2 * dot(RayDirection, LocalPosition);
	QuadraticCoef.z = LocalPositionSqr - Sphere.w * Sphere.w;

	float Discriminant = QuadraticCoef.y * QuadraticCoef.y - 4 * QuadraticCoef.x * QuadraticCoef.z;

	float2 Intersections = -1;


	[flatten]
	if (Discriminant >= 0)
	{
		float SqrtDiscriminant = sqrt(Discriminant);
		Intersections = (-QuadraticCoef.y + float2(-1, 1) * SqrtDiscriminant) / (2 * QuadraticCoef.x);
	}

	return Intersections;
}


float3  TransformTangentVectorToWorld( float3x3  TangentToWorld,  float3  InTangentVector)
{


	return mul(InTangentVector, TangentToWorld);
}


float3  TransformWorldVectorToTangent( float3x3  TangentToWorld,  float3  InWorldVector)
{


	return mul(TangentToWorld, InWorldVector);
}

float3 TransformWorldVectorToView(float3 InTangentVector)
{

	return mul(InTangentVector, (float3x3)ResolvedView.TranslatedWorldToView);
}


float  GetBoxPushout( float3  Normal, float3  Extent)
{
	return dot(abs(Normal * Extent),  float3 (1.0f, 1.0f, 1.0f));
}


void GenerateCoordinateSystem(float3 ZAxis, out float3 XAxis, out float3 YAxis)
{
	if (abs(ZAxis.x) > abs(ZAxis.y))
	{
		float InverseLength = 1.0f / sqrt(dot(ZAxis.xz, ZAxis.xz));
		XAxis = float3(-ZAxis.z * InverseLength, 0.0f, ZAxis.x * InverseLength);
	}
	else
	{
		float InverseLength = 1.0f / sqrt(dot(ZAxis.yz, ZAxis.yz));
		XAxis = float3(0.0f, ZAxis.z * InverseLength, -ZAxis.y * InverseLength);
	}

	YAxis = cross(ZAxis, XAxis);
}
#line 1616 "/Engine/Private/Common.ush"
struct FScreenVertexOutput
{




	noperspective  float2  UV : TEXCOORD0;

	float4 Position : SV_POSITION;
};





float2 EncodeVelocityToTexture(float2 In)
{


	return In * (0.499f * 0.5f) + 32767.0f / 65535.0f;
}

float2 DecodeVelocityFromTexture(float2 In)
{
	const float InvDiv = 1.0f / (0.499f * 0.5f);



	return In * InvDiv - 32767.0f / 65535.0f * InvDiv;
}


bool GetGIReplaceState()
{



	return false;

}

bool GetRayTracingQualitySwitch()
{



	return false;

}



bool GetRuntimeVirtualTextureOutputSwitch()
{



	return false;

}


struct FWriteToSliceGeometryOutput
{
	FScreenVertexOutput Vertex;
	uint LayerIndex : SV_RenderTargetArrayIndex;
};







void DrawRectangle(
	in float4 InPosition,
	in float2 InTexCoord,
	out float4 OutPosition,
	out float2 OutTexCoord)
{
	OutPosition = InPosition;
	OutPosition.xy = -1.0f + 2.0f * (DrawRectangleParameters_PosScaleBias.zw + (InPosition.xy * DrawRectangleParameters_PosScaleBias.xy)) * DrawRectangleParameters_InvTargetSizeAndTextureSize.xy;
	OutPosition.xy *= float2( 1, -1 );
	OutTexCoord.xy = (DrawRectangleParameters_UVScaleBias.zw + (InTexCoord.xy * DrawRectangleParameters_UVScaleBias.xy)) * DrawRectangleParameters_InvTargetSizeAndTextureSize.zw;
}


void DrawRectangle(
	in float4 InPosition,
	in float2 InTexCoord,
	out float4 OutPosition,
	out float4 OutUVAndScreenPos)
{
	DrawRectangle(InPosition, InTexCoord, OutPosition, OutUVAndScreenPos.xy);
	OutUVAndScreenPos.zw = OutPosition.xy;
}


void DrawRectangle(in float4 InPosition, out float4 OutPosition)
{
	OutPosition = InPosition;
	OutPosition.xy = -1.0f + 2.0f * (DrawRectangleParameters_PosScaleBias.zw + (InPosition.xy * DrawRectangleParameters_PosScaleBias.xy)) * DrawRectangleParameters_InvTargetSizeAndTextureSize.xy;
	OutPosition.xy *= float2( 1, -1 );
}
#line 1732 "/Engine/Private/Common.ush"
float SafeSaturate(float In) { return saturate(In);}
float2 SafeSaturate(float2 In) { return saturate(In);}
float3 SafeSaturate(float3 In) { return saturate(In);}
float4 SafeSaturate(float4 In) { return saturate(In);}
#line 1761 "/Engine/Private/Common.ush"
bool IsFinite(float In) { return (asuint(In) & 0x7F800000) != 0x7F800000; }bool IsPositiveFinite(float In) { return asuint(In) < 0x7F800000; }float MakeFinite(float In) { return !IsFinite(In)? 0 : In; }float MakePositiveFinite(float In) { return !IsPositiveFinite(In)? 0 : In; }
bool2 IsFinite(float2 In) { return (asuint(In) & 0x7F800000) != 0x7F800000; }bool2 IsPositiveFinite(float2 In) { return asuint(In) < 0x7F800000; }float2 MakeFinite(float2 In) { return !IsFinite(In)? 0 : In; }float2 MakePositiveFinite(float2 In) { return !IsPositiveFinite(In)? 0 : In; }
bool3 IsFinite(float3 In) { return (asuint(In) & 0x7F800000) != 0x7F800000; }bool3 IsPositiveFinite(float3 In) { return asuint(In) < 0x7F800000; }float3 MakeFinite(float3 In) { return !IsFinite(In)? 0 : In; }float3 MakePositiveFinite(float3 In) { return !IsPositiveFinite(In)? 0 : In; }
bool4 IsFinite(float4 In) { return (asuint(In) & 0x7F800000) != 0x7F800000; }bool4 IsPositiveFinite(float4 In) { return asuint(In) < 0x7F800000; }float4 MakeFinite(float4 In) { return !IsFinite(In)? 0 : In; }float4 MakePositiveFinite(float4 In) { return !IsPositiveFinite(In)? 0 : In; }





bool GetShadowReplaceState()
{



	return false;

}

float IsShadowDepthShader()
{
	return GetShadowReplaceState() ? 1.0f : 0.0f;
}




float DecodePackedTwoChannelValue(float2 PackedHeight)
{
	return PackedHeight.x * 255.0 * 256.0 + PackedHeight.y * 255.0;
}

float DecodeHeightValue(float InValue)
{
	return (InValue - 32768.0) *  (1.0f/128.0f) ;
}

float DecodePackedHeight(float2 PackedHeight)
{
	return DecodeHeightValue(DecodePackedTwoChannelValue(PackedHeight));
}


uint ReverseBits32( uint bits )
{

	return reversebits( bits );
#line 1815 "/Engine/Private/Common.ush"
}


uint ReverseBitsN(uint Bitfield, const uint BitCount)
{
	return ReverseBits32(Bitfield) >> (32 - BitCount);
}


struct FPixelShaderIn
{

	float4 SvPosition;


	uint Coverage;


	bool bIsFrontFace;
};

struct FPixelShaderOut
{

	float4 MRT[8];


	uint Coverage;


	float Depth;
};
#line 11 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/GlobalDistanceFieldShared.ush"
#line 12 "/Engine/Private/GlobalDistanceFieldShared.ush"
float MaxGlobalDistance;
#line 37 "/Engine/Private/GlobalDistanceFieldShared.ush"
	Texture3D GlobalDistanceFieldTexture0;
	Texture3D GlobalDistanceFieldTexture1;
	Texture3D GlobalDistanceFieldTexture2;
	Texture3D GlobalDistanceFieldTexture3;
	SamplerState GlobalDistanceFieldSampler0;
	SamplerState GlobalDistanceFieldSampler1;
	SamplerState GlobalDistanceFieldSampler2;
	SamplerState GlobalDistanceFieldSampler3;
	float4 GlobalVolumeCenterAndExtent[ 4 ];
	float4 GlobalVolumeWorldToUVAddAndMul[ 4 ];
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
#line 63 "/Engine/Private/GlobalDistanceFieldShared.ush"
float4 SampleGlobalDistanceField(int ClipmapIndex, float3 UV)
{
	if (ClipmapIndex == 0)
	{
		return Texture3DSampleLevel(GlobalDistanceFieldTexture0,  GlobalDistanceFieldSampler0 , UV, 0);
	}
	else if (ClipmapIndex == 1)
	{
		return Texture3DSampleLevel(GlobalDistanceFieldTexture1,  GlobalDistanceFieldSampler0 , UV, 0);
	}
	else if (ClipmapIndex == 2)
	{
		return Texture3DSampleLevel(GlobalDistanceFieldTexture2,  GlobalDistanceFieldSampler0 , UV, 0);
	}
	else
	{
		return Texture3DSampleLevel(GlobalDistanceFieldTexture3,  GlobalDistanceFieldSampler0 , UV, 0);
	}
}

float3 ComputeGlobalUV(float3 WorldPosition, uint ClipmapIndex)
{

	float4 WorldToUVAddAndMul = GlobalVolumeWorldToUVAddAndMul[ClipmapIndex];
	return WorldPosition * WorldToUVAddAndMul.www + WorldToUVAddAndMul.xyz;
}

float GetDistanceToNearestSurfaceGlobalClipmap(float3 WorldPosition, uint ClipmapIndex, float OuterClipmapFade)
{
	float3 GlobalUV = ComputeGlobalUV(WorldPosition, ClipmapIndex);
	float DistanceToSurface = 0;
	if (ClipmapIndex == 0)
	{
		DistanceToSurface = Texture3DSampleLevel(GlobalDistanceFieldTexture0,  GlobalDistanceFieldSampler0 , GlobalUV, 0).x;
	}
	else if (ClipmapIndex == 1)
	{
		DistanceToSurface = Texture3DSampleLevel(GlobalDistanceFieldTexture1,  GlobalDistanceFieldSampler0 , GlobalUV, 0).x;
	}
	else if (ClipmapIndex == 2)
	{
		DistanceToSurface = Texture3DSampleLevel(GlobalDistanceFieldTexture2,  GlobalDistanceFieldSampler0 , GlobalUV, 0).x;
	}
	else if (ClipmapIndex == 3)
	{
		DistanceToSurface = Texture3DSampleLevel(GlobalDistanceFieldTexture3,  GlobalDistanceFieldSampler0 , GlobalUV, 0).x;
		DistanceToSurface = lerp(MaxGlobalDistance, DistanceToSurface, OuterClipmapFade);
	}
	return DistanceToSurface;
}

float GetDistanceToNearestSurfaceGlobal(float3 WorldPosition)
{
	float DistanceToSurface = MaxGlobalDistance;
	float DistanceFromClipmap = ComputeDistanceFromBoxToPointInside(GlobalVolumeCenterAndExtent[0].xyz, GlobalVolumeCenterAndExtent[0].www, WorldPosition);


	[branch]
	if (DistanceFromClipmap > GlobalVolumeCenterAndExtent[0].w * GlobalVolumeTexelSize)
	{
		DistanceToSurface = GetDistanceToNearestSurfaceGlobalClipmap(WorldPosition, 0, 0);
	}
	else
	{
		DistanceFromClipmap = ComputeDistanceFromBoxToPointInside(GlobalVolumeCenterAndExtent[1].xyz, GlobalVolumeCenterAndExtent[1].www, WorldPosition);

		[branch]
		if (DistanceFromClipmap > GlobalVolumeCenterAndExtent[1].w * GlobalVolumeTexelSize)
		{
			DistanceToSurface = GetDistanceToNearestSurfaceGlobalClipmap(WorldPosition, 1, 0);
		}
		else
		{
			DistanceFromClipmap = ComputeDistanceFromBoxToPointInside(GlobalVolumeCenterAndExtent[2].xyz, GlobalVolumeCenterAndExtent[2].www, WorldPosition);
			float DistanceFromLastClipmap = ComputeDistanceFromBoxToPointInside(GlobalVolumeCenterAndExtent[3].xyz, GlobalVolumeCenterAndExtent[3].www, WorldPosition);

			[branch]
			if (DistanceFromClipmap > GlobalVolumeCenterAndExtent[2].w * GlobalVolumeTexelSize)
			{
				DistanceToSurface = GetDistanceToNearestSurfaceGlobalClipmap(WorldPosition, 2, 0);
			}
			else if (DistanceFromLastClipmap > GlobalVolumeCenterAndExtent[3].w * GlobalVolumeTexelSize)
			{

				float OuterClipmapFade = saturate(DistanceFromLastClipmap * 10 * GlobalVolumeWorldToUVAddAndMul[3].w);
				DistanceToSurface = GetDistanceToNearestSurfaceGlobalClipmap(WorldPosition, 3, OuterClipmapFade);
			}
		}
	}

	return DistanceToSurface;
}

float3 GetDistanceFieldGradientGlobalClipmap(float3 WorldPosition, uint ClipmapIndex)
{
	float3 GlobalUV = ComputeGlobalUV(WorldPosition, ClipmapIndex);

	float R = 0;
	float L = 0;
	float F = 0;
	float B = 0;
	float U = 0;
	float D = 0;

	if (ClipmapIndex == 0)
	{
		R = Texture3DSampleLevel(GlobalDistanceFieldTexture0,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x + GlobalVolumeTexelSize, GlobalUV.y, GlobalUV.z), 0).x;
		L = Texture3DSampleLevel(GlobalDistanceFieldTexture0,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x - GlobalVolumeTexelSize, GlobalUV.y, GlobalUV.z), 0).x;
		F = Texture3DSampleLevel(GlobalDistanceFieldTexture0,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y + GlobalVolumeTexelSize, GlobalUV.z), 0).x;
		B = Texture3DSampleLevel(GlobalDistanceFieldTexture0,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y - GlobalVolumeTexelSize, GlobalUV.z), 0).x;
		U = Texture3DSampleLevel(GlobalDistanceFieldTexture0,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y, GlobalUV.z + GlobalVolumeTexelSize), 0).x;
		D = Texture3DSampleLevel(GlobalDistanceFieldTexture0,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y, GlobalUV.z - GlobalVolumeTexelSize), 0).x;
	}
	else if (ClipmapIndex == 1)
	{
		R = Texture3DSampleLevel(GlobalDistanceFieldTexture1,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x + GlobalVolumeTexelSize, GlobalUV.y, GlobalUV.z), 0).x;
		L = Texture3DSampleLevel(GlobalDistanceFieldTexture1,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x - GlobalVolumeTexelSize, GlobalUV.y, GlobalUV.z), 0).x;
		F = Texture3DSampleLevel(GlobalDistanceFieldTexture1,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y + GlobalVolumeTexelSize, GlobalUV.z), 0).x;
		B = Texture3DSampleLevel(GlobalDistanceFieldTexture1,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y - GlobalVolumeTexelSize, GlobalUV.z), 0).x;
		U = Texture3DSampleLevel(GlobalDistanceFieldTexture1,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y, GlobalUV.z + GlobalVolumeTexelSize), 0).x;
		D = Texture3DSampleLevel(GlobalDistanceFieldTexture1,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y, GlobalUV.z - GlobalVolumeTexelSize), 0).x;
	}
	else if (ClipmapIndex == 2)
	{
		R = Texture3DSampleLevel(GlobalDistanceFieldTexture2,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x + GlobalVolumeTexelSize, GlobalUV.y, GlobalUV.z), 0).x;
		L = Texture3DSampleLevel(GlobalDistanceFieldTexture2,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x - GlobalVolumeTexelSize, GlobalUV.y, GlobalUV.z), 0).x;
		F = Texture3DSampleLevel(GlobalDistanceFieldTexture2,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y + GlobalVolumeTexelSize, GlobalUV.z), 0).x;
		B = Texture3DSampleLevel(GlobalDistanceFieldTexture2,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y - GlobalVolumeTexelSize, GlobalUV.z), 0).x;
		U = Texture3DSampleLevel(GlobalDistanceFieldTexture2,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y, GlobalUV.z + GlobalVolumeTexelSize), 0).x;
		D = Texture3DSampleLevel(GlobalDistanceFieldTexture2,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y, GlobalUV.z - GlobalVolumeTexelSize), 0).x;
	}
	else if (ClipmapIndex == 3)
	{
		R = Texture3DSampleLevel(GlobalDistanceFieldTexture3,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x + GlobalVolumeTexelSize, GlobalUV.y, GlobalUV.z), 0).x;
		L = Texture3DSampleLevel(GlobalDistanceFieldTexture3,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x - GlobalVolumeTexelSize, GlobalUV.y, GlobalUV.z), 0).x;
		F = Texture3DSampleLevel(GlobalDistanceFieldTexture3,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y + GlobalVolumeTexelSize, GlobalUV.z), 0).x;
		B = Texture3DSampleLevel(GlobalDistanceFieldTexture3,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y - GlobalVolumeTexelSize, GlobalUV.z), 0).x;
		U = Texture3DSampleLevel(GlobalDistanceFieldTexture3,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y, GlobalUV.z + GlobalVolumeTexelSize), 0).x;
		D = Texture3DSampleLevel(GlobalDistanceFieldTexture3,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y, GlobalUV.z - GlobalVolumeTexelSize), 0).x;
	}

	float Extent = GlobalVolumeCenterAndExtent[ClipmapIndex].w;
	float3 Gradient = .5f * float3(R - L, F - B, U - D) / Extent;
	return Gradient;
}

float3 GetDistanceFieldGradientGlobal(float3 WorldPosition)
{
	float3 Gradient = float3(0, 0, .001f);
	float DistanceFromClipmap = ComputeDistanceFromBoxToPointInside(GlobalVolumeCenterAndExtent[0].xyz, GlobalVolumeCenterAndExtent[0].www, WorldPosition);

	float BorderTexels = GlobalVolumeTexelSize * 4;

	[branch]
	if (DistanceFromClipmap > GlobalVolumeCenterAndExtent[0].w * BorderTexels)
	{
		Gradient = GetDistanceFieldGradientGlobalClipmap(WorldPosition, 0);
	}
	else
	{
		DistanceFromClipmap = ComputeDistanceFromBoxToPointInside(GlobalVolumeCenterAndExtent[1].xyz, GlobalVolumeCenterAndExtent[1].www, WorldPosition);

		[branch]
		if (DistanceFromClipmap > GlobalVolumeCenterAndExtent[1].w * BorderTexels)
		{
			Gradient = GetDistanceFieldGradientGlobalClipmap(WorldPosition, 1);
		}
		else
		{
			DistanceFromClipmap = ComputeDistanceFromBoxToPointInside(GlobalVolumeCenterAndExtent[2].xyz, GlobalVolumeCenterAndExtent[2].www, WorldPosition);
			float DistanceFromLastClipmap = ComputeDistanceFromBoxToPointInside(GlobalVolumeCenterAndExtent[3].xyz, GlobalVolumeCenterAndExtent[3].www, WorldPosition);

			[branch]
			if (DistanceFromClipmap > GlobalVolumeCenterAndExtent[2].w * BorderTexels)
			{
				Gradient = GetDistanceFieldGradientGlobalClipmap(WorldPosition, 2);
			}
			else if (DistanceFromLastClipmap > GlobalVolumeCenterAndExtent[3].w * BorderTexels)
			{
				Gradient = GetDistanceFieldGradientGlobalClipmap(WorldPosition, 3);
			}
		}
	}

	return Gradient;
}
#line 12 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 15 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	const static float TWO_PI = 3.1415926535897932f*2.0f;




float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }
#line 42 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	static uint3 GDispatchThreadId;
	static uint3 GGroupThreadId;
	static uint GCurrentPhase;
	static uint GEmitterTickCounter;
	static uint GSimStart;
#line 49 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/SceneTexturesCommon.ush"
#line 19 "/Engine/Private/SceneTexturesCommon.ush"
float3 CalcSceneColor(float2 ScreenUV)
{



	return Texture2DSampleLevel(SceneTexturesStruct_SceneColorTexture, SceneTexturesStruct_SceneColorTextureSampler, ScreenUV, 0).rgb;

}


float4 CalcFullSceneColor(float2 ScreenUV)
{



	return Texture2DSample(SceneTexturesStruct_SceneColorTexture, SceneTexturesStruct_SceneColorTextureSampler,ScreenUV);

}

float CalcSceneDepth(float2 ScreenUV)
{



	return ConvertFromDeviceZ(Texture2DSampleLevel(SceneTexturesStruct_SceneDepthTexture, SceneTexturesStruct_SceneDepthTextureSampler, ScreenUV, 0).r);

}
#line 50 "/Engine/Private/SceneTexturesCommon.ush"
float4 CalcSceneColorAndDepth( float2 ScreenUV )
{
	return float4(CalcSceneColor(ScreenUV), CalcSceneDepth(ScreenUV));
}


float LookupDeviceZ( float2 ScreenUV )
{




	return Texture2DSampleLevel(SceneTexturesStruct_SceneDepthTexture, SceneTexturesStruct_SceneDepthTextureSampler, ScreenUV, 0).r;

}


float CalcSceneDepth(uint2 PixelPos)
{



	float DeviceZ = SceneTexturesStruct_SceneDepthTextureNonMS.Load(int3(PixelPos, 0));


	return ConvertFromDeviceZ(DeviceZ);

}
#line 50 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 56 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	uint EmitterTickCounter;



	float4 Modulo(float4 x, float4 y){ return fmod(x,y); }
	float3 Modulo(float3 x, float3 y){ return fmod(x,y); }
	float2 Modulo(float2 x, float2 y){ return fmod(x,y); }
	float Modulo(float x, float y){ return fmod(x,y); }


	float3 WorldPositionFromSceneDepth(float2 ScreenPosition, float SceneDepth)
	{
		float4 HomogeneousWorldPosition = mul(float4(ScreenPosition * SceneDepth, SceneDepth, 1), View_ScreenToWorld);
		return HomogeneousWorldPosition.xyz / HomogeneousWorldPosition.w;
	}


	static uint GRandomSeedOffset;





	float NiagaraInternalNoise(uint u, uint v, uint s)
	{
		uint Seed = (u * 1664525u + v) + s + GRandomSeedOffset;
		GRandomSeedOffset += Seed;
		return float(Rand3DPCG32(int3(u,v,Seed)).x) / 4294967296.0f;
	}




	float4 EmitterSpawnInfoOffsets[ (( 8 + 3) / 4) ];
	float4 EmitterSpawnInfoParams[ 8 ];

	static int GInterpSpawnIndex;
	static float Emitter_SpawnInterval;
	static float Emitter_InterpSpawnStartDt;
	static int Emitter_SpawnGroup;

	void GetEmitterSpawnInfoForParticle(int ParticleIndex)
	{
		int SpawnInfoIndex = 0;
		[unroll]
		for ( int i=0; i <  (( 8 + 3) / 4) ; ++i )
		{
			SpawnInfoIndex += (int)dot(1.0f, ParticleIndex >= EmitterSpawnInfoOffsets[i]);
		}

		Emitter_SpawnInterval = EmitterSpawnInfoParams[SpawnInfoIndex].x;
		Emitter_InterpSpawnStartDt = EmitterSpawnInfoParams[SpawnInfoIndex].y;
		Emitter_SpawnGroup = asint(EmitterSpawnInfoParams[SpawnInfoIndex].z);

		GInterpSpawnIndex = ParticleIndex - asint(EmitterSpawnInfoParams[SpawnInfoIndex].w);
	}
#line 135 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 230 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	static int RandomCounterNonDeterministic = -1;

	float rand(float x)
	{
		RandomCounterNonDeterministic -= 1;
		return rand4(GDispatchThreadId.x, EmitterTickCounter, GDispatchThreadId.x, RandomCounterNonDeterministic).x * x;
	}

	float2 rand(float2 x)
	{
		RandomCounterNonDeterministic -= 1;
		return rand4(GDispatchThreadId.x, EmitterTickCounter, GDispatchThreadId.x, RandomCounterNonDeterministic).xy * x;
	}

	float3 rand(float3 x)
	{
		RandomCounterNonDeterministic -= 1;
		return rand4(GDispatchThreadId.x, EmitterTickCounter, GDispatchThreadId.x, RandomCounterNonDeterministic).xyz * x;
	}

	float4 rand(float4 x)
	{
		RandomCounterNonDeterministic -= 1;
		return rand4(GDispatchThreadId.x, EmitterTickCounter, GDispatchThreadId.x, RandomCounterNonDeterministic).xyzw * x;
	}


	int rand(int x)
	{
		RandomCounterNonDeterministic -= 1;
		return int(rand4(GDispatchThreadId.x, EmitterTickCounter, GDispatchThreadId.x, RandomCounterNonDeterministic).x * (x+1));
	}
#line 331 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	static uint GSpawnStartInstance;
#line 335 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	uint UpdateStartInstance;
	uint ShaderStageIndex;
	int IterationInterfaceCount;
	uint SpawnedInstances;

	uint ComponentBufferSizeRead;
	uint ComponentBufferSizeWrite;
	int NumEventsPerParticle;
	int NumParticlesPerEvent;
	uint CopyInstancesBeforeStart;

	uint SimStart;
#line 350 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	Buffer<float> InputFloat;
	Buffer<int> InputInt;
	RWBuffer<int> RWOutputInt;
	RWBuffer<float> RWOutputFloat;

	RWBuffer<uint> RWInstanceCounts;
	uint ReadInstanceCountOffset;
	uint WriteInstanceCountOffset;
#line 365 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int ExecIndex()
	{
		if (GCurrentPhase == 0)
		{
			return UpdateStartInstance + GDispatchThreadId.x - GSpawnStartInstance;
		}
		else
		{
			return UpdateStartInstance + GDispatchThreadId.x;
		}
	}
#line 381 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int AcquireIndex(uniform int DataSetID, bool bDoAcquire)
	{

		int MustBe0[1];
		MustBe0[DataSetID] = 0;
#line 407 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			int PrevIdx = GSpawnStartInstance + SpawnedInstances;
			if(bDoAcquire == true)
			{

				uint RetPrevIdx;

				InterlockedAdd(RWInstanceCounts[WriteInstanceCountOffset], (uint)1U, RetPrevIdx);
				PrevIdx = (int)RetPrevIdx;
			}
			return PrevIdx;

	}
#line 424 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float InputDataFloat(int DataSetIndex, int RegisterIdx, int InstanceIdx)
	{
		return InputFloat[RegisterIdx*ComponentBufferSizeRead + InstanceIdx];
	}

	int InputDataInt(int DataSetIndex, int RegisterIdx, int InstanceIdx)
	{
		return InputInt[RegisterIdx*ComponentBufferSizeRead + InstanceIdx];
	}

	bool InputDataBool(int DataSetIndex, int RegisterIdx, int InstanceIdx)
	{
		return InputInt[RegisterIdx*ComponentBufferSizeRead + InstanceIdx] == -1;
	}
#line 444 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value)
	{
		RWOutputFloat[RegisterIndex*ComponentBufferSizeWrite + InstanceIndex + UpdateStartInstance] = Value;
	}

	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value)
	{
		RWOutputInt[RegisterIndex*ComponentBufferSizeWrite + InstanceIndex + UpdateStartInstance] = Value;
	}

	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value)
	{
		RWOutputInt[RegisterIndex*ComponentBufferSizeWrite + InstanceIndex + UpdateStartInstance] = Value ? -1 : 0;
	}

	void EnterStatScope(int ID) {}
	void ExitStatScope() {}
#line 466 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bIsPersistent, const bool bIsValid)
	{





			return AcquireIndex(DataSetID,bIsValid);

	}
#line 478 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"
struct NiagaraRandInfo
{
	int Seed1;
	int Seed2;
	int Seed3;
};

struct MeshTriCoordinate
{
	int Tri;
	float3 BaryCoord;
};

cbuffer FEmitterParameters
{
	float Constants_Emitter_UniformRangedFloat005_Minimum;
	float Constants_Emitter_UniformRangedFloat005_Maximum;
	int Constants_Emitter_UniformRangedFloat005_RandomSeed;
	int Emitter_RandomSeed;
	int Engine_System_TickCount;
	float Constants_Emitter_UniformRangedFloat004_Minimum;
	float Constants_Emitter_UniformRangedFloat004_Maximum;
	int Constants_Emitter_UniformRangedFloat004_RandomSeed;
	float4 Engine_Owner_Position;
	float Constants_Emitter_UniformRangedFloat003_Minimum;
	float Constants_Emitter_UniformRangedFloat003_Maximum;
	int Constants_Emitter_UniformRangedFloat003_RandomSeed;
	float4 Constants_Emitter_InitializeParticle_Color;
	float4 Constants_Emitter_InitializeParticle_SpriteSize;
	float4 Constants_Emitter_InitializeParticle_MeshScale;
	float Emitter_Age;
	float4x4 Engine_Owner_SystemLocalToWorld;
	float4x4 Engine_Owner_SystemWorldToLocal;
	float4x4 Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 Engine_Owner_SystemWorldToLocalNoScale;
	float Engine_DeltaTime;
	float Constants_Emitter_Color_ScaleAlpha;
	float Emitter_AlphaScale;
	float Constants_Emitter_FloatFromCurve001_ScaleCurve;
	float Constants_Emitter_Collision_ParticleRadiusScale;
	float4x4 Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 Engine_Owner_SystemLocalToWorldTransposed;
	float Constants_Emitter_Collision_Friction;
	float Constants_Emitter_Collision_StaticFriction;
	float Constants_Emitter_Collision_StaticFrictionEngagementSpeed;
	float Constants_Emitter_Collision_Restitution;
	float Constants_Emitter_Collision_RandomizeCollisionNormal;
	float Constants_Emitter_Collision_FrictionDuringaBounce;
	float Constants_Emitter_Collision_Maximumtimeoffscreen;
	float Constants_Emitter_Collision_PercentageofPenetrationBeforeRest;
	float Constants_Emitter_Collision_RestStateTimeRange;
	float Constants_Emitter_Collision_MaximumPenetrationCorrectionDistance;
	float4 Constants_Emitter_Collision_ValidCollisionPlaneNormalForRest;
	float Constants_Emitter_Collision_MinimumCollisionNormalASC47RestNormalAlignmentPercentage;
	float Constants_Emitter_Collision_AdvancedAgingRate;
	float Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	float Engine_Time;
	float Engine_InverseDeltaTime;
	int Engine_ExecutionCount;
	float Emitter_SpawnRate;
	int Engine_Emitter_TotalSpawnedParticles;
	float PREV_Constants_Emitter_UniformRangedFloat005_Minimum;
	float PREV_Constants_Emitter_UniformRangedFloat005_Maximum;
	int PREV_Constants_Emitter_UniformRangedFloat005_RandomSeed;
	int PREV_Emitter_RandomSeed;
	int PREV_Engine_System_TickCount;
	float PREV_Constants_Emitter_UniformRangedFloat004_Minimum;
	float PREV_Constants_Emitter_UniformRangedFloat004_Maximum;
	int PREV_Constants_Emitter_UniformRangedFloat004_RandomSeed;
	float4 PREV_Engine_Owner_Position;
	float PREV_Constants_Emitter_UniformRangedFloat003_Minimum;
	float PREV_Constants_Emitter_UniformRangedFloat003_Maximum;
	int PREV_Constants_Emitter_UniformRangedFloat003_RandomSeed;
	float4 PREV_Constants_Emitter_InitializeParticle_Color;
	float4 PREV_Constants_Emitter_InitializeParticle_SpriteSize;
	float4 PREV_Constants_Emitter_InitializeParticle_MeshScale;
	float PREV_Emitter_Age;
	float4x4 PREV_Engine_Owner_SystemLocalToWorld;
	float4x4 PREV_Engine_Owner_SystemWorldToLocal;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalNoScale;
	float PREV_Engine_DeltaTime;
	float PREV_Constants_Emitter_Color_ScaleAlpha;
	float PREV_Emitter_AlphaScale;
	float PREV_Constants_Emitter_FloatFromCurve001_ScaleCurve;
	float PREV_Constants_Emitter_Collision_ParticleRadiusScale;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldTransposed;
	float PREV_Constants_Emitter_Collision_Friction;
	float PREV_Constants_Emitter_Collision_StaticFriction;
	float PREV_Constants_Emitter_Collision_StaticFrictionEngagementSpeed;
	float PREV_Constants_Emitter_Collision_Restitution;
	float PREV_Constants_Emitter_Collision_RandomizeCollisionNormal;
	float PREV_Constants_Emitter_Collision_FrictionDuringaBounce;
	float PREV_Constants_Emitter_Collision_Maximumtimeoffscreen;
	float PREV_Constants_Emitter_Collision_PercentageofPenetrationBeforeRest;
	float PREV_Constants_Emitter_Collision_RestStateTimeRange;
	float PREV_Constants_Emitter_Collision_MaximumPenetrationCorrectionDistance;
	float4 PREV_Constants_Emitter_Collision_ValidCollisionPlaneNormalForRest;
	float PREV_Constants_Emitter_Collision_MinimumCollisionNormalASC47RestNormalAlignmentPercentage;
	float PREV_Constants_Emitter_Collision_AdvancedAgingRate;
	float PREV_Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float PREV_Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	float PREV_Engine_Time;
	float PREV_Engine_InverseDeltaTime;
	int PREV_Engine_ExecutionCount;
	float PREV_Emitter_SpawnRate;
	int PREV_Engine_Emitter_TotalSpawnedParticles;
}

struct FParamMap0_UpdateAge
{
	float DeltaTime;
	float Lifetime;
};

struct FParamMap0_UniformRangedFloat005
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat004
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat003
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_Temp_Collision
{
	float3 PreviousForce;
	float3 PreviousPosition;
	float3 PreviousVelocity;
};

struct FParamMap0_Temp
{
	FParamMap0_Temp_Collision Collision;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float SpeedLimit;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_SmoothLerpOverTime_Vector
{
	float ConvergenceRate;
	float3 SmoothValue;
	float3 TargetValue;
};

struct FParamMap0_SetVariables_C24DA8694ED1CFDB365D9582A5B9F487_Particles
{
	float3 Position;
};

struct FParamMap0_SetVariables_C24DA8694ED1CFDB365D9582A5B9F487
{
	FParamMap0_SetVariables_C24DA8694ED1CFDB365D9582A5B9F487_Particles Particles;
};

struct FParamMap0_SetVariables_AF432E7748615D46285AADB56FA3CE5E_Particles
{
	float3 NewPosition;
};

struct FParamMap0_SetVariables_AF432E7748615D46285AADB56FA3CE5E
{
	FParamMap0_SetVariables_AF432E7748615D46285AADB56FA3CE5E_Particles Particles;
};

struct FParamMap0_Physics_Collision_CollisionQueryAndResponse001
{
	bool CollidesThisFrame;
};

struct FParamMap0_Physics_Collision_CollisionQueryAndResponse
{
	bool CollidesThisFrame;
};

struct FParamMap0_Physics_Collision
{
	FParamMap0_Physics_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_Physics_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
};

struct FParamMap0_Physics
{
	FParamMap0_Physics_Collision Collision;
	float DeltaTime;
	float Drag;
	float3 Force;
};

struct FParamMap0_Particles_Collision_CollisionQueryAndResponse001
{
	int CollisionID;
};

struct FParamMap0_Particles_Collision_CollisionQueryAndResponse
{
	int CollisionID;
};

struct FParamMap0_Particles_Collision
{
	FParamMap0_Particles_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_Particles_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
	float OffscreenCounter;
};

struct FParamMap0_Particles
{
	float Age;
	FParamMap0_Particles_Collision Collision;
	float4 Color;
	bool HasCollided;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float3 NewPosition;
	float NormalizedAge;
	int NumberOfCollisions;
	float3 Position;
	float3 PreviousVelocity;
	float RestCounter;
	float3 Scale;
	float SpriteRotation;
	float2 SpriteSize;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_SampleTexture
{
	float4 SampledColor;
};

struct FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse001
{
	bool DepthBasedCollisionParticleOccluded;
	bool ParticleOnScreen;
};

struct FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse
{
	bool DepthBasedCollisionParticleOccluded;
	bool ParticleOnScreen;
};

struct FParamMap0_OUTPUT_VAR_Collision
{
	float3 Collision1Normal;
	bool Collision1Valid;
	float3 Collision2Normal;
	bool Collision2Valid;
	FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
	float3 CombinedCollisionNormal;
	bool Valid;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_Collision Collision;
	FParamMap0_OUTPUT_VAR_SampleTexture SampleTexture;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_NormalizedAngleToDegrees001
{
	float NormalizedAngle;
};

struct FParamMap0_MakeVector3_FromColor001
{
	float4 Color;
};

struct FParamMap0_Local_SolveForcesAndVelocity_Physics
{
	float3 Force;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float DeltaTime;
	float Mass;
	FParamMap0_Local_SolveForcesAndVelocity_Physics Physics;
};

struct FParamMap0_Local_Collision_CollisionQueryAndResponse_Physics
{
	float DeltaTime;
};

struct FParamMap0_Local_Collision_CollisionQueryAndResponse001_Physics
{
	float DeltaTime;
};

struct FParamMap0_Local_Collision_CollisionQueryAndResponse001
{
	float3 AttemptedMovementThisUpdate;
	float3 ForceContribution;
	float3 FrictionForceVectorInNewtons;
	float3 FrictionForceVelocityVector;
	bool InitialDataInstanceAlive;
	float3 InitialForceDividedByMass;
	float NormalForceInNewtons;
	float PercentageOfTickDedicatedToUpdatingPosition;
	FParamMap0_Local_Collision_CollisionQueryAndResponse001_Physics Physics;
	float3 PlaneNormal;
	float3 PlanePivotPoint;
	float3 ReflectedVelocity;
	float3 ReflectedVelocityWithFrictionApplied;
	bool RemoveRestitution;
	float3 ReturnedCollisionNormal;
	bool ReturnedCollisionValidBool;
	float3 ReturnedCollisionWorldPosition;
	float ReturnedFriction;
	float ReturnedRestitution;
	float TickDeltaForThisCollisionUpdate;
	float3 TraceDirection;
	float3 TraceOrigin;
	float3 TraceVector;
	float3 TraceWorldEnd;
	float3 TraceWorldStart;
};

struct FParamMap0_Local_Collision_CollisionQueryAndResponse
{
	float3 AttemptedMovementThisUpdate;
	float3 ForceContribution;
	float3 FrictionForceVectorInNewtons;
	float3 FrictionForceVelocityVector;
	bool InitialDataInstanceAlive;
	float3 InitialForceDividedByMass;
	float NormalForceInNewtons;
	float PercentageOfTickDedicatedToUpdatingPosition;
	FParamMap0_Local_Collision_CollisionQueryAndResponse_Physics Physics;
	float3 PlaneNormal;
	float3 PlanePivotPoint;
	float3 ReflectedVelocity;
	float3 ReflectedVelocityWithFrictionApplied;
	bool RemoveRestitution;
	float3 ReturnedCollisionNormal;
	bool ReturnedCollisionValidBool;
	float3 ReturnedCollisionWorldPosition;
	float ReturnedFriction;
	float ReturnedRestitution;
	float TickDeltaForThisCollisionUpdate;
	float3 TraceDirection;
	float3 TraceOrigin;
	float3 TraceVector;
	float3 TraceWorldEnd;
	float3 TraceWorldStart;
};

struct FParamMap0_Local_Collision
{
	FParamMap0_Local_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_Local_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
	float ParticleRadius;
};

struct FParamMap0_Local
{
	FParamMap0_Local_Collision Collision;
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
	bool UpdateMeshRotation;
};

struct FParamMap0_Interpolation
{
	float Emitter_InterpSpawnStartDt;
	int Emitter_SpawnGroup;
	float Emitter_SpawnInterval;
	int InterpSpawn_Index;
	float InterpSpawn_InvSpawnTime;
	float InterpSpawn_InvUpdateTime;
	float InterpSpawn_SpawnTime;
	float InterpSpawn_UpdateTime;
	float SpawnInterp;
};

struct FParamMap0_InitializeParticle
{
	float4 Color;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float3 MeshScale;
	float3 Position;
	float SpriteRotation;
	float2 SpriteSize;
	bool WriteColor;
	bool WriteLifetime;
	bool WriteMass;
	bool WriteMaterialRandom;
	bool WritePosition;
	bool WriteScale;
	bool WriteSpriteRotation;
	bool WriteSpriteSize;
};

struct FParamMap0_FloatFromCurve001
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_Engine_System
{
	int TickCount;
};

struct FParamMap0_Engine_Owner
{
	float3 Position;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemLocalToWorldTransposed;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
	float4x4 SystemWorldToLocalTransposed;
};

struct FParamMap0_Engine_Emitter
{
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	int ExecutionCount;
	float InverseDeltaTime;
	FParamMap0_Engine_Owner Owner;
	FParamMap0_Engine_System System;
	float Time;
};

struct FParamMap0_Emitter
{
	float Age;
	float AlphaScale;
	bool LocalSpace;
	int RandomSeed;
	float SpawnRate;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_Constants_Emitter_UniformRangedFloat005
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_UniformRangedFloat004
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_UniformRangedFloat003
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float SpeedLimit;
};

struct FParamMap0_Constants_Emitter_InitializeParticle
{
	float4 Color;
	float3 MeshScale;
	float2 SpriteSize;
};

struct FParamMap0_Constants_Emitter_FloatFromCurve001
{
	float ScaleCurve;
};

struct FParamMap0_Constants_Emitter_Color
{
	float ScaleAlpha;
};

struct FParamMap0_Constants_Emitter_Collision
{
	float AdvancedAgingRate;
	float Friction;
	float FrictionDuringaBounce;
	float MaximumPenetrationCorrectionDistance;
	float Maximumtimeoffscreen;
	float MinimumCollisionNormalASC47RestNormalAlignmentPercentage;
	float ParticleRadiusScale;
	float PercentageofPenetrationBeforeRest;
	float RandomizeCollisionNormal;
	float Restitution;
	float RestStateTimeRange;
	float StaticFriction;
	float StaticFrictionEngagementSpeed;
	float3 ValidCollisionPlaneNormalForRest;
};

struct FParamMap0_Constants_Emitter
{
	FParamMap0_Constants_Emitter_Collision Collision;
	FParamMap0_Constants_Emitter_Color Color;
	FParamMap0_Constants_Emitter_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_Constants_Emitter_InitializeParticle InitializeParticle;
	FParamMap0_Constants_Emitter_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Constants_Emitter_UniformRangedFloat003 UniformRangedFloat003;
	FParamMap0_Constants_Emitter_UniformRangedFloat004 UniformRangedFloat004;
	FParamMap0_Constants_Emitter_UniformRangedFloat005 UniformRangedFloat005;
};

struct FParamMap0_Constants
{
	FParamMap0_Constants_Emitter Emitter;
};

struct FParamMap0_ColorFromCurve
{
	float CurveIndex;
};

struct FParamMap0_Color
{
	float4 Color;
	float ScaleAlpha;
	float3 ScaleColor;
};

struct FParamMap0_Collision_CollisionQueryAndResponse001
{
	bool AllowOffscreenDepthBufferParticlesToLive;
	float BounceCollisionFriction;
	bool CollisionEnabled;
	float CollisionNormalRandomizationPercentage;
	int CPUFrictionMergeType;
	float DeltaTime;
	float DepthBufferBackfaceThickness;
	float DynamicFrictionCoefficient;
	bool KillOccludedParticles;
	float MaxTraceLength;
	float ParticleRadius;
	float ParticleRestitutionCoeffiecient;
	bool RandomizeCollisionNormal;
	float StaticFrictionCoefficient;
	float StaticFrictionEngagementSpeed;
	float TraceVectorLengthMultiplier;
	bool UpdateRotationalVelocity;
};

struct FParamMap0_Collision_CollisionQueryAndResponse
{
	bool AllowOffscreenDepthBufferParticlesToLive;
	float BounceCollisionFriction;
	bool CollisionEnabled;
	float CollisionNormalRandomizationPercentage;
	int CPUFrictionMergeType;
	float DeltaTime;
	float DepthBufferBackfaceThickness;
	float DynamicFrictionCoefficient;
	bool KillOccludedParticles;
	float MaxTraceLength;
	float ParticleRadius;
	float ParticleRestitutionCoeffiecient;
	bool RandomizeCollisionNormal;
	float StaticFrictionCoefficient;
	float StaticFrictionEngagementSpeed;
	float TraceVectorLengthMultiplier;
	bool UpdateRotationalVelocity;
};

struct FParamMap0_Collision_Collision_CollisionQueryAndResponse001
{
	float PenetrationDistance;
};

struct FParamMap0_Collision_Collision_CollisionQueryAndResponse
{
	float PenetrationDistance;
};

struct FParamMap0_Collision_Collision
{
	FParamMap0_Collision_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_Collision_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
};

struct FParamMap0_Collision
{
	float AdvancedAgingRate;
	bool AllowOffscreenDepthBufferCollisionParticlesToLiveAfteraBounce;
	FParamMap0_Collision_Collision Collision;
	bool CollisionEnabled;
	FParamMap0_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
	bool ControlRestStateViaSurfaceNormal;
	float DistanceToCollision;
	bool EnableRestState;
	float Friction;
	float FrictionDuringaBounce;
	bool IsResting;
	bool KillOccludedParticles;
	float MaximumPenetrationCorrectionDistance;
	float Maximumtimeoffscreen;
	float MinimumCollisionNormalASC47RestNormalAlignmentPercentage;
	float3 Normal;
	float ParticleRadiusScale;
	float3 ParticleRelativeCollisionLocation;
	float3 ParticleWorldPosition;
	float PercentageofPenetrationBeforeRest;
	float RandomizeCollisionNormal;
	bool RandomizeCollisionNormalVector;
	float Restitution;
	float RestStateTimeRange;
	float Size;
	float StaticFriction;
	float StaticFrictionEngagementSpeed;
	bool Valid;
	float3 ValidCollisionPlaneNormalForRest;
	float3 Velocity;
	float3 WorldPosition;
};

struct FParamMap0
{
	FParamMap0_Collision Collision;
	FParamMap0_Color Color;
	FParamMap0_ColorFromCurve ColorFromCurve;
	FParamMap0_Constants Constants;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Emitter Emitter;
	FParamMap0_Engine Engine;
	FParamMap0_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_InitializeParticle InitializeParticle;
	FParamMap0_Interpolation Interpolation;
	FParamMap0_Local Local;
	FParamMap0_MakeVector3_FromColor001 MakeVector3_FromColor001;
	FParamMap0_NormalizedAngleToDegrees001 NormalizedAngleToDegrees001;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_Physics Physics;
	FParamMap0_SetVariables_AF432E7748615D46285AADB56FA3CE5E SetVariables_AF432E7748615D46285AADB56FA3CE5E;
	FParamMap0_SetVariables_C24DA8694ED1CFDB365D9582A5B9F487 SetVariables_C24DA8694ED1CFDB365D9582A5B9F487;
	FParamMap0_SmoothLerpOverTime_Vector SmoothLerpOverTime_Vector;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Temp Temp;
	FParamMap0_UniformRangedFloat003 UniformRangedFloat003;
	FParamMap0_UniformRangedFloat004 UniformRangedFloat004;
	FParamMap0_UniformRangedFloat005 UniformRangedFloat005;
	FParamMap0_UpdateAge UpdateAge;
};

struct FSimulationContext
{
	FParamMap0 MapSpawn;
	FParamMap0 MapUpdate;
};

static float HackSpawnInterp = 1.0;
void GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context);
void RandomRange_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float Out_Result, inout FSimulationContext Context);
void UniformRangedFloat005_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void UniformRangedFloat004_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void NormalizedAngleToDegrees001_Emitter_Func_(out float Out_NewOutput, inout FSimulationContext Context);
void ParticleOwnerPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context);
void UniformRangedFloat003_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void InitializeParticle_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context);
void RandomRange_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context);
void InitializeParticle_Emitter_Func_(inout FSimulationContext Context);
void RandomTriCoord_ParticlesStaticMesh(out MeshTriCoordinate Out_Coord);
void GetTriPositionWS_ParticlesStaticMesh(MeshTriCoordinate In_Coord, out float3 Out_Position);
void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context);
void SampleMeshScript001_TransformPosition_Emitter_Func_(float3 In_InPosition, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutPosition, inout FSimulationContext Context);
void SelectV3Channel_Func_(float3 In_VECTOR_VAR, int In_TargetChannel, out float Out_Float, inout FSimulationContext Context);
void SmoothLerpOverTime_Func_(float In_SmoothValue, float In_TargetValue, float In_ConvergenceRate, float In_DeltaTime, out float Out_NewSmoothValue, inout FSimulationContext Context);
void RandomTriCoord_ParticlesStaticMesh2(out MeshTriCoordinate Out_Coord);
void GetTriPositionWS_ParticlesStaticMesh2(MeshTriCoordinate In_Coord, out float3 Out_Position);
void SmoothLerpOverTime_Func_(float3 In_SmoothValue, float3 In_TargetValue, float In_ConvergenceRate, float In_DeltaTime, out float3 Out_NewSmoothValue, inout FSimulationContext Context);
void RandomTriCoord_ParticlesStaticMesh3(out MeshTriCoordinate Out_Coord);
void GetTriPositionWS_ParticlesStaticMesh3(MeshTriCoordinate In_Coord, out float3 Out_Position);
void SampleMeshScript001_Emitter_Func_(inout FSimulationContext Context);
void SetVariables_AF432E7748615D46285AADB56FA3CE5E_Emitter_Func_(inout FSimulationContext Context);
void UpdateAge_Emitter_Func_(inout FSimulationContext Context);
void SampleColorCurve_ColorColorCurve(float In_X, out float4 Out_Value);
void ColorFromCurve_Emitter_Func_(out float4 Out_Value, inout FSimulationContext Context);
void MakeVector3_FromColor001_Emitter_Func_(out float3 Out_Vector, inout FSimulationContext Context);
void Color_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_ConvergenceRateParticlesPositionFloatCurve(float In_X, out float Out_Value);
void FloatFromCurve001_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void SmoothLerpOverTime_Vector_Emitter_Func_(out float3 Out_NewSmoothValue, inout FSimulationContext Context);
void SetVariables_C24DA8694ED1CFDB365D9582A5B9F487_Emitter_Func_(inout FSimulationContext Context);
void CalculateRadiusFromSpriteSize_Particle_Method_NewEnumerator0_Func_(float2 In_SpriteSize, out float Out_Radius, inout FSimulationContext Context);
void Collision_TransformPosition_Emitter_Func_(float3 In_InPosition, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutPosition, inout FSimulationContext Context);
void Collision_TransformVector002_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void Collision_TransformVector003_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context);
void QuerySceneDepthGPU_CollisionCollisionQueryAndResponseQuery(float3 In_DepthSamplePosWorld, out float Out_SceneDepth, out float3 Out_CameraPosWorld, out bool Out_IsInsideView, out float3 Out_SamplePosWorld, out float3 Out_SampleWorldNormal);
void SceneDepthTest_Func_(float In_CollisionBackfaceThickness, float3 In_ParticlePosition, float In_ParticleRadius, float3 In_StartTrace, float3 In_EndTrace, bool In_KillOccludedParticles, out float3 Out_ImpactPosition, out float3 Out_ImpactNormal, out bool Out_Occluded, out bool Out_Collides, out bool Out_Onscreentest, out bool Out_KillBecauseofOcclusion, inout FSimulationContext Context);
void PlaneSphereCollisionDetection_Func_(float3 In_PlaneNormal, float3 In_PlanePivotPoint, float3 In_InitialSphereLocation, float3 In_SpherePositionDelta, float In_CollisionRadius, float In_PhysicsDeltaTime, bool In_Teleportparticlesifinitiallyplacedwithinacollisionsurface, out bool Out_Collides, out float3 Out_IntersectionLocation, out float3 Out_PreASC45IntersectionSphereCenterLocation, out float3 Out_InitialPositionRelativeCollisionLocation, out float Out_TimeElapsedToCollision, out float Out_RemainingTimePostCollision, out float Out_PercentageofTimeUsedToPerformCollision, out float Out_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision, out float Out_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane, out bool Out_Particlewasinitializedwithinacollisionsurface, inout FSimulationContext Context);
void RandomRange_Func_(float2 In_Min, float2 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float2 Out_Result, inout FSimulationContext Context);
void CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_(bool In_InputsAreNormalized, float3 In_From, float3 In_To, out float4 Out_Result);
void FindQuatBetween_Func_(float3 In_From, float3 In_To, bool In_InputsAreNormalized, out float4 Out_NewOutput, inout FSimulationContext Context);
void MultiplyVectorWithQuaternion_Func_(float3 In_VECTOR_VAR, float4 In_Quaternion, out float3 Out_Vector, inout FSimulationContext Context);
void RandomizeCollisionNormals_Func_(float3 In_ConeAxis, float In_Scale, float In_Spread, out float3 Out_Ouput, inout FSimulationContext Context);
void ReflectVector_Func_(float3 In_InVector, float3 In_Normal, out float3 Out_Reflected, inout FSimulationContext Context);
void CentimeterMeterConversion_Func_(float3 In_INPUT_VAR, out float3 Out_CentimeterstoMeters, out float3 Out_MeterstoCentimeters, inout FSimulationContext Context);
void ProjectVectorOnPlane_Func_(float3 In_VECTOR_VAR, float3 In_Normal, out float3 Out_Ouput, inout FSimulationContext Context);
void Collision_CollisionQueryAndResponse_Emitter_Func_(inout FSimulationContext Context);
void Collision_CollisionQueryAndResponse001_Emitter_Func_(inout FSimulationContext Context);
void Collision_TransformPosition001_Emitter_Func_(float3 In_InPosition, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutPosition, inout FSimulationContext Context);
void Collision_TransformVector001_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void Collision_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void Collision_Emitter_Func_(inout FSimulationContext Context);
void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context)
{
	bool Constant27 = false;
	int Constant28 = 0;
	bool Result = In_RandomnessMode == Constant28;
	bool Result1 = Constant27 && Result;
	int Constant29 = 1;
	bool Result2 = In_RandomnessMode == Constant29;
	bool Result3 = Result1 || Result2;
	int Seed_IfResult;
	if(In_OverrideSeed)
	{
	Seed_IfResult = In_Seed;
	}
	else
	{
	Seed_IfResult = Context.MapSpawn.Emitter.RandomSeed;
	}
	int Constant30 = 0;
	int Constant31 = 0;
	int Seed1_IfResult;
	int Seed2_IfResult;
	int Seed3_IfResult;
	if(In_FixedOverrideSeed)
	{
	Seed1_IfResult = Seed_IfResult;
	Seed2_IfResult = Constant30;
	Seed3_IfResult = Constant31;
	}
	else
	{
	Seed1_IfResult = Context.MapSpawn.Particles.UniqueID;
	Seed2_IfResult = Context.MapSpawn.Engine.System.TickCount;
	Seed3_IfResult = Seed_IfResult;
	}
	int Constant32 = -1;
	int Constant33 = -1;
	int Constant34 = -1;
	int Seed1_IfResult1;
	int Seed2_IfResult1;
	int Seed3_IfResult1;
	if(Result3)
	{
	Seed1_IfResult1 = Seed1_IfResult;
	Seed2_IfResult1 = Seed2_IfResult;
	Seed3_IfResult1 = Seed3_IfResult;
	}
	else
	{
	Seed1_IfResult1 = Constant32;
	Seed2_IfResult1 = Constant33;
	Seed3_IfResult1 = Constant34;
	}
	NiagaraRandInfo Output1;
	Output1.Seed1 = Seed1_IfResult1;
	Output1.Seed2 = Seed2_IfResult1;
	Output1.Seed3 = Seed3_IfResult1;
	Out_RandomInfo = Output1;
	Out_UseDeterministicRandoms = Result3;
}

void RandomRange_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant23 = (0);
	bool Constant24 = false;
	int Constant25 = 0;
	int Constant26 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo;
	bool GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms;
	GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_(In_Seed, Constant23, In_OverrideSeed, Constant25, Constant26, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo, GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms, Context);
	float Result4 = In_Max - In_Min;
	int Seed1;
	int Seed2;
	int Seed3;
	Seed1 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo.Seed1;
	Seed2 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo.Seed2;
	Seed3 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo.Seed3;
	float Result5 = rand(Result4, Seed1, Seed2, Seed3);
	float Result6 = rand(Result4);
	float Random_IfResult;
	if(GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms)
	{
	Random_IfResult = Result5;
	}
	else
	{
	Random_IfResult = Result6;
	}
	float Result7 = In_Min + Random_IfResult;
	Out_Result = Result7;
}

void UniformRangedFloat005_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant21 = 0;
	bool Constant22 = false;
	int Mode_IfResult;
	bool Override_IfResult;
	if(Context.MapSpawn.UniformRangedFloat005.OverrideRandomness)
	{
	Mode_IfResult = Context.MapSpawn.UniformRangedFloat005.RandomnessMode;
	Override_IfResult = Context.MapSpawn.UniformRangedFloat005.OverrideSeed;
	}
	else
	{
	Mode_IfResult = Constant21;
	Override_IfResult = Constant22;
	}
	float RandomRange_Func_Output_Result;
	RandomRange_Func_(Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.Minimum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.Maximum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.RandomSeed, Mode_IfResult, Override_IfResult, Context.MapSpawn.UniformRangedFloat005.FixedRandomSeed, RandomRange_Func_Output_Result, Context);
	Out_UniformRangedFloat = RandomRange_Func_Output_Result;
}

void UniformRangedFloat004_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant39 = 0;
	bool Constant40 = false;
	int Mode_IfResult1;
	bool Override_IfResult1;
	if(Context.MapSpawn.UniformRangedFloat004.OverrideRandomness)
	{
	Mode_IfResult1 = Context.MapSpawn.UniformRangedFloat004.RandomnessMode;
	Override_IfResult1 = Context.MapSpawn.UniformRangedFloat004.OverrideSeed;
	}
	else
	{
	Mode_IfResult1 = Constant39;
	Override_IfResult1 = Constant40;
	}
	float RandomRange_Func_Output_Result1;
	RandomRange_Func_(Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.Minimum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.Maximum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.RandomSeed, Mode_IfResult1, Override_IfResult1, Context.MapSpawn.UniformRangedFloat004.FixedRandomSeed, RandomRange_Func_Output_Result1, Context);
	Out_UniformRangedFloat = RandomRange_Func_Output_Result1;
}

void NormalizedAngleToDegrees001_Emitter_Func_(out float Out_NewOutput, inout FSimulationContext Context)
{
	float Constant43 = 360;
	float Result8 = Context.MapSpawn.NormalizedAngleToDegrees001.NormalizedAngle * Constant43;
	Out_NewOutput = Result8;
}

void ParticleOwnerPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant46 = false;
	float3 Constant47 = float3(0,0,0);
	float3 Vector_IfResult;
	if(Constant46)
	{
	Vector_IfResult = Constant47;
	}
	else
	{
	Vector_IfResult = Context.MapSpawn.Engine.Owner.Position;
	}
	Out_OutPosition = Vector_IfResult;
}

void UniformRangedFloat003_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant54 = 0;
	bool Constant55 = false;
	int Mode_IfResult2;
	bool Override_IfResult2;
	if(Context.MapSpawn.UniformRangedFloat003.OverrideRandomness)
	{
	Mode_IfResult2 = Context.MapSpawn.UniformRangedFloat003.RandomnessMode;
	Override_IfResult2 = Context.MapSpawn.UniformRangedFloat003.OverrideSeed;
	}
	else
	{
	Mode_IfResult2 = Constant54;
	Override_IfResult2 = Constant55;
	}
	float RandomRange_Func_Output_Result2;
	RandomRange_Func_(Context.MapSpawn.Constants.Emitter.UniformRangedFloat003.Minimum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat003.Maximum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat003.RandomSeed, Mode_IfResult2, Override_IfResult2, Context.MapSpawn.UniformRangedFloat003.FixedRandomSeed, RandomRange_Func_Output_Result2, Context);
	Out_UniformRangedFloat = RandomRange_Func_Output_Result2;
}

void InitializeParticle_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant58 = false;
	float3 Constant59 = float3(0,0,0);
	float3 Vector_IfResult1;
	if(Constant58)
	{
	Vector_IfResult1 = Constant59;
	}
	else
	{
	Vector_IfResult1 = Context.MapSpawn.Engine.Owner.Position;
	}
	Out_OutPosition = Vector_IfResult1;
}

void RandomRange_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant66 = (0);
	bool Constant67 = false;
	int Constant68 = 0;
	int Constant69 = (0);
	bool Constant70 = false;
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo1;
	bool GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms1;
	GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_(In_Seed, Constant66, In_OverrideSeed, Constant68, Constant69, Constant70, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo1, GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms1, Context);
	float Result9 = In_Max - In_Min;
	int Seed11;
	int Seed21;
	int Seed31;
	Seed11 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo1.Seed1;
	Seed21 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo1.Seed2;
	Seed31 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo1.Seed3;
	float Result10 = rand(Result9, Seed11, Seed21, Seed31);
	float Result11 = rand(Result9);
	float Random_IfResult1;
	if(GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms1)
	{
	Random_IfResult1 = Result10;
	}
	else
	{
	Random_IfResult1 = Result11;
	}
	float Result12 = In_Min + Random_IfResult1;
	Out_Result = Result12;
}

void InitializeParticle_Emitter_Func_(inout FSimulationContext Context)
{
	float Lifetime_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteLifetime)
	{
	Lifetime_IfResult = Context.MapSpawn.InitializeParticle.Lifetime;
	}
	else
	{
	Lifetime_IfResult = Context.MapSpawn.Particles.Lifetime;
	}
	Context.MapSpawn.Particles.Lifetime = Lifetime_IfResult;
	float4 Color_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteColor)
	{
	Color_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.Color;
	}
	else
	{
	Color_IfResult = Context.MapSpawn.Particles.Color;
	}
	Context.MapSpawn.Particles.Color = Color_IfResult;
	float Mass_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteMass)
	{
	Mass_IfResult = Context.MapSpawn.InitializeParticle.Mass;
	}
	else
	{
	Mass_IfResult = Context.MapSpawn.Particles.Mass;
	}
	Context.MapSpawn.Particles.Mass = Mass_IfResult;
	float2 SpriteSize_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteSpriteSize)
	{
	SpriteSize_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteSize;
	}
	else
	{
	SpriteSize_IfResult = Context.MapSpawn.Particles.SpriteSize;
	}
	Context.MapSpawn.Particles.SpriteSize = SpriteSize_IfResult;
	float SpriteRotation_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteSpriteRotation)
	{
	SpriteRotation_IfResult = Context.MapSpawn.InitializeParticle.SpriteRotation;
	}
	else
	{
	SpriteRotation_IfResult = Context.MapSpawn.Particles.SpriteRotation;
	}
	Context.MapSpawn.Particles.SpriteRotation = SpriteRotation_IfResult;
	float3 Scale_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteScale)
	{
	Scale_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.MeshScale;
	}
	else
	{
	Scale_IfResult = Context.MapSpawn.Particles.Scale;
	}
	Context.MapSpawn.Particles.Scale = Scale_IfResult;
	float3 Scale_IfResult1;
	if(Context.MapSpawn.InitializeParticle.WritePosition)
	{
	Scale_IfResult1 = Context.MapSpawn.InitializeParticle.Position;
	}
	else
	{
	Scale_IfResult1 = Context.MapSpawn.Particles.Position;
	}
	Context.MapSpawn.Particles.Position = Scale_IfResult1;
	float MaterialRandom_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteMaterialRandom)
	{
	MaterialRandom_IfResult = Context.MapSpawn.InitializeParticle.MaterialRandom;
	}
	else
	{
	MaterialRandom_IfResult = Context.MapSpawn.Particles.MaterialRandom;
	}
	Context.MapSpawn.Particles.MaterialRandom = MaterialRandom_IfResult;
}

void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context)
{
	int Constant75 = 0;
	bool Result13 = In_SourceSpace == Constant75;
	int Constant76 = 0;
	bool Result14 = In_DestinationSpace == Constant76;
	bool Result15 = Result13 && Result14;
	int Constant77 = 1;
	bool Result16 = In_SourceSpace == Constant77;
	int Constant78 = 1;
	bool Result17 = In_DestinationSpace == Constant78;
	bool Result18 = Result16 && Result17;
	bool Result19 = Result15 || Result18;
	int Constant79 = 2;
	bool Result20 = In_SourceSpace == Constant79;
	int Constant80 = 2;
	bool Result21 = In_DestinationSpace == Constant80;
	bool Result22 = Result20 && Result21;
	bool Result23 = Result19 || Result22;
	bool Result24 = Result13 && Result21;
	bool Result25 = Result20 && Result14;
	bool Result26 = Result24 || Result25;
	bool Result27 = In_bLocalSpace && Result26;
	bool Result28 = Result23 || Result27;
	bool Result29 = !In_bLocalSpace;
	bool Result30 = Result13 && Result17;
	bool Result31 = Result16 && Result14;
	bool Result32 = Result30 || Result31;
	bool Result33 = Result29 && Result32;
	bool Result34 = Result28 || Result33;
	bool Result35 = In_bLocalSpace && Result30;
	bool Result36 = Result20 && Result17;
	bool Result37 = Result35 || Result36;
	bool Result38 = Result29 && Result25;
	bool Result39 = Result37 || Result38;
	float4x4 Matrix_IfResult1;
	if(Result39)
	{
	Matrix_IfResult1 = In_LocalToWorldTransform;
	}
	else
	{
	Matrix_IfResult1 = In_WorldToLocalTransform;
	}
	Out_bUseOriginal = Result34;
	Out_OutTransform = Matrix_IfResult1;
}

void SampleMeshScript001_TransformPosition_Emitter_Func_(float3 In_InPosition, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant74 = false;
	float4x4 Matrix_IfResult;
	float4x4 Matrix001_IfResult;
	if(In_ApplyScale)
	{
	Matrix_IfResult = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal;
	float4x4 TransformBase_Func_Output_OutTransform;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult, Matrix001_IfResult, Constant74, TransformBase_Func_Output_bUseOriginal, TransformBase_Func_Output_OutTransform, Context);
	float3 Result40 = mul(float4(In_InPosition,1.0),TransformBase_Func_Output_OutTransform).xyz;
	float3 Vector_IfResult2;
	if(TransformBase_Func_Output_bUseOriginal)
	{
	Vector_IfResult2 = In_InPosition;
	}
	else
	{
	Vector_IfResult2 = Result40;
	}
	Out_OutPosition = Vector_IfResult2;
}

void SelectV3Channel_Func_(float3 In_VECTOR_VAR, int In_TargetChannel, out float Out_Float, inout FSimulationContext Context)
{
	int Constant82 = 0;
	bool Result41 = In_TargetChannel == Constant82;
	float X;
	float Y;
	float Z;
	X = In_VECTOR_VAR.x;
	Y = In_VECTOR_VAR.y;
	Z = In_VECTOR_VAR.z;
	int Constant83 = 1;
	bool Result42 = In_TargetChannel == Constant83;
	float float_IfResult;
	if(Result42)
	{
	float_IfResult = Y;
	}
	else
	{
	float_IfResult = Z;
	}
	float float_IfResult1;
	if(Result41)
	{
	float_IfResult1 = X;
	}
	else
	{
	float_IfResult1 = float_IfResult;
	}
	Out_Float = float_IfResult1;
}

void SmoothLerpOverTime_Func_(float In_SmoothValue, float In_TargetValue, float In_ConvergenceRate, float In_DeltaTime, out float Out_NewSmoothValue, inout FSimulationContext Context)
{
	float Result43 = In_ConvergenceRate * In_DeltaTime;
	float Constant87 = 0;
	float Constant88 = 1;
	float Result44 = clamp(Result43,Constant87,Constant88);
	float Result45 = lerp(In_SmoothValue,In_TargetValue,Result44);
	Out_NewSmoothValue = Result45;
}

void SmoothLerpOverTime_Func_(float3 In_SmoothValue, float3 In_TargetValue, float In_ConvergenceRate, float In_DeltaTime, out float3 Out_NewSmoothValue, inout FSimulationContext Context)
{
	float Result49 = In_ConvergenceRate * In_DeltaTime;
	float Constant92 = 0;
	float Constant93 = 1;
	float Result50 = clamp(Result49,Constant92,Constant93);
	float3 Result51 = lerp(In_SmoothValue,In_TargetValue,Result50);
	Out_NewSmoothValue = Result51;
}

void SampleMeshScript001_Emitter_Func_(inout FSimulationContext Context)
{
	MeshTriCoordinate RandomTriCoord_ParticlesStaticMeshOutput_Coord;
	RandomTriCoord_ParticlesStaticMesh(RandomTriCoord_ParticlesStaticMeshOutput_Coord);
	float3 GetTriPositionWS_ParticlesStaticMeshOutput_Position;
	GetTriPositionWS_ParticlesStaticMesh(RandomTriCoord_ParticlesStaticMeshOutput_Coord, GetTriPositionWS_ParticlesStaticMeshOutput_Position);
	int Constant71 = 1;
	int Constant72 = 2;
	bool Constant73 = false;
	float3 SampleMeshScript001_TransformPosition_Emitter_Func_Output_OutPosition;
	SampleMeshScript001_TransformPosition_Emitter_Func_(GetTriPositionWS_ParticlesStaticMeshOutput_Position, Constant71, Constant72, Constant73, SampleMeshScript001_TransformPosition_Emitter_Func_Output_OutPosition, Context);
	int Constant81 = 2;
	float SelectV3Channel_Func_Output_Float;
	SelectV3Channel_Func_(SampleMeshScript001_TransformPosition_Emitter_Func_Output_OutPosition, Constant81, SelectV3Channel_Func_Output_Float, Context);
	float Constant84 = 0;
	float Output11;
	Output11 = Constant84;
	float Constant85 = 200;
	float Output12;
	Output12 = Constant85;
	float Constant86 = 0.5;
	float SmoothLerpOverTime_Func_Output_NewSmoothValue;
	SmoothLerpOverTime_Func_(Output11, Output12, Constant86, Context.MapSpawn.Emitter.Age, SmoothLerpOverTime_Func_Output_NewSmoothValue, Context);
	bool Result46 = SelectV3Channel_Func_Output_Float < SmoothLerpOverTime_Func_Output_NewSmoothValue;
	float3 Vector_IfResult3;
	if(Result46)
	{
	Vector_IfResult3 = GetTriPositionWS_ParticlesStaticMeshOutput_Position;
	}
	else
	{
	Vector_IfResult3 = Context.MapSpawn.Engine.Owner.Position;
	}
	MeshTriCoordinate RandomTriCoord_ParticlesStaticMesh2Output_Coord;
	RandomTriCoord_ParticlesStaticMesh2(RandomTriCoord_ParticlesStaticMesh2Output_Coord);
	float3 GetTriPositionWS_ParticlesStaticMesh2Output_Position;
	GetTriPositionWS_ParticlesStaticMesh2(RandomTriCoord_ParticlesStaticMesh2Output_Coord, GetTriPositionWS_ParticlesStaticMesh2Output_Position);
	float Constant89 = 1;
	float Constant90 = 3;
	float Output13;
	Output13 = Constant90;
	bool Result47 = Context.MapSpawn.Emitter.Age > Output13;
	float Result48 = Context.MapSpawn.Emitter.Age - Output13;
	float Constant91 = 0;
	float float_IfResult2;
	if(Result47)
	{
	float_IfResult2 = Result48;
	}
	else
	{
	float_IfResult2 = Constant91;
	}
	float3 SmoothLerpOverTime_Func_Output_NewSmoothValue1;
	SmoothLerpOverTime_Func_(Vector_IfResult3, GetTriPositionWS_ParticlesStaticMesh2Output_Position, Constant89, float_IfResult2, SmoothLerpOverTime_Func_Output_NewSmoothValue1, Context);
	MeshTriCoordinate RandomTriCoord_ParticlesStaticMesh3Output_Coord;
	RandomTriCoord_ParticlesStaticMesh3(RandomTriCoord_ParticlesStaticMesh3Output_Coord);
	float3 GetTriPositionWS_ParticlesStaticMesh3Output_Position;
	GetTriPositionWS_ParticlesStaticMesh3(RandomTriCoord_ParticlesStaticMesh3Output_Coord, GetTriPositionWS_ParticlesStaticMesh3Output_Position);
	float Constant94 = 1;
	float Constant95 = 6;
	float Output14;
	Output14 = Constant95;
	bool Result52 = Context.MapSpawn.Emitter.Age > Output14;
	float Result53 = Context.MapSpawn.Emitter.Age - Output14;
	float Constant96 = 0;
	float float_IfResult3;
	if(Result52)
	{
	float_IfResult3 = Result53;
	}
	else
	{
	float_IfResult3 = Constant96;
	}
	float3 SmoothLerpOverTime_Func_Output_NewSmoothValue2;
	SmoothLerpOverTime_Func_(SmoothLerpOverTime_Func_Output_NewSmoothValue1, GetTriPositionWS_ParticlesStaticMesh3Output_Position, Constant94, float_IfResult3, SmoothLerpOverTime_Func_Output_NewSmoothValue2, Context);
	Context.MapSpawn.Particles.NewPosition = SmoothLerpOverTime_Func_Output_NewSmoothValue2;
}

void SetVariables_AF432E7748615D46285AADB56FA3CE5E_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapSpawn.Particles.NewPosition = Context.MapSpawn.SetVariables_AF432E7748615D46285AADB56FA3CE5E.Particles.NewPosition;
}

void UpdateAge_Emitter_Func_(inout FSimulationContext Context)
{
	float Result54 = Context.MapUpdate.Particles.Age + Context.MapUpdate.UpdateAge.DeltaTime;
	float Constant98 = 1e-05;
	float Result55 = max(Context.MapUpdate.UpdateAge.Lifetime, Constant98);
	float Constant99 = 0.0001;
	float Result56 = Result55 - Constant99;
	bool Result57 = Result54 < Result56;
	bool Constant100 = false;
	bool bool_IfResult;
	if(Result57)
	{
	bool_IfResult = Context.MapUpdate.DataInstance.Alive;
	}
	else
	{
	bool_IfResult = Constant100;
	}
	float Result58 = Result54 / Result55;
	Context.MapUpdate.DataInstance.Alive = bool_IfResult;
	Context.MapUpdate.Particles.Age = Result54;
	Context.MapUpdate.Particles.NormalizedAge = Result58;
}

void ColorFromCurve_Emitter_Func_(out float4 Out_Value, inout FSimulationContext Context)
{
	float4 SampleColorCurve_ColorColorCurveOutput_Value;
	SampleColorCurve_ColorColorCurve(Context.MapUpdate.ColorFromCurve.CurveIndex, SampleColorCurve_ColorColorCurveOutput_Value);
	Out_Value = SampleColorCurve_ColorColorCurveOutput_Value;
}

void MakeVector3_FromColor001_Emitter_Func_(out float3 Out_Vector, inout FSimulationContext Context)
{
	float3 VECTOR_VAR;
	VECTOR_VAR.x = Context.MapUpdate.MakeVector3_FromColor001.Color.r;
	VECTOR_VAR.y = Context.MapUpdate.MakeVector3_FromColor001.Color.g;
	VECTOR_VAR.z = Context.MapUpdate.MakeVector3_FromColor001.Color.b;
	Out_Vector = VECTOR_VAR;
}

void Color_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Output0;
	float Output2;
	Output0.x = Context.MapUpdate.Color.Color.r;
	Output0.y = Context.MapUpdate.Color.Color.g;
	Output0.z = Context.MapUpdate.Color.Color.b;
	Output2 = Context.MapUpdate.Color.Color.a;
	float3 Result59 = Output0 * Context.MapUpdate.Color.ScaleColor;
	float Result60 = Output2 * Context.MapUpdate.Constants.Emitter.Color.ScaleAlpha;
	float Result61 = Result60 * Context.MapUpdate.Emitter.AlphaScale;
	float4 Output01;
	Output01.g = Result59.y;
	Output01.a = Result61;
	Output01.r = Result59.x;
	Output01.b = Result59.z;
	Context.MapUpdate.Particles.Color = Output01;
}

void FloatFromCurve001_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_ConvergenceRateParticlesPositionFloatCurveOutput_Value;
	SampleCurve_ConvergenceRateParticlesPositionFloatCurve(Context.MapUpdate.FloatFromCurve001.CurveIndex, SampleCurve_ConvergenceRateParticlesPositionFloatCurveOutput_Value);
	float Result62 = SampleCurve_ConvergenceRateParticlesPositionFloatCurveOutput_Value * Context.MapUpdate.Constants.Emitter.FloatFromCurve001.ScaleCurve;
	Out_Value = Result62;
}

void SmoothLerpOverTime_Vector_Emitter_Func_(out float3 Out_NewSmoothValue, inout FSimulationContext Context)
{
	float3 SmoothLerpOverTime_Func_Output_NewSmoothValue3;
	SmoothLerpOverTime_Func_(Context.MapUpdate.SmoothLerpOverTime_Vector.SmoothValue, Context.MapUpdate.SmoothLerpOverTime_Vector.TargetValue, Context.MapUpdate.SmoothLerpOverTime_Vector.ConvergenceRate, Context.MapUpdate.Engine.DeltaTime, SmoothLerpOverTime_Func_Output_NewSmoothValue3, Context);
	Out_NewSmoothValue = SmoothLerpOverTime_Func_Output_NewSmoothValue3;
}

void SetVariables_C24DA8694ED1CFDB365D9582A5B9F487_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapUpdate.Particles.Position = Context.MapUpdate.SetVariables_C24DA8694ED1CFDB365D9582A5B9F487.Particles.Position;
}

void CalculateRadiusFromSpriteSize_Particle_Method_NewEnumerator0_Func_(float2 In_SpriteSize, out float Out_Radius, inout FSimulationContext Context)
{
	float Result63 = length(In_SpriteSize);
	float Constant146 = 0.5;
	float Result64 = Result63 * Constant146;
	Out_Radius = Result64;
}

void Collision_TransformPosition_Emitter_Func_(float3 In_InPosition, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant150 = false;
	float4x4 Matrix_IfResult2;
	float4x4 Matrix001_IfResult1;
	if(In_ApplyScale)
	{
	Matrix_IfResult2 = Context.MapUpdate.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult1 = Context.MapUpdate.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult2 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult1 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal1;
	float4x4 TransformBase_Func_Output_OutTransform1;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult2, Matrix001_IfResult1, Constant150, TransformBase_Func_Output_bUseOriginal1, TransformBase_Func_Output_OutTransform1, Context);
	float3 Result66 = mul(float4(In_InPosition,1.0),TransformBase_Func_Output_OutTransform1).xyz;
	float3 Vector_IfResult4;
	if(TransformBase_Func_Output_bUseOriginal1)
	{
	Vector_IfResult4 = In_InPosition;
	}
	else
	{
	Vector_IfResult4 = Result66;
	}
	Out_OutPosition = Vector_IfResult4;
}

void Collision_TransformVector002_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant154 = false;
	float4x4 Matrix_IfResult3;
	float4x4 Matrix001_IfResult2;
	if(In_ApplyScale)
	{
	Matrix_IfResult3 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalTransposed;
	Matrix001_IfResult2 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldTransposed;
	}
	else
	{
	Matrix_IfResult3 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult2 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal2;
	float4x4 TransformBase_Func_Output_OutTransform2;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult3, Matrix001_IfResult2, Constant154, TransformBase_Func_Output_bUseOriginal2, TransformBase_Func_Output_OutTransform2, Context);
	float3 Result67 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform2).xyz;
	float3 Vector_IfResult5;
	if(TransformBase_Func_Output_bUseOriginal2)
	{
	Vector_IfResult5 = In_InVector;
	}
	else
	{
	Vector_IfResult5 = Result67;
	}
	Out_OutVector = Vector_IfResult5;
}

void Collision_TransformVector003_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant158 = false;
	float4x4 Matrix_IfResult4;
	float4x4 Matrix001_IfResult3;
	if(In_ApplyScale)
	{
	Matrix_IfResult4 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalTransposed;
	Matrix001_IfResult3 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldTransposed;
	}
	else
	{
	Matrix_IfResult4 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult3 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal3;
	float4x4 TransformBase_Func_Output_OutTransform3;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult4, Matrix001_IfResult3, Constant158, TransformBase_Func_Output_bUseOriginal3, TransformBase_Func_Output_OutTransform3, Context);
	float3 Result68 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform3).xyz;
	float3 Vector_IfResult6;
	if(TransformBase_Func_Output_bUseOriginal3)
	{
	Vector_IfResult6 = In_InVector;
	}
	else
	{
	Vector_IfResult6 = Result68;
	}
	Out_OutVector = Vector_IfResult6;
}

void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context)
{
	float Result73 = length(In_V);
	bool Result74 = Result73 < In_Threshold;
	float Result75 = length(In_Fallback);
	float Constant188 = 1;
	float3 Vector_IfResult7;
	float float_IfResult4;
	if(Result74)
	{
	Vector_IfResult7 = In_Fallback;
	float_IfResult4 = Constant188;
	}
	else
	{
	Vector_IfResult7 = In_V;
	float_IfResult4 = Result73;
	}
	float3 Result76 = Vector_IfResult7 / float_IfResult4;
	float3 Vector_IfResult8;
	float float_IfResult5;
	if(Result74)
	{
	Vector_IfResult8 = In_Fallback;
	float_IfResult5 = Result75;
	}
	else
	{
	Vector_IfResult8 = Result76;
	float_IfResult5 = float_IfResult4;
	}
	Out_Direction = Vector_IfResult8;
	Out_Length = float_IfResult5;
	Out_BelowThreshold = Result74;
}

void SceneDepthTest_Func_(float In_CollisionBackfaceThickness, float3 In_ParticlePosition, float In_ParticleRadius, float3 In_StartTrace, float3 In_EndTrace, bool In_KillOccludedParticles, out float3 Out_ImpactPosition, out float3 Out_ImpactNormal, out bool Out_Occluded, out bool Out_Collides, out bool Out_Onscreentest, out bool Out_KillBecauseofOcclusion, inout FSimulationContext Context)
{
	float QuerySceneDepthGPU_CollisionCollisionQueryAndResponseQueryOutput_SceneDepth;
	float3 QuerySceneDepthGPU_CollisionCollisionQueryAndResponseQueryOutput_CameraPosWorld;
	bool QuerySceneDepthGPU_CollisionCollisionQueryAndResponseQueryOutput_IsInsideView;
	float3 QuerySceneDepthGPU_CollisionCollisionQueryAndResponseQueryOutput_SamplePosWorld;
	float3 QuerySceneDepthGPU_CollisionCollisionQueryAndResponseQueryOutput_SampleWorldNormal;
	QuerySceneDepthGPU_CollisionCollisionQueryAndResponseQuery(In_ParticlePosition, QuerySceneDepthGPU_CollisionCollisionQueryAndResponseQueryOutput_SceneDepth, QuerySceneDepthGPU_CollisionCollisionQueryAndResponseQueryOutput_CameraPosWorld, QuerySceneDepthGPU_CollisionCollisionQueryAndResponseQueryOutput_IsInsideView, QuerySceneDepthGPU_CollisionCollisionQueryAndResponseQueryOutput_SamplePosWorld, QuerySceneDepthGPU_CollisionCollisionQueryAndResponseQueryOutput_SampleWorldNormal);
	float3 Result82 = In_ParticlePosition - QuerySceneDepthGPU_CollisionCollisionQueryAndResponseQueryOutput_CameraPosWorld;
	float Result83 = length(Result82);
	float Result84 = Result83 - In_ParticleRadius;
	float3 Result85 = QuerySceneDepthGPU_CollisionCollisionQueryAndResponseQueryOutput_SamplePosWorld - QuerySceneDepthGPU_CollisionCollisionQueryAndResponseQueryOutput_CameraPosWorld;
	float Result86 = length(Result85);
	float Result87 = Result84 - Result86;
	float Constant192 = 0;
	bool Result88 = Result87 >= Constant192;
	float Result89 = dot(In_ParticlePosition,QuerySceneDepthGPU_CollisionCollisionQueryAndResponseQueryOutput_SampleWorldNormal);
	float Result90 = Result89 + In_ParticleRadius;
	float Result91 = dot(QuerySceneDepthGPU_CollisionCollisionQueryAndResponseQueryOutput_SamplePosWorld,QuerySceneDepthGPU_CollisionCollisionQueryAndResponseQueryOutput_SampleWorldNormal);
	float Result92 = Result90 - Result91;
	float Constant193 = 0;
	bool Result93 = Result92 >= Constant193;
	float Result94 = dot(QuerySceneDepthGPU_CollisionCollisionQueryAndResponseQueryOutput_SampleWorldNormal,In_EndTrace);
	float Result95 = Result94 - Result91 - In_ParticleRadius;
	float Constant194 = 0;
	bool Result96 = Result95 <= Constant194;
	float3 Result97 = In_EndTrace - In_StartTrace;
	float Result98 = dot(QuerySceneDepthGPU_CollisionCollisionQueryAndResponseQueryOutput_SampleWorldNormal,Result97);
	float Constant195 = 0;
	bool Result99 = Result98 < Constant195;
	bool Result100 = Result93 && Result96 && Result99;
	float Constant196 = 0;
	bool Result101 = Result87 > Constant196;
	bool Result102 = In_KillOccludedParticles && Result101;
	Out_ImpactPosition = QuerySceneDepthGPU_CollisionCollisionQueryAndResponseQueryOutput_SamplePosWorld;
	Out_ImpactNormal = QuerySceneDepthGPU_CollisionCollisionQueryAndResponseQueryOutput_SampleWorldNormal;
	Out_Occluded = Result88;
	Out_Collides = Result100;
	Out_Onscreentest = QuerySceneDepthGPU_CollisionCollisionQueryAndResponseQueryOutput_IsInsideView;
	Out_KillBecauseofOcclusion = Result102;
}

void PlaneSphereCollisionDetection_Func_(float3 In_PlaneNormal, float3 In_PlanePivotPoint, float3 In_InitialSphereLocation, float3 In_SpherePositionDelta, float In_CollisionRadius, float In_PhysicsDeltaTime, bool In_Teleportparticlesifinitiallyplacedwithinacollisionsurface, out bool Out_Collides, out float3 Out_IntersectionLocation, out float3 Out_PreASC45IntersectionSphereCenterLocation, out float3 Out_InitialPositionRelativeCollisionLocation, out float Out_TimeElapsedToCollision, out float Out_RemainingTimePostCollision, out float Out_PercentageofTimeUsedToPerformCollision, out float Out_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision, out float Out_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane, out bool Out_Particlewasinitializedwithinacollisionsurface, inout FSimulationContext Context)
{
	float3 Result110 = -(In_PlaneNormal);
	float3 Result111 = In_PlanePivotPoint - In_InitialSphereLocation;
	float Result112 = dot(Result110,Result111);
	float Result113 = Result112 - In_CollisionRadius;
	float Constant201 = 0;
	bool Result114 = Result113 < Constant201;
	bool Constant202 = true;
	float3 Result115 = Result110 * Result112;
	float3 Result116 = Result115 + In_InitialSphereLocation;
	float3 Result117 = Result113 * Result110;
	float3 Result118 = Result117 + In_InitialSphereLocation;
	float Constant203 = 0;
	float Constant204 = 0;
	float3 Result119 = In_InitialSphereLocation + In_SpherePositionDelta;
	float3 Result120 = In_PlanePivotPoint - Result119;
	float Result121 = dot(Result110,Result120);
	float Result122 = Result121 - In_CollisionRadius;
	float Constant205 = 0;
	bool Result123 = Result122 <= Constant205;
	float Result124 = abs(Result122);
	float Result125 = Result113 - Result122;
	float Result126 = abs(Result125);
	float Constant206 = 1e-06;
	float Result127 = max(Result126, Constant206);
	float Result128 = Result124 / Result127;
	float Constant207 = 0;
	bool Result129 = Result128 == Constant207;
	bool Result130 = Result114 || Result129;
	float Constant208 = 1;
	float float_IfResult6;
	if(Result130)
	{
	float_IfResult6 = Constant208;
	}
	else
	{
	float_IfResult6 = Result128;
	}
	float Result131 = 1 - float_IfResult6;
	float3 Result132 = Result131 * In_SpherePositionDelta;
	float3 Result133 = In_InitialSphereLocation + Result132;
	float3 Result134 = Result110 * In_CollisionRadius;
	float3 Result135 = Result133 + Result134;
	float3 Result136 = Result135 - Result133;
	float Result137 = In_PhysicsDeltaTime * Result131;
	float Result138 = In_PhysicsDeltaTime * float_IfResult6;
	bool Collides_IfResult;
	float3 IntersectionLocation_IfResult;
	float3 PreASC45IntersectionSphereCenterLocation_IfResult;
	float3 InitialPositionRelativeCollisionLocation_IfResult;
	float TimeElapsedToCollision_IfResult;
	float RemainingTimePostCollision_IfResult;
	float PercentageofTimeUsedToPerformCollision_IfResult;
	float InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision_IfResult;
	float UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane_IfResult;
	if(Result114)
	{
	Collides_IfResult = Constant202;
	IntersectionLocation_IfResult = Result116;
	PreASC45IntersectionSphereCenterLocation_IfResult = Result118;
	InitialPositionRelativeCollisionLocation_IfResult = Result115;
	TimeElapsedToCollision_IfResult = Constant203;
	RemainingTimePostCollision_IfResult = In_PhysicsDeltaTime;
	PercentageofTimeUsedToPerformCollision_IfResult = Constant204;
	InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision_IfResult = Result113;
	UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane_IfResult = Result122;
	}
	else
	{
	Collides_IfResult = Result123;
	IntersectionLocation_IfResult = Result135;
	PreASC45IntersectionSphereCenterLocation_IfResult = Result133;
	InitialPositionRelativeCollisionLocation_IfResult = Result136;
	TimeElapsedToCollision_IfResult = Result137;
	RemainingTimePostCollision_IfResult = Result138;
	PercentageofTimeUsedToPerformCollision_IfResult = Result131;
	InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision_IfResult = Result113;
	UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane_IfResult = Result122;
	}
	bool Constant209 = false;
	Out_Collides = Collides_IfResult;
	Out_IntersectionLocation = IntersectionLocation_IfResult;
	Out_PreASC45IntersectionSphereCenterLocation = PreASC45IntersectionSphereCenterLocation_IfResult;
	Out_InitialPositionRelativeCollisionLocation = InitialPositionRelativeCollisionLocation_IfResult;
	Out_TimeElapsedToCollision = TimeElapsedToCollision_IfResult;
	Out_RemainingTimePostCollision = RemainingTimePostCollision_IfResult;
	Out_PercentageofTimeUsedToPerformCollision = PercentageofTimeUsedToPerformCollision_IfResult;
	Out_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision = InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision_IfResult;
	Out_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane = UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane_IfResult;
	Out_Particlewasinitializedwithinacollisionsurface = Constant209;
}

void RandomRange_Func_(float2 In_Min, float2 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float2 Out_Result, inout FSimulationContext Context)
{
	int Constant220 = (0);
	bool Constant221 = false;
	int Constant222 = 0;
	int Constant223 = (0);
	bool Constant224 = false;
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo2;
	bool GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms2;
	GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_(In_Seed, Constant220, In_OverrideSeed, Constant222, Constant223, Constant224, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo2, GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms2, Context);
	float2 Result154 = In_Max - In_Min;
	int Seed12;
	int Seed22;
	int Seed32;
	Seed12 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo2.Seed1;
	Seed22 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo2.Seed2;
	Seed32 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo2.Seed3;
	float2 Result155 = rand(Result154, Seed12, Seed22, Seed32);
	float2 Result156 = rand(Result154);
	float2 Random_IfResult2;
	if(GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms2)
	{
	Random_IfResult2 = Result155;
	}
	else
	{
	Random_IfResult2 = Result156;
	}
	float2 Result157 = In_Min + Random_IfResult2;
	Out_Result = Result157;
}

void CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_(bool In_InputsAreNormalized, float3 In_From, float3 In_To, out float4 Out_Result)
{



		float NormAB = 1.0f;
	    float NormFactor = sqrt((In_From.x*In_From.x + In_From.y*In_From.y + In_From.z*In_From.z) * (In_To.x*In_To.x + In_To.y*In_To.y + In_To.z*In_To.z));

	    if (In_InputsAreNormalized)
	    {
	         NormAB = 1.0f;
	    }
	    else
	    {
	         NormAB = NormFactor;
	   }

		float w = NormAB + dot(In_From, In_To);
	    float4 Result1 = float4(In_From.y * In_To.z - In_From.z * In_To.y,
						   In_From.z * In_To.x - In_From.x * In_To.z,
						   In_From.x * In_To.y - In_From.y * In_To.x,
						   w);
		float4 Result2 = float4(-In_From.z, 0.0f, In_From.x, 0.0f);
	    float4 Result3 = float4(0.0f, -In_From.z, In_From.y, 0.0f);


	    if (abs(In_From.x) > abs(In_From.y))
	    {
	        Out_Result = Result2;
	    }
	    else
	    {
	        Out_Result = Result3;
	    }


		if (w >= 3.4e-4f * NormAB)
		{

			Out_Result = Result1;
		}

		Out_Result = normalize(Out_Result);

}

void FindQuatBetween_Func_(float3 In_From, float3 In_To, bool In_InputsAreNormalized, out float4 Out_NewOutput, inout FSimulationContext Context)
{
	float4 CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_Output_Result;
	CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_(In_InputsAreNormalized, In_From, In_To, CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_Output_Result);
	Out_NewOutput = CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_Output_Result;
}

void MultiplyVectorWithQuaternion_Func_(float3 In_VECTOR_VAR, float4 In_Quaternion, out float3 Out_Vector, inout FSimulationContext Context)
{
	float3 Output02;
	float Output17;
	Output02.x = In_Quaternion.x;
	Output02.y = In_Quaternion.y;
	Output02.z = In_Quaternion.z;
	Output17 = In_Quaternion.w;
	float Result169 = dot(Output02,In_VECTOR_VAR);
	float Constant232 = 2;
	float Result170 = Result169 * Constant232;
	float3 Result171 = Output02 * Result170;
	float Result172 = Output17 * Output17;
	float Result173 = dot(Output02,Output02);
	float Result174 = Result172 - Result173;
	float3 Result175 = Result174 * In_VECTOR_VAR;
	float3 Result176 = Result171 + Result175;
	float3 Result177 = cross(Output02,In_VECTOR_VAR);
	float Constant233 = 2;
	float Result178 = Output17 * Constant233;
	float3 Result179 = Result177 * Result178;
	float3 Result180 = Result176 + Result179;
	Out_Vector = Result180;
}

void RandomizeCollisionNormals_Func_(float3 In_ConeAxis, float In_Scale, float In_Spread, out float3 Out_Ouput, inout FSimulationContext Context)
{
	float Constant214 = 0;
	float Constant215 = 1;
	float Result152 = clamp(In_Spread,Constant214,Constant215);
	float Constant216 = -1;
	float Result153 = Result152 * Constant216;
	float2 Output15;
	Output15.x = Result153;
	Output15.y = Result153;
	float2 Output16;
	Output16.x = Result152;
	Output16.y = Result152;
	int Constant217 = -1;
	int Constant218 = 0;
	bool Constant219 = false;
	float2 RandomRange_Func_Output_Result4;
	RandomRange_Func_(Output15, Output16, Constant217, Constant218, Constant219, RandomRange_Func_Output_Result4, Context);
	float X1;
	float Y1;
	X1 = RandomRange_Func_Output_Result4.x;
	Y1 = RandomRange_Func_Output_Result4.y;
	float3 Constant225 = float3(1,0,0);
	float3 Result158 = X1 * Constant225;
	float3 Constant226 = float3(0,1,0);
	float3 Result159 = Y1 * Constant226;
	float3 Result160 = Result158 + Result159;
	float Result161 = abs(X1);
	float Result162 = abs(Y1);
	float Result163 = max(Result161, Result162);
	float Result164 = 1 - Result163;
	float3 Constant227 = float3(0,0,1);
	float3 Result165 = Result164 * Constant227;
	float3 Result166 = Result160 + Result165;
	float3 Result167 = normalize(Result166);
	float3 Result168 = Result167 * In_Scale;
	float3 Constant228 = float3(0,0,1);
	float3 Constant229 = float3(0,0,1);
	float Constant230 = 1e-05;
	float3 DirectionAndLengthSafe_Func_Output_Direction2;
	float DirectionAndLengthSafe_Func_Output_Length2;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold2;
	DirectionAndLengthSafe_Func_(In_ConeAxis, Constant229, Constant230, DirectionAndLengthSafe_Func_Output_Direction2, DirectionAndLengthSafe_Func_Output_Length2, DirectionAndLengthSafe_Func_Output_BelowThreshold2, Context);
	bool Constant231 = false;
	float4 FindQuatBetween_Func_Output_NewOutput;
	FindQuatBetween_Func_(Constant228, DirectionAndLengthSafe_Func_Output_Direction2, Constant231, FindQuatBetween_Func_Output_NewOutput, Context);
	float3 MultiplyVectorWithQuaternion_Func_Output_Vector;
	MultiplyVectorWithQuaternion_Func_(Result168, FindQuatBetween_Func_Output_NewOutput, MultiplyVectorWithQuaternion_Func_Output_Vector, Context);
	Out_Ouput = MultiplyVectorWithQuaternion_Func_Output_Vector;
}

void ReflectVector_Func_(float3 In_InVector, float3 In_Normal, out float3 Out_Reflected, inout FSimulationContext Context)
{
	float Result181 = dot(In_InVector,In_Normal);
	float Result182 = Result181 + Result181;
	float3 Result183 = Result182 * In_Normal;
	float3 Result184 = In_InVector - Result183;
	Out_Reflected = Result184;
}

void CentimeterMeterConversion_Func_(float3 In_INPUT_VAR, out float3 Out_CentimeterstoMeters, out float3 Out_MeterstoCentimeters, inout FSimulationContext Context)
{
	float Constant234 = 0.01;
	float3 Result185 = In_INPUT_VAR * Constant234;
	float Constant235 = 100;
	float3 Result186 = In_INPUT_VAR * Constant235;
	Out_CentimeterstoMeters = Result185;
	Out_MeterstoCentimeters = Result186;
}

void ProjectVectorOnPlane_Func_(float3 In_VECTOR_VAR, float3 In_Normal, out float3 Out_Ouput, inout FSimulationContext Context)
{
	float Result190 = dot(In_VECTOR_VAR,In_Normal);
	float3 Result191 = Result190 * In_Normal;
	float3 Result192 = In_VECTOR_VAR - Result191;
	Out_Ouput = Result192;
}

void Collision_CollisionQueryAndResponse_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.InitialDataInstanceAlive = Context.MapUpdate.DataInstance.Alive;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.DeltaTime = Context.MapUpdate.Collision.CollisionQueryAndResponse.DeltaTime;
	float3 Result69 = Context.MapUpdate.Physics.Force / Context.MapUpdate.Particles.Mass;
	float3 Result70 = Result69 * Context.MapUpdate.Collision.CollisionQueryAndResponse.DeltaTime;
	float3 Result71 = Result70 + Context.MapUpdate.Particles.Velocity;
	float3 Result72 = Result71 * Context.MapUpdate.Collision.CollisionQueryAndResponse.DeltaTime;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.TraceOrigin = Context.MapUpdate.Particles.Position;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ForceContribution = Result70;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.AttemptedMovementThisUpdate = Result72;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.InitialForceDividedByMass = Result69;
	float3 Constant186 = float3(0,0,-1);
	float Constant187 = 1e-05;
	float3 DirectionAndLengthSafe_Func_Output_Direction;
	float DirectionAndLengthSafe_Func_Output_Length;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold;
	DirectionAndLengthSafe_Func_(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ForceContribution, Constant186, Constant187, DirectionAndLengthSafe_Func_Output_Direction, DirectionAndLengthSafe_Func_Output_Length, DirectionAndLengthSafe_Func_Output_BelowThreshold, Context);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.TraceVector = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ForceContribution;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.TraceDirection = DirectionAndLengthSafe_Func_Output_Direction;
	float3 Result77 = DirectionAndLengthSafe_Func_Output_Direction * Context.MapUpdate.Collision.CollisionQueryAndResponse.ParticleRadius;
	float3 Result78 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.TraceOrigin - Result77;
	float3 Result79 = Result77 + Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ForceContribution;
	float3 Constant189 = float3(0,0,-1);
	float Constant190 = 1e-05;
	float3 DirectionAndLengthSafe_Func_Output_Direction1;
	float DirectionAndLengthSafe_Func_Output_Length1;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold1;
	DirectionAndLengthSafe_Func_(Result79, Constant189, Constant190, DirectionAndLengthSafe_Func_Output_Direction1, DirectionAndLengthSafe_Func_Output_Length1, DirectionAndLengthSafe_Func_Output_BelowThreshold1, Context);
	float3 Result80 = DirectionAndLengthSafe_Func_Output_Direction1 * DirectionAndLengthSafe_Func_Output_Length1;
	float3 Result81 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.TraceOrigin + Result80;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.TraceWorldStart = Result78;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.TraceWorldEnd = Result81;
	int Constant191 = 0;
	float3 SceneDepthTest_Func_Output_ImpactPosition;
	float3 SceneDepthTest_Func_Output_ImpactNormal;
	bool SceneDepthTest_Func_Output_Occluded;
	bool SceneDepthTest_Func_Output_Collides;
	bool SceneDepthTest_Func_Output_Onscreentest;
	bool SceneDepthTest_Func_Output_KillBecauseofOcclusion;
	SceneDepthTest_Func_(Context.MapUpdate.Collision.CollisionQueryAndResponse.DepthBufferBackfaceThickness, Context.MapUpdate.Particles.Position, Context.MapUpdate.Collision.CollisionQueryAndResponse.ParticleRadius, Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.TraceWorldStart, Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.TraceWorldEnd, Context.MapUpdate.Collision.CollisionQueryAndResponse.KillOccludedParticles, SceneDepthTest_Func_Output_ImpactPosition, SceneDepthTest_Func_Output_ImpactNormal, SceneDepthTest_Func_Output_Occluded, SceneDepthTest_Func_Output_Collides, SceneDepthTest_Func_Output_Onscreentest, SceneDepthTest_Func_Output_KillBecauseofOcclusion, Context);
	float Constant197 = 0;
	bool Result103 = !SceneDepthTest_Func_Output_Onscreentest;
	bool Result104 = Result103 && Context.MapUpdate.Particles.HasCollided;
	bool Result105 = !Result104;
	bool Result106 = Context.MapUpdate.Collision.CollisionQueryAndResponse.AllowOffscreenDepthBufferParticlesToLive || Result105;
	bool Result107 = SceneDepthTest_Func_Output_Onscreentest && SceneDepthTest_Func_Output_KillBecauseofOcclusion;
	bool Result108 = !Result107;
	bool Result109 = Context.MapUpdate.DataInstance.Alive && Result106 && Result108;
	Context.MapUpdate.Particles.Collision.CollisionQueryAndResponse.CollisionID = Constant191;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ReturnedCollisionValidBool = SceneDepthTest_Func_Output_Collides;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ReturnedCollisionWorldPosition = SceneDepthTest_Func_Output_ImpactPosition;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ReturnedCollisionNormal = SceneDepthTest_Func_Output_ImpactNormal;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ReturnedFriction = Constant197;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ReturnedRestitution = Context.MapUpdate.Collision.CollisionQueryAndResponse.ParticleRestitutionCoeffiecient;
	Context.MapUpdate.DataInstance.Alive = Result109;
	Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse.DepthBasedCollisionParticleOccluded = SceneDepthTest_Func_Output_Occluded;
	Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse.ParticleOnScreen = SceneDepthTest_Func_Output_Onscreentest;
	float3 Constant198 = float3(0,0,1);
	float3 Constant199 = float3(0,0,-1e+16);
	float3 PlaneNormal_IfResult;
	float3 PlanePivotPoint_IfResult;
	if(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ReturnedCollisionValidBool)
	{
	PlaneNormal_IfResult = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ReturnedCollisionNormal;
	PlanePivotPoint_IfResult = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ReturnedCollisionWorldPosition;
	}
	else
	{
	PlaneNormal_IfResult = Constant198;
	PlanePivotPoint_IfResult = Constant199;
	}
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.PlaneNormal = PlaneNormal_IfResult;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.PlanePivotPoint = PlanePivotPoint_IfResult;
	bool Constant200 = false;
	bool PlaneSphereCollisionDetection_Func_Output_Collides;
	float3 PlaneSphereCollisionDetection_Func_Output_IntersectionLocation;
	float3 PlaneSphereCollisionDetection_Func_Output_PreASC45IntersectionSphereCenterLocation;
	float3 PlaneSphereCollisionDetection_Func_Output_InitialPositionRelativeCollisionLocation;
	float PlaneSphereCollisionDetection_Func_Output_TimeElapsedToCollision;
	float PlaneSphereCollisionDetection_Func_Output_RemainingTimePostCollision;
	float PlaneSphereCollisionDetection_Func_Output_PercentageofTimeUsedToPerformCollision;
	float PlaneSphereCollisionDetection_Func_Output_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision;
	float PlaneSphereCollisionDetection_Func_Output_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane;
	bool PlaneSphereCollisionDetection_Func_Output_Particlewasinitializedwithinacollisionsurface;
	PlaneSphereCollisionDetection_Func_(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.PlaneNormal, Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.PlanePivotPoint, Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.TraceOrigin, Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.AttemptedMovementThisUpdate, Context.MapUpdate.Collision.CollisionQueryAndResponse.ParticleRadius, Context.MapUpdate.Collision.CollisionQueryAndResponse.DeltaTime, Constant200, PlaneSphereCollisionDetection_Func_Output_Collides, PlaneSphereCollisionDetection_Func_Output_IntersectionLocation, PlaneSphereCollisionDetection_Func_Output_PreASC45IntersectionSphereCenterLocation, PlaneSphereCollisionDetection_Func_Output_InitialPositionRelativeCollisionLocation, PlaneSphereCollisionDetection_Func_Output_TimeElapsedToCollision, PlaneSphereCollisionDetection_Func_Output_RemainingTimePostCollision, PlaneSphereCollisionDetection_Func_Output_PercentageofTimeUsedToPerformCollision, PlaneSphereCollisionDetection_Func_Output_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision, PlaneSphereCollisionDetection_Func_Output_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane, PlaneSphereCollisionDetection_Func_Output_Particlewasinitializedwithinacollisionsurface, Context);
	Context.MapUpdate.Collision.WorldPosition = PlaneSphereCollisionDetection_Func_Output_IntersectionLocation;
	Context.MapUpdate.Collision.ParticleWorldPosition = PlaneSphereCollisionDetection_Func_Output_PreASC45IntersectionSphereCenterLocation;
	Context.MapUpdate.Collision.ParticleRelativeCollisionLocation = PlaneSphereCollisionDetection_Func_Output_InitialPositionRelativeCollisionLocation;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.TickDeltaForThisCollisionUpdate = PlaneSphereCollisionDetection_Func_Output_TimeElapsedToCollision;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.Physics.DeltaTime = PlaneSphereCollisionDetection_Func_Output_RemainingTimePostCollision;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.PercentageOfTickDedicatedToUpdatingPosition = PlaneSphereCollisionDetection_Func_Output_PercentageofTimeUsedToPerformCollision;
	Context.MapUpdate.Collision.Collision.CollisionQueryAndResponse.PenetrationDistance = PlaneSphereCollisionDetection_Func_Output_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision;
	Context.MapUpdate.Collision.DistanceToCollision = PlaneSphereCollisionDetection_Func_Output_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane;
	float Constant210 = 0;
	bool Result139 = Context.MapUpdate.Collision.DistanceToCollision <= Constant210;
	bool Result140 = Context.MapUpdate.Collision.CollisionQueryAndResponse.CollisionEnabled && Result139;
	bool Result141 = Result140 || Context.MapUpdate.Particles.HasCollided;
	Context.MapUpdate.Physics.Collision.CollisionQueryAndResponse.CollidesThisFrame = Result140;
	Context.MapUpdate.Particles.HasCollided = Result141;
	float3 Result142 = -(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.PlaneNormal);
	float Result143 = dot(Result142,Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.AttemptedMovementThisUpdate);
	float Result144 = Context.MapUpdate.Collision.CollisionQueryAndResponse.DeltaTime * Context.MapUpdate.Collision.CollisionQueryAndResponse.DeltaTime;
	float3 Result145 = Result144 * Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.InitialForceDividedByMass;
	float Result146 = dot(Result142,Result145);
	float Result147 = Result143 - Result146;
	float Constant211 = 0.1;
	bool Result148 = Result147 < Constant211;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.RemoveRestitution = Result148;
	float3 Result149 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.AttemptedMovementThisUpdate / Context.MapUpdate.Collision.CollisionQueryAndResponse.DeltaTime;
	float float_IfResult7;
	if(Context.MapUpdate.Physics.Collision.CollisionQueryAndResponse.CollidesThisFrame)
	{
	float_IfResult7 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.Physics.DeltaTime;
	}
	else
	{
	float_IfResult7 = Context.MapUpdate.Collision.CollisionQueryAndResponse.DeltaTime;
	}
	float Constant212 = 0;
	float float_IfResult8;
	if(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.RemoveRestitution)
	{
	float_IfResult8 = Constant212;
	}
	else
	{
	float_IfResult8 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ReturnedRestitution;
	}
	Context.MapUpdate.Collision.Valid = Context.MapUpdate.Physics.Collision.CollisionQueryAndResponse.CollidesThisFrame;
	Context.MapUpdate.Collision.Size = Context.MapUpdate.Collision.CollisionQueryAndResponse.ParticleRadius;
	Context.MapUpdate.Collision.Normal = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.PlaneNormal;
	Context.MapUpdate.Collision.Velocity = Result149;
	Context.MapUpdate.Collision.Friction = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ReturnedFriction;
	Context.MapUpdate.Physics.DeltaTime = float_IfResult7;
	Context.MapUpdate.Collision.Restitution = float_IfResult8;
	bool Result150 = !Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.RemoveRestitution;
	bool Result151 = Result150 && Context.MapUpdate.Collision.CollisionQueryAndResponse.RandomizeCollisionNormal;
	float Constant213 = 1;
	float3 RandomizeCollisionNormals_Func_Output_Ouput;
	RandomizeCollisionNormals_Func_(Context.MapUpdate.Collision.Normal, Constant213, Context.MapUpdate.Collision.CollisionQueryAndResponse.CollisionNormalRandomizationPercentage, RandomizeCollisionNormals_Func_Output_Ouput, Context);
	float3 Vector_IfResult9;
	if(Result151)
	{
	Vector_IfResult9 = RandomizeCollisionNormals_Func_Output_Ouput;
	}
	else
	{
	Vector_IfResult9 = Context.MapUpdate.Collision.Normal;
	}
	float3 ReflectVector_Func_Output_Reflected;
	ReflectVector_Func_(Context.MapUpdate.Collision.Velocity, Vector_IfResult9, ReflectVector_Func_Output_Reflected, Context);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ReflectedVelocity = ReflectVector_Func_Output_Reflected;
	float3 CentimeterMeterConversion_Func_Output_CentimeterstoMeters;
	float3 CentimeterMeterConversion_Func_Output_MeterstoCentimeters;
	CentimeterMeterConversion_Func_(Context.MapUpdate.Collision.Velocity, CentimeterMeterConversion_Func_Output_CentimeterstoMeters, CentimeterMeterConversion_Func_Output_MeterstoCentimeters, Context);
	float3 Result187 = Context.MapUpdate.Particles.Mass * CentimeterMeterConversion_Func_Output_CentimeterstoMeters;
	float Constant236 = -1;
	float3 Result188 = Result187 * Constant236;
	float Result189 = dot(Result188,Context.MapUpdate.Collision.Normal);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.NormalForceInNewtons = Result189;
	float3 ProjectVectorOnPlane_Func_Output_Ouput;
	ProjectVectorOnPlane_Func_(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ReflectedVelocity, Context.MapUpdate.Collision.Normal, ProjectVectorOnPlane_Func_Output_Ouput, Context);
	float3 Constant237 = float3(0,0,0);
	float Constant238 = 1e-05;
	float3 DirectionAndLengthSafe_Func_Output_Direction3;
	float DirectionAndLengthSafe_Func_Output_Length3;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold3;
	DirectionAndLengthSafe_Func_(ProjectVectorOnPlane_Func_Output_Ouput, Constant237, Constant238, DirectionAndLengthSafe_Func_Output_Direction3, DirectionAndLengthSafe_Func_Output_Length3, DirectionAndLengthSafe_Func_Output_BelowThreshold3, Context);
	float3 CentimeterMeterConversion_Func_Output_CentimeterstoMeters1;
	float3 CentimeterMeterConversion_Func_Output_MeterstoCentimeters1;
	CentimeterMeterConversion_Func_(ProjectVectorOnPlane_Func_Output_Ouput, CentimeterMeterConversion_Func_Output_CentimeterstoMeters1, CentimeterMeterConversion_Func_Output_MeterstoCentimeters1, Context);
	float3 Result193 = CentimeterMeterConversion_Func_Output_CentimeterstoMeters1 * Context.MapUpdate.Particles.Mass;
	float float_IfResult9;
	if(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.RemoveRestitution)
	{
	float_IfResult9 = Context.MapUpdate.Collision.CollisionQueryAndResponse.DynamicFrictionCoefficient;
	}
	else
	{
	float_IfResult9 = Context.MapUpdate.Collision.CollisionQueryAndResponse.BounceCollisionFriction;
	}
	float3 Result194 = DirectionAndLengthSafe_Func_Output_Direction3 * float_IfResult9 * Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.NormalForceInNewtons;
	float3 Result195 = Result193 - Result194;
	float3 Constant239 = float3(0,0,0);
	float Constant240 = 1e-05;
	float3 DirectionAndLengthSafe_Func_Output_Direction4;
	float DirectionAndLengthSafe_Func_Output_Length4;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold4;
	DirectionAndLengthSafe_Func_(Result195, Constant239, Constant240, DirectionAndLengthSafe_Func_Output_Direction4, DirectionAndLengthSafe_Func_Output_Length4, DirectionAndLengthSafe_Func_Output_BelowThreshold4, Context);
	float Result196 = dot(DirectionAndLengthSafe_Func_Output_Direction3,DirectionAndLengthSafe_Func_Output_Direction4);
	float Constant241 = 0;
	bool Result197 = Result196 <= Constant241;
	float3 Vector_IfResult10;
	if(Result197)
	{
	Vector_IfResult10 = Result193;
	}
	else
	{
	Vector_IfResult10 = Result194;
	}
	float Constant242 = -1;
	float3 Result198 = Vector_IfResult10 * Constant242;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.FrictionForceVectorInNewtons = Result198;
	float3 Result199 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.FrictionForceVectorInNewtons / Context.MapUpdate.Particles.Mass;
	float3 CentimeterMeterConversion_Func_Output_CentimeterstoMeters2;
	float3 CentimeterMeterConversion_Func_Output_MeterstoCentimeters2;
	CentimeterMeterConversion_Func_(Result199, CentimeterMeterConversion_Func_Output_CentimeterstoMeters2, CentimeterMeterConversion_Func_Output_MeterstoCentimeters2, Context);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.FrictionForceVelocityVector = CentimeterMeterConversion_Func_Output_MeterstoCentimeters2;
	float3 Result200 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ReflectedVelocity + Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.FrictionForceVelocityVector;
	float Result201 = dot(Context.MapUpdate.Collision.Normal,Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ReflectedVelocity);
	float3 Result202 = Context.MapUpdate.Collision.Normal * Result201;
	float Result203 = 1 - Context.MapUpdate.Collision.Restitution;
	float3 Result204 = Result202 * Result203;
	float3 Result205 = Result200 - Result204;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ReflectedVelocityWithFrictionApplied = Result205;
	float3 Particleposition_IfResult;
	if(Context.MapUpdate.Collision.Valid)
	{
	Particleposition_IfResult = Context.MapUpdate.Collision.ParticleWorldPosition;
	}
	else
	{
	Particleposition_IfResult = Context.MapUpdate.Particles.Position;
	}
	Context.MapUpdate.Particles.Position = Particleposition_IfResult;
	float3 Constant243 = float3(0,0,1);
	float Constant244 = 1e-05;
	float3 DirectionAndLengthSafe_Func_Output_Direction5;
	float DirectionAndLengthSafe_Func_Output_Length5;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold5;
	DirectionAndLengthSafe_Func_(Context.MapUpdate.Collision.Velocity, Constant243, Constant244, DirectionAndLengthSafe_Func_Output_Direction5, DirectionAndLengthSafe_Func_Output_Length5, DirectionAndLengthSafe_Func_Output_BelowThreshold5, Context);
	float Result206 = dot(DirectionAndLengthSafe_Func_Output_Direction5,Context.MapUpdate.Collision.Normal);
	float Constant245 = 0;
	bool Result207 = Result206 < Constant245;
	bool Result208 = Result207 && Context.MapUpdate.Collision.Valid;
	float3 Constant246 = float3(0,0,0);
	float3 physicsforce_IfResult;
	float3 Velocity_IfResult;
	if(Result208)
	{
	physicsforce_IfResult = Constant246;
	Velocity_IfResult = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ReflectedVelocityWithFrictionApplied;
	}
	else
	{
	physicsforce_IfResult = Context.MapUpdate.Physics.Force;
	Velocity_IfResult = Context.MapUpdate.Particles.Velocity;
	}
	Context.MapUpdate.Physics.Force = physicsforce_IfResult;
	Context.MapUpdate.Particles.Velocity = Velocity_IfResult;
}

void Collision_CollisionQueryAndResponse001_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.InitialDataInstanceAlive = Context.MapUpdate.DataInstance.Alive;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.DeltaTime = Context.MapUpdate.Collision.CollisionQueryAndResponse001.DeltaTime;
	float3 Result209 = Context.MapUpdate.Physics.Force / Context.MapUpdate.Particles.Mass;
	float3 Result210 = Result209 * Context.MapUpdate.Collision.CollisionQueryAndResponse001.DeltaTime;
	float3 Result211 = Result210 + Context.MapUpdate.Particles.Velocity;
	float3 Result212 = Result211 * Context.MapUpdate.Collision.CollisionQueryAndResponse001.DeltaTime;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.TraceOrigin = Context.MapUpdate.Particles.Position;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ForceContribution = Result210;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.AttemptedMovementThisUpdate = Result212;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.InitialForceDividedByMass = Result209;
	float3 Constant274 = float3(0,0,-1);
	float Constant275 = 1e-05;
	float3 DirectionAndLengthSafe_Func_Output_Direction6;
	float DirectionAndLengthSafe_Func_Output_Length6;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold6;
	DirectionAndLengthSafe_Func_(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.AttemptedMovementThisUpdate, Constant274, Constant275, DirectionAndLengthSafe_Func_Output_Direction6, DirectionAndLengthSafe_Func_Output_Length6, DirectionAndLengthSafe_Func_Output_BelowThreshold6, Context);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.TraceVector = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.AttemptedMovementThisUpdate;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.TraceDirection = DirectionAndLengthSafe_Func_Output_Direction6;
	float3 Result213 = DirectionAndLengthSafe_Func_Output_Direction6 * Context.MapUpdate.Collision.CollisionQueryAndResponse001.ParticleRadius;
	float3 Result214 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.TraceOrigin - Result213;
	float3 Result215 = Result213 + Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.AttemptedMovementThisUpdate;
	float3 Constant276 = float3(0,0,-1);
	float Constant277 = 1e-05;
	float3 DirectionAndLengthSafe_Func_Output_Direction7;
	float DirectionAndLengthSafe_Func_Output_Length7;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold7;
	DirectionAndLengthSafe_Func_(Result215, Constant276, Constant277, DirectionAndLengthSafe_Func_Output_Direction7, DirectionAndLengthSafe_Func_Output_Length7, DirectionAndLengthSafe_Func_Output_BelowThreshold7, Context);
	float3 Result216 = DirectionAndLengthSafe_Func_Output_Direction7 * DirectionAndLengthSafe_Func_Output_Length7;
	float3 Result217 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.TraceOrigin + Result216;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.TraceWorldStart = Result214;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.TraceWorldEnd = Result217;
	int Constant278 = 0;
	float3 SceneDepthTest_Func_Output_ImpactPosition1;
	float3 SceneDepthTest_Func_Output_ImpactNormal1;
	bool SceneDepthTest_Func_Output_Occluded1;
	bool SceneDepthTest_Func_Output_Collides1;
	bool SceneDepthTest_Func_Output_Onscreentest1;
	bool SceneDepthTest_Func_Output_KillBecauseofOcclusion1;
	SceneDepthTest_Func_(Context.MapUpdate.Collision.CollisionQueryAndResponse001.DepthBufferBackfaceThickness, Context.MapUpdate.Particles.Position, Context.MapUpdate.Collision.CollisionQueryAndResponse001.ParticleRadius, Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.TraceWorldStart, Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.TraceWorldEnd, Context.MapUpdate.Collision.CollisionQueryAndResponse001.KillOccludedParticles, SceneDepthTest_Func_Output_ImpactPosition1, SceneDepthTest_Func_Output_ImpactNormal1, SceneDepthTest_Func_Output_Occluded1, SceneDepthTest_Func_Output_Collides1, SceneDepthTest_Func_Output_Onscreentest1, SceneDepthTest_Func_Output_KillBecauseofOcclusion1, Context);
	float Constant279 = 0;
	bool Result218 = !SceneDepthTest_Func_Output_Onscreentest1;
	bool Result219 = Result218 && Context.MapUpdate.Particles.HasCollided;
	bool Result220 = !Result219;
	bool Result221 = Context.MapUpdate.Collision.CollisionQueryAndResponse001.AllowOffscreenDepthBufferParticlesToLive || Result220;
	bool Result222 = SceneDepthTest_Func_Output_Onscreentest1 && SceneDepthTest_Func_Output_KillBecauseofOcclusion1;
	bool Result223 = !Result222;
	bool Result224 = Context.MapUpdate.DataInstance.Alive && Result221 && Result223;
	Context.MapUpdate.Particles.Collision.CollisionQueryAndResponse001.CollisionID = Constant278;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ReturnedCollisionValidBool = SceneDepthTest_Func_Output_Collides1;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ReturnedCollisionWorldPosition = SceneDepthTest_Func_Output_ImpactPosition1;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ReturnedCollisionNormal = SceneDepthTest_Func_Output_ImpactNormal1;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ReturnedFriction = Constant279;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ReturnedRestitution = Context.MapUpdate.Collision.CollisionQueryAndResponse001.ParticleRestitutionCoeffiecient;
	Context.MapUpdate.DataInstance.Alive = Result224;
	Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse001.DepthBasedCollisionParticleOccluded = SceneDepthTest_Func_Output_Occluded1;
	Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse001.ParticleOnScreen = SceneDepthTest_Func_Output_Onscreentest1;
	float3 Constant280 = float3(0,0,1);
	float3 Constant281 = float3(0,0,-1e+16);
	float3 PlaneNormal_IfResult1;
	float3 PlanePivotPoint_IfResult1;
	if(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ReturnedCollisionValidBool)
	{
	PlaneNormal_IfResult1 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ReturnedCollisionNormal;
	PlanePivotPoint_IfResult1 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ReturnedCollisionWorldPosition;
	}
	else
	{
	PlaneNormal_IfResult1 = Constant280;
	PlanePivotPoint_IfResult1 = Constant281;
	}
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.PlaneNormal = PlaneNormal_IfResult1;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.PlanePivotPoint = PlanePivotPoint_IfResult1;
	bool Constant282 = false;
	bool PlaneSphereCollisionDetection_Func_Output_Collides1;
	float3 PlaneSphereCollisionDetection_Func_Output_IntersectionLocation1;
	float3 PlaneSphereCollisionDetection_Func_Output_PreASC45IntersectionSphereCenterLocation1;
	float3 PlaneSphereCollisionDetection_Func_Output_InitialPositionRelativeCollisionLocation1;
	float PlaneSphereCollisionDetection_Func_Output_TimeElapsedToCollision1;
	float PlaneSphereCollisionDetection_Func_Output_RemainingTimePostCollision1;
	float PlaneSphereCollisionDetection_Func_Output_PercentageofTimeUsedToPerformCollision1;
	float PlaneSphereCollisionDetection_Func_Output_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision1;
	float PlaneSphereCollisionDetection_Func_Output_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane1;
	bool PlaneSphereCollisionDetection_Func_Output_Particlewasinitializedwithinacollisionsurface1;
	PlaneSphereCollisionDetection_Func_(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.PlaneNormal, Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.PlanePivotPoint, Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.TraceOrigin, Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.AttemptedMovementThisUpdate, Context.MapUpdate.Collision.CollisionQueryAndResponse001.ParticleRadius, Context.MapUpdate.Collision.CollisionQueryAndResponse001.DeltaTime, Constant282, PlaneSphereCollisionDetection_Func_Output_Collides1, PlaneSphereCollisionDetection_Func_Output_IntersectionLocation1, PlaneSphereCollisionDetection_Func_Output_PreASC45IntersectionSphereCenterLocation1, PlaneSphereCollisionDetection_Func_Output_InitialPositionRelativeCollisionLocation1, PlaneSphereCollisionDetection_Func_Output_TimeElapsedToCollision1, PlaneSphereCollisionDetection_Func_Output_RemainingTimePostCollision1, PlaneSphereCollisionDetection_Func_Output_PercentageofTimeUsedToPerformCollision1, PlaneSphereCollisionDetection_Func_Output_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision1, PlaneSphereCollisionDetection_Func_Output_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane1, PlaneSphereCollisionDetection_Func_Output_Particlewasinitializedwithinacollisionsurface1, Context);
	Context.MapUpdate.Collision.WorldPosition = PlaneSphereCollisionDetection_Func_Output_IntersectionLocation1;
	Context.MapUpdate.Collision.ParticleWorldPosition = PlaneSphereCollisionDetection_Func_Output_PreASC45IntersectionSphereCenterLocation1;
	Context.MapUpdate.Collision.ParticleRelativeCollisionLocation = PlaneSphereCollisionDetection_Func_Output_InitialPositionRelativeCollisionLocation1;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.TickDeltaForThisCollisionUpdate = PlaneSphereCollisionDetection_Func_Output_TimeElapsedToCollision1;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.Physics.DeltaTime = PlaneSphereCollisionDetection_Func_Output_RemainingTimePostCollision1;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.PercentageOfTickDedicatedToUpdatingPosition = PlaneSphereCollisionDetection_Func_Output_PercentageofTimeUsedToPerformCollision1;
	Context.MapUpdate.Collision.Collision.CollisionQueryAndResponse001.PenetrationDistance = PlaneSphereCollisionDetection_Func_Output_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision1;
	Context.MapUpdate.Collision.DistanceToCollision = PlaneSphereCollisionDetection_Func_Output_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane1;
	float Constant283 = 0;
	bool Result225 = Context.MapUpdate.Collision.DistanceToCollision <= Constant283;
	bool Result226 = Context.MapUpdate.Collision.CollisionQueryAndResponse001.CollisionEnabled && Result225;
	bool Result227 = Result226 || Context.MapUpdate.Particles.HasCollided;
	Context.MapUpdate.Physics.Collision.CollisionQueryAndResponse001.CollidesThisFrame = Result226;
	Context.MapUpdate.Particles.HasCollided = Result227;
	float3 Result228 = -(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.PlaneNormal);
	float Result229 = dot(Result228,Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.AttemptedMovementThisUpdate);
	float Result230 = Context.MapUpdate.Collision.CollisionQueryAndResponse001.DeltaTime * Context.MapUpdate.Collision.CollisionQueryAndResponse001.DeltaTime;
	float3 Result231 = Result230 * Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.InitialForceDividedByMass;
	float Result232 = dot(Result228,Result231);
	float Result233 = Result229 - Result232;
	float Constant284 = 0.1;
	bool Result234 = Result233 < Constant284;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.RemoveRestitution = Result234;
	float3 Result235 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.AttemptedMovementThisUpdate / Context.MapUpdate.Collision.CollisionQueryAndResponse001.DeltaTime;
	float float_IfResult10;
	if(Context.MapUpdate.Physics.Collision.CollisionQueryAndResponse001.CollidesThisFrame)
	{
	float_IfResult10 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.Physics.DeltaTime;
	}
	else
	{
	float_IfResult10 = Context.MapUpdate.Collision.CollisionQueryAndResponse001.DeltaTime;
	}
	float Constant285 = 0;
	float float_IfResult11;
	if(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.RemoveRestitution)
	{
	float_IfResult11 = Constant285;
	}
	else
	{
	float_IfResult11 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ReturnedRestitution;
	}
	Context.MapUpdate.Collision.Valid = Context.MapUpdate.Physics.Collision.CollisionQueryAndResponse001.CollidesThisFrame;
	Context.MapUpdate.Collision.Size = Context.MapUpdate.Collision.CollisionQueryAndResponse001.ParticleRadius;
	Context.MapUpdate.Collision.Normal = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.PlaneNormal;
	Context.MapUpdate.Collision.Velocity = Result235;
	Context.MapUpdate.Collision.Friction = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ReturnedFriction;
	Context.MapUpdate.Physics.DeltaTime = float_IfResult10;
	Context.MapUpdate.Collision.Restitution = float_IfResult11;
	bool Result236 = !Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.RemoveRestitution;
	bool Result237 = Result236 && Context.MapUpdate.Collision.CollisionQueryAndResponse001.RandomizeCollisionNormal;
	float Constant286 = 1;
	float3 RandomizeCollisionNormals_Func_Output_Ouput1;
	RandomizeCollisionNormals_Func_(Context.MapUpdate.Collision.Normal, Constant286, Context.MapUpdate.Collision.CollisionQueryAndResponse001.CollisionNormalRandomizationPercentage, RandomizeCollisionNormals_Func_Output_Ouput1, Context);
	float3 Vector_IfResult11;
	if(Result237)
	{
	Vector_IfResult11 = RandomizeCollisionNormals_Func_Output_Ouput1;
	}
	else
	{
	Vector_IfResult11 = Context.MapUpdate.Collision.Normal;
	}
	float3 ReflectVector_Func_Output_Reflected1;
	ReflectVector_Func_(Context.MapUpdate.Collision.Velocity, Vector_IfResult11, ReflectVector_Func_Output_Reflected1, Context);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ReflectedVelocity = ReflectVector_Func_Output_Reflected1;
	float3 CentimeterMeterConversion_Func_Output_CentimeterstoMeters3;
	float3 CentimeterMeterConversion_Func_Output_MeterstoCentimeters3;
	CentimeterMeterConversion_Func_(Context.MapUpdate.Collision.Velocity, CentimeterMeterConversion_Func_Output_CentimeterstoMeters3, CentimeterMeterConversion_Func_Output_MeterstoCentimeters3, Context);
	float3 Result238 = Context.MapUpdate.Particles.Mass * CentimeterMeterConversion_Func_Output_CentimeterstoMeters3;
	float Constant287 = -1;
	float3 Result239 = Result238 * Constant287;
	float Result240 = dot(Result239,Context.MapUpdate.Collision.Normal);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.NormalForceInNewtons = Result240;
	float3 ProjectVectorOnPlane_Func_Output_Ouput1;
	ProjectVectorOnPlane_Func_(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ReflectedVelocity, Context.MapUpdate.Collision.Normal, ProjectVectorOnPlane_Func_Output_Ouput1, Context);
	float3 Constant288 = float3(0,0,0);
	float Constant289 = 1e-05;
	float3 DirectionAndLengthSafe_Func_Output_Direction8;
	float DirectionAndLengthSafe_Func_Output_Length8;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold8;
	DirectionAndLengthSafe_Func_(ProjectVectorOnPlane_Func_Output_Ouput1, Constant288, Constant289, DirectionAndLengthSafe_Func_Output_Direction8, DirectionAndLengthSafe_Func_Output_Length8, DirectionAndLengthSafe_Func_Output_BelowThreshold8, Context);
	float3 CentimeterMeterConversion_Func_Output_CentimeterstoMeters4;
	float3 CentimeterMeterConversion_Func_Output_MeterstoCentimeters4;
	CentimeterMeterConversion_Func_(ProjectVectorOnPlane_Func_Output_Ouput1, CentimeterMeterConversion_Func_Output_CentimeterstoMeters4, CentimeterMeterConversion_Func_Output_MeterstoCentimeters4, Context);
	float3 Result241 = CentimeterMeterConversion_Func_Output_CentimeterstoMeters4 * Context.MapUpdate.Particles.Mass;
	float float_IfResult12;
	if(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.RemoveRestitution)
	{
	float_IfResult12 = Context.MapUpdate.Collision.CollisionQueryAndResponse001.DynamicFrictionCoefficient;
	}
	else
	{
	float_IfResult12 = Context.MapUpdate.Collision.CollisionQueryAndResponse001.BounceCollisionFriction;
	}
	float3 Result242 = DirectionAndLengthSafe_Func_Output_Direction8 * float_IfResult12 * Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.NormalForceInNewtons;
	float3 Result243 = Result241 - Result242;
	float3 Constant290 = float3(0,0,0);
	float Constant291 = 1e-05;
	float3 DirectionAndLengthSafe_Func_Output_Direction9;
	float DirectionAndLengthSafe_Func_Output_Length9;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold9;
	DirectionAndLengthSafe_Func_(Result243, Constant290, Constant291, DirectionAndLengthSafe_Func_Output_Direction9, DirectionAndLengthSafe_Func_Output_Length9, DirectionAndLengthSafe_Func_Output_BelowThreshold9, Context);
	float Result244 = dot(DirectionAndLengthSafe_Func_Output_Direction8,DirectionAndLengthSafe_Func_Output_Direction9);
	float Constant292 = 0;
	bool Result245 = Result244 <= Constant292;
	float3 Vector_IfResult12;
	if(Result245)
	{
	Vector_IfResult12 = Result241;
	}
	else
	{
	Vector_IfResult12 = Result242;
	}
	float Constant293 = -1;
	float3 Result246 = Vector_IfResult12 * Constant293;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.FrictionForceVectorInNewtons = Result246;
	float3 Result247 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.FrictionForceVectorInNewtons / Context.MapUpdate.Particles.Mass;
	float3 CentimeterMeterConversion_Func_Output_CentimeterstoMeters5;
	float3 CentimeterMeterConversion_Func_Output_MeterstoCentimeters5;
	CentimeterMeterConversion_Func_(Result247, CentimeterMeterConversion_Func_Output_CentimeterstoMeters5, CentimeterMeterConversion_Func_Output_MeterstoCentimeters5, Context);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.FrictionForceVelocityVector = CentimeterMeterConversion_Func_Output_MeterstoCentimeters5;
	float3 Result248 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ReflectedVelocity + Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.FrictionForceVelocityVector;
	float Result249 = dot(Context.MapUpdate.Collision.Normal,Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ReflectedVelocity);
	float3 Result250 = Context.MapUpdate.Collision.Normal * Result249;
	float Result251 = 1 - Context.MapUpdate.Collision.Restitution;
	float3 Result252 = Result250 * Result251;
	float3 Result253 = Result248 - Result252;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ReflectedVelocityWithFrictionApplied = Result253;
	float3 Particleposition_IfResult1;
	if(Context.MapUpdate.Collision.Valid)
	{
	Particleposition_IfResult1 = Context.MapUpdate.Collision.ParticleWorldPosition;
	}
	else
	{
	Particleposition_IfResult1 = Context.MapUpdate.Particles.Position;
	}
	Context.MapUpdate.Particles.Position = Particleposition_IfResult1;
	float3 Constant294 = float3(0,0,1);
	float Constant295 = 1e-05;
	float3 DirectionAndLengthSafe_Func_Output_Direction10;
	float DirectionAndLengthSafe_Func_Output_Length10;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold10;
	DirectionAndLengthSafe_Func_(Context.MapUpdate.Collision.Velocity, Constant294, Constant295, DirectionAndLengthSafe_Func_Output_Direction10, DirectionAndLengthSafe_Func_Output_Length10, DirectionAndLengthSafe_Func_Output_BelowThreshold10, Context);
	float Result254 = dot(DirectionAndLengthSafe_Func_Output_Direction10,Context.MapUpdate.Collision.Normal);
	float Constant296 = 0;
	bool Result255 = Result254 < Constant296;
	bool Result256 = Result255 && Context.MapUpdate.Collision.Valid;
	float3 Constant297 = float3(0,0,0);
	float3 physicsforce_IfResult1;
	float3 Velocity_IfResult1;
	if(Result256)
	{
	physicsforce_IfResult1 = Constant297;
	Velocity_IfResult1 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ReflectedVelocityWithFrictionApplied;
	}
	else
	{
	physicsforce_IfResult1 = Context.MapUpdate.Physics.Force;
	Velocity_IfResult1 = Context.MapUpdate.Particles.Velocity;
	}
	Context.MapUpdate.Physics.Force = physicsforce_IfResult1;
	Context.MapUpdate.Particles.Velocity = Velocity_IfResult1;
}

void Collision_TransformPosition001_Emitter_Func_(float3 In_InPosition, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant317 = false;
	float4x4 Matrix_IfResult5;
	float4x4 Matrix001_IfResult4;
	if(In_ApplyScale)
	{
	Matrix_IfResult5 = Context.MapUpdate.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult4 = Context.MapUpdate.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult5 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult4 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal4;
	float4x4 TransformBase_Func_Output_OutTransform4;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult5, Matrix001_IfResult4, Constant317, TransformBase_Func_Output_bUseOriginal4, TransformBase_Func_Output_OutTransform4, Context);
	float3 Result285 = mul(float4(In_InPosition,1.0),TransformBase_Func_Output_OutTransform4).xyz;
	float3 Vector_IfResult15;
	if(TransformBase_Func_Output_bUseOriginal4)
	{
	Vector_IfResult15 = In_InPosition;
	}
	else
	{
	Vector_IfResult15 = Result285;
	}
	Out_OutPosition = Vector_IfResult15;
}

void Collision_TransformVector001_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant321 = false;
	float4x4 Matrix_IfResult6;
	float4x4 Matrix001_IfResult5;
	if(In_ApplyScale)
	{
	Matrix_IfResult6 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalTransposed;
	Matrix001_IfResult5 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldTransposed;
	}
	else
	{
	Matrix_IfResult6 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult5 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal5;
	float4x4 TransformBase_Func_Output_OutTransform5;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult6, Matrix001_IfResult5, Constant321, TransformBase_Func_Output_bUseOriginal5, TransformBase_Func_Output_OutTransform5, Context);
	float3 Result286 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform5).xyz;
	float3 Vector_IfResult16;
	if(TransformBase_Func_Output_bUseOriginal5)
	{
	Vector_IfResult16 = In_InVector;
	}
	else
	{
	Vector_IfResult16 = Result286;
	}
	Out_OutVector = Vector_IfResult16;
}

void Collision_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant325 = false;
	float4x4 Matrix_IfResult7;
	float4x4 Matrix001_IfResult6;
	if(In_ApplyScale)
	{
	Matrix_IfResult7 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalTransposed;
	Matrix001_IfResult6 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldTransposed;
	}
	else
	{
	Matrix_IfResult7 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult6 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal6;
	float4x4 TransformBase_Func_Output_OutTransform6;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult7, Matrix001_IfResult6, Constant325, TransformBase_Func_Output_bUseOriginal6, TransformBase_Func_Output_OutTransform6, Context);
	float3 Result287 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform6).xyz;
	float3 Vector_IfResult17;
	if(TransformBase_Func_Output_bUseOriginal6)
	{
	Vector_IfResult17 = In_InVector;
	}
	else
	{
	Vector_IfResult17 = Result287;
	}
	Out_OutVector = Vector_IfResult17;
}

void Collision_Emitter_Func_(inout FSimulationContext Context)
{
	float CalculateRadiusFromSpriteSize_Particle_Method_NewEnumerator0_Func_Output_Radius;
	CalculateRadiusFromSpriteSize_Particle_Method_NewEnumerator0_Func_(Context.MapUpdate.Particles.SpriteSize, CalculateRadiusFromSpriteSize_Particle_Method_NewEnumerator0_Func_Output_Radius, Context);
	float Result65 = Context.MapUpdate.Constants.Emitter.Collision.ParticleRadiusScale * CalculateRadiusFromSpriteSize_Particle_Method_NewEnumerator0_Func_Output_Radius;
	Context.MapUpdate.Local.Collision.ParticleRadius = Result65;
	int Constant147 = 0;
	int Constant148 = 1;
	bool Constant149 = false;
	float3 Collision_TransformPosition_Emitter_Func_Output_OutPosition;
	Collision_TransformPosition_Emitter_Func_(Context.MapUpdate.Particles.Position, Constant147, Constant148, Constant149, Collision_TransformPosition_Emitter_Func_Output_OutPosition, Context);
	int Constant151 = 0;
	int Constant152 = 1;
	bool Constant153 = false;
	float3 Collision_TransformVector002_Emitter_Func_Output_OutVector;
	Collision_TransformVector002_Emitter_Func_(Context.MapUpdate.Physics.Force, Constant151, Constant152, Constant153, Collision_TransformVector002_Emitter_Func_Output_OutVector, Context);
	int Constant155 = 0;
	int Constant156 = 1;
	bool Constant157 = false;
	float3 Collision_TransformVector003_Emitter_Func_Output_OutVector;
	Collision_TransformVector003_Emitter_Func_(Context.MapUpdate.Particles.Velocity, Constant155, Constant156, Constant157, Collision_TransformVector003_Emitter_Func_Output_OutVector, Context);
	Context.MapUpdate.Temp.Collision.PreviousPosition = Collision_TransformPosition_Emitter_Func_Output_OutPosition;
	Context.MapUpdate.Temp.Collision.PreviousForce = Collision_TransformVector002_Emitter_Func_Output_OutVector;
	Context.MapUpdate.Temp.Collision.PreviousVelocity = Collision_TransformVector003_Emitter_Func_Output_OutVector;
	Context.MapUpdate.Particles.Position = Collision_TransformPosition_Emitter_Func_Output_OutPosition;
	Context.MapUpdate.Physics.Force = Collision_TransformVector002_Emitter_Func_Output_OutVector;
	Context.MapUpdate.Particles.Velocity = Collision_TransformVector003_Emitter_Func_Output_OutVector;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.DynamicFrictionCoefficient = Context.MapUpdate.Constants.Emitter.Collision.Friction;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.DynamicFrictionCoefficient = Context.MapUpdate.Constants.Emitter.Collision.Friction;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.StaticFrictionCoefficient = Context.MapUpdate.Constants.Emitter.Collision.StaticFriction;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.StaticFrictionCoefficient = Context.MapUpdate.Constants.Emitter.Collision.StaticFriction;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.StaticFrictionEngagementSpeed = Context.MapUpdate.Constants.Emitter.Collision.StaticFrictionEngagementSpeed;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.StaticFrictionEngagementSpeed = Context.MapUpdate.Constants.Emitter.Collision.StaticFrictionEngagementSpeed;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.ParticleRadius = Context.MapUpdate.Local.Collision.ParticleRadius;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.ParticleRadius = Context.MapUpdate.Local.Collision.ParticleRadius;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.ParticleRestitutionCoeffiecient = Context.MapUpdate.Constants.Emitter.Collision.Restitution;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.ParticleRestitutionCoeffiecient = Context.MapUpdate.Constants.Emitter.Collision.Restitution;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.CollisionNormalRandomizationPercentage = Context.MapUpdate.Constants.Emitter.Collision.RandomizeCollisionNormal;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.CollisionNormalRandomizationPercentage = Context.MapUpdate.Constants.Emitter.Collision.RandomizeCollisionNormal;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.CollisionEnabled = Context.MapUpdate.Collision.CollisionEnabled;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.CollisionEnabled = Context.MapUpdate.Collision.CollisionEnabled;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.RandomizeCollisionNormal = Context.MapUpdate.Collision.RandomizeCollisionNormalVector;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.RandomizeCollisionNormal = Context.MapUpdate.Collision.RandomizeCollisionNormalVector;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.UpdateRotationalVelocity = Context.MapUpdate.Local.UpdateMeshRotation;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.UpdateRotationalVelocity = Context.MapUpdate.Local.UpdateMeshRotation;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.BounceCollisionFriction = Context.MapUpdate.Constants.Emitter.Collision.FrictionDuringaBounce;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.BounceCollisionFriction = Context.MapUpdate.Constants.Emitter.Collision.FrictionDuringaBounce;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.AllowOffscreenDepthBufferParticlesToLive = Context.MapUpdate.Collision.AllowOffscreenDepthBufferCollisionParticlesToLiveAfteraBounce;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.AllowOffscreenDepthBufferParticlesToLive = Context.MapUpdate.Collision.AllowOffscreenDepthBufferCollisionParticlesToLiveAfteraBounce;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.KillOccludedParticles = Context.MapUpdate.Collision.KillOccludedParticles;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.KillOccludedParticles = Context.MapUpdate.Collision.KillOccludedParticles;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.DeltaTime = Context.MapUpdate.Physics.DeltaTime;
	float3 Constant159 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.TraceOrigin = Constant159;
	float3 Constant160 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ForceContribution = Constant160;
	float3 Constant161 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.AttemptedMovementThisUpdate = Constant161;
	float3 Constant162 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.InitialForceDividedByMass = Constant162;
	float Constant163 = 1;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.TraceVectorLengthMultiplier = Constant163;
	float Constant164 = 1e+10;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.MaxTraceLength = Constant164;
	float3 Constant165 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.TraceWorldStart = Constant165;
	float3 Constant166 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.TraceWorldEnd = Constant166;
	float Constant167 = 50;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.DepthBufferBackfaceThickness = Constant167;
	bool Constant168 = (false);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ReturnedCollisionValidBool = Constant168;
	float3 Constant169 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ReturnedCollisionWorldPosition = Constant169;
	float3 Constant170 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ReturnedCollisionNormal = Constant170;
	float Constant171 = (0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ReturnedFriction = Constant171;
	float Constant172 = (0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ReturnedRestitution = Constant172;
	bool Constant173 = (false);
	Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse.ParticleOnScreen = Constant173;
	float3 Constant174 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.PlaneNormal = Constant174;
	float3 Constant175 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.PlanePivotPoint = Constant175;
	float Constant176 = (0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.Physics.DeltaTime = Constant176;
	float Constant177 = (0.0);
	Context.MapUpdate.Collision.Collision.CollisionQueryAndResponse.PenetrationDistance = Constant177;
	bool Constant178 = (false);
	Context.MapUpdate.Physics.Collision.CollisionQueryAndResponse.CollidesThisFrame = Constant178;
	bool Constant179 = false;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.RemoveRestitution = Constant179;
	float3 Constant180 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ReflectedVelocity = Constant180;
	float Constant181 = (0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.NormalForceInNewtons = Constant181;
	int Constant182 = 0;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.CPUFrictionMergeType = Constant182;
	float3 Constant183 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.FrictionForceVectorInNewtons = Constant183;
	float3 Constant184 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.FrictionForceVelocityVector = Constant184;
	float3 Constant185 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ReflectedVelocityWithFrictionApplied = Constant185;
	Collision_CollisionQueryAndResponse_Emitter_Func_(Context);
	Context.MapUpdate.OUTPUT_VAR.Collision.Collision1Valid = Context.MapUpdate.Collision.Valid;
	Context.MapUpdate.OUTPUT_VAR.Collision.Collision1Normal = Context.MapUpdate.Collision.Normal;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.DeltaTime = Context.MapUpdate.Physics.DeltaTime;
	float3 Constant247 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.TraceOrigin = Constant247;
	float3 Constant248 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ForceContribution = Constant248;
	float3 Constant249 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.AttemptedMovementThisUpdate = Constant249;
	float3 Constant250 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.InitialForceDividedByMass = Constant250;
	float Constant251 = 1;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.TraceVectorLengthMultiplier = Constant251;
	float Constant252 = 1e+10;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.MaxTraceLength = Constant252;
	float3 Constant253 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.TraceWorldStart = Constant253;
	float3 Constant254 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.TraceWorldEnd = Constant254;
	float Constant255 = 50;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.DepthBufferBackfaceThickness = Constant255;
	bool Constant256 = (false);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ReturnedCollisionValidBool = Constant256;
	float3 Constant257 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ReturnedCollisionWorldPosition = Constant257;
	float3 Constant258 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ReturnedCollisionNormal = Constant258;
	float Constant259 = (0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ReturnedFriction = Constant259;
	float Constant260 = (0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ReturnedRestitution = Constant260;
	bool Constant261 = (false);
	Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse001.ParticleOnScreen = Constant261;
	float3 Constant262 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.PlaneNormal = Constant262;
	float3 Constant263 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.PlanePivotPoint = Constant263;
	float Constant264 = (0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.Physics.DeltaTime = Constant264;
	float Constant265 = (0.0);
	Context.MapUpdate.Collision.Collision.CollisionQueryAndResponse001.PenetrationDistance = Constant265;
	bool Constant266 = (false);
	Context.MapUpdate.Physics.Collision.CollisionQueryAndResponse001.CollidesThisFrame = Constant266;
	bool Constant267 = false;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.RemoveRestitution = Constant267;
	float3 Constant268 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ReflectedVelocity = Constant268;
	float Constant269 = (0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.NormalForceInNewtons = Constant269;
	int Constant270 = 0;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.CPUFrictionMergeType = Constant270;
	float3 Constant271 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.FrictionForceVectorInNewtons = Constant271;
	float3 Constant272 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.FrictionForceVelocityVector = Constant272;
	float3 Constant273 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ReflectedVelocityWithFrictionApplied = Constant273;
	Collision_CollisionQueryAndResponse001_Emitter_Func_(Context);
	Context.MapUpdate.OUTPUT_VAR.Collision.Collision2Valid = Context.MapUpdate.Collision.Valid;
	Context.MapUpdate.OUTPUT_VAR.Collision.Collision2Normal = Context.MapUpdate.Collision.Normal;
	bool Result257 = Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse001.ParticleOnScreen && Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse.ParticleOnScreen;
	bool Result258 = !Result257;
	float Result259 = Context.MapUpdate.Particles.Collision.OffscreenCounter + Context.MapUpdate.Engine.DeltaTime;
	float Constant298 = 0;
	float float_IfResult13;
	if(Result258)
	{
	float_IfResult13 = Result259;
	}
	else
	{
	float_IfResult13 = Constant298;
	}
	Context.MapUpdate.Particles.Collision.OffscreenCounter = float_IfResult13;
	bool Result260 = Context.MapUpdate.Particles.Collision.OffscreenCounter < Context.MapUpdate.Constants.Emitter.Collision.Maximumtimeoffscreen;
	bool Result261 = Context.MapUpdate.DataInstance.Alive && Result260;
	Context.MapUpdate.DataInstance.Alive = Result261;
	bool Result262 = Context.MapUpdate.Collision.Valid || Context.MapUpdate.OUTPUT_VAR.Collision.Collision1Valid;
	int Constant299 = 1;
	int Result263 = Context.MapUpdate.Particles.NumberOfCollisions + Constant299;
	int int32_IfResult;
	if(Result262)
	{
	int32_IfResult = Result263;
	}
	else
	{
	int32_IfResult = Context.MapUpdate.Particles.NumberOfCollisions;
	}
	Context.MapUpdate.Collision.Valid = Result262;
	Context.MapUpdate.OUTPUT_VAR.Collision.Valid = Result262;
	Context.MapUpdate.Particles.NumberOfCollisions = int32_IfResult;
	float Constant300 = 0;
	bool Result264 = Context.MapUpdate.Collision.Collision.CollisionQueryAndResponse.PenetrationDistance < Constant300;
	float Constant301 = 0;
	bool Result265 = Context.MapUpdate.Collision.Collision.CollisionQueryAndResponse001.PenetrationDistance < Constant301;
	bool Result266 = Result264 && Result265;
	float PenetrationFixed1;
	float PenetrationFixed2;
	PenetrationFixed1 = Result264;
	PenetrationFixed2 = Result265;
	float Result267 = PenetrationFixed1 + PenetrationFixed2;
	float Constant302 = 0.5;
	float Result268 = Result267 * Constant302;
	float Result269 = Context.MapUpdate.Engine.DeltaTime * Context.MapUpdate.Constants.Emitter.Collision.RestStateTimeRange;
	float Result270 = lerp(Context.MapUpdate.Particles.RestCounter,Result268,Result269);
	bool Result271 = Result270 > Context.MapUpdate.Constants.Emitter.Collision.PercentageofPenetrationBeforeRest;
	float Constant303 = -1;
	float Result272 = Context.MapUpdate.Collision.Collision.CollisionQueryAndResponse.PenetrationDistance * Constant303;
	bool Result273 = Result272 > Context.MapUpdate.Collision.Collision.CollisionQueryAndResponse001.PenetrationDistance;
	float Constant304 = -1;
	float Result274 = Context.MapUpdate.Constants.Emitter.Collision.MaximumPenetrationCorrectionDistance * Constant304;
	bool Result275 = Result274 > Context.MapUpdate.Collision.Collision.CollisionQueryAndResponse001.PenetrationDistance;
	bool Result276 = Result273 || Result275;
	bool Result277 = Result266 || Result271 || Result276;
	float3 Constant305 = float3(0,0,0);
	float3 Vector_IfResult13;
	if(Context.MapUpdate.OUTPUT_VAR.Collision.Collision1Valid)
	{
	Vector_IfResult13 = Context.MapUpdate.OUTPUT_VAR.Collision.Collision1Normal;
	}
	else
	{
	Vector_IfResult13 = Constant305;
	}
	float3 Constant306 = float3(0,0,0);
	float3 Vector_IfResult14;
	if(Context.MapUpdate.OUTPUT_VAR.Collision.Collision2Valid)
	{
	Vector_IfResult14 = Context.MapUpdate.OUTPUT_VAR.Collision.Collision2Normal;
	}
	else
	{
	Vector_IfResult14 = Constant306;
	}
	float3 Result278 = Vector_IfResult13 + Vector_IfResult14;
	float3 Constant307 = float3(0,0,1);
	float Constant308 = 1e-05;
	float3 DirectionAndLengthSafe_Func_Output_Direction11;
	float DirectionAndLengthSafe_Func_Output_Length11;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold11;
	DirectionAndLengthSafe_Func_(Result278, Constant307, Constant308, DirectionAndLengthSafe_Func_Output_Direction11, DirectionAndLengthSafe_Func_Output_Length11, DirectionAndLengthSafe_Func_Output_BelowThreshold11, Context);
	float Result279 = dot(DirectionAndLengthSafe_Func_Output_Direction11,Context.MapUpdate.Constants.Emitter.Collision.ValidCollisionPlaneNormalForRest);
	float Constant309 = 0.5;
	float Result280 = Context.MapUpdate.Constants.Emitter.Collision.MinimumCollisionNormalASC47RestNormalAlignmentPercentage - Constant309;
	float Constant310 = 2;
	float Result281 = Result280 * Constant310;
	bool Result282 = Result279 > Result281;
	bool Result283 = Result277 && Result282;
	bool bool_IfResult1;
	if(Context.MapUpdate.Collision.ControlRestStateViaSurfaceNormal)
	{
	bool_IfResult1 = Result283;
	}
	else
	{
	bool_IfResult1 = Result277;
	}
	bool Result284 = Context.MapUpdate.Collision.EnableRestState && bool_IfResult1 && Context.MapUpdate.Collision.CollisionEnabled;
	float3 Constant311 = float3(0,0,0);
	float3 Constant312 = float3(0,0,0);
	float3 Constant313 = float3(0,0,0);
	float3 Position_IfResult;
	float3 Velocity_IfResult2;
	float3 Force_IfResult;
	float deltatime_IfResult;
	if(Context.MapUpdate.Collision.Valid)
	{
	Position_IfResult = Context.MapUpdate.Particles.Position;
	Velocity_IfResult2 = Context.MapUpdate.Particles.Velocity;
	Force_IfResult = Constant313;
	deltatime_IfResult = Context.MapUpdate.Physics.DeltaTime;
	}
	else
	{
	Position_IfResult = Context.MapUpdate.Temp.Collision.PreviousPosition;
	Velocity_IfResult2 = Context.MapUpdate.Temp.Collision.PreviousVelocity;
	Force_IfResult = Context.MapUpdate.Temp.Collision.PreviousForce;
	deltatime_IfResult = Context.MapUpdate.Engine.DeltaTime;
	}
	float3 Position_IfResult1;
	float3 Velocity_IfResult3;
	float3 Force_IfResult1;
	float deltatime_IfResult1;
	if(Result284)
	{
	Position_IfResult1 = Context.MapUpdate.Temp.Collision.PreviousPosition;
	Velocity_IfResult3 = Constant311;
	Force_IfResult1 = Constant312;
	deltatime_IfResult1 = deltatime_IfResult;
	}
	else
	{
	Position_IfResult1 = Position_IfResult;
	Velocity_IfResult3 = Velocity_IfResult2;
	Force_IfResult1 = Force_IfResult;
	deltatime_IfResult1 = deltatime_IfResult;
	}
	int Constant314 = 1;
	int Constant315 = 0;
	bool Constant316 = false;
	float3 Collision_TransformPosition001_Emitter_Func_Output_OutPosition;
	Collision_TransformPosition001_Emitter_Func_(Position_IfResult1, Constant314, Constant315, Constant316, Collision_TransformPosition001_Emitter_Func_Output_OutPosition, Context);
	int Constant318 = 1;
	int Constant319 = 0;
	bool Constant320 = false;
	float3 Collision_TransformVector001_Emitter_Func_Output_OutVector;
	Collision_TransformVector001_Emitter_Func_(Velocity_IfResult3, Constant318, Constant319, Constant320, Collision_TransformVector001_Emitter_Func_Output_OutVector, Context);
	int Constant322 = 1;
	int Constant323 = 0;
	bool Constant324 = false;
	float3 Collision_TransformVector_Emitter_Func_Output_OutVector;
	Collision_TransformVector_Emitter_Func_(Force_IfResult1, Constant322, Constant323, Constant324, Collision_TransformVector_Emitter_Func_Output_OutVector, Context);
	bool Result288 = Result271 && Context.MapUpdate.Collision.CollisionEnabled;
	Context.MapUpdate.Particles.Position = Collision_TransformPosition001_Emitter_Func_Output_OutPosition;
	Context.MapUpdate.Particles.Velocity = Collision_TransformVector001_Emitter_Func_Output_OutVector;
	Context.MapUpdate.Physics.Force = Collision_TransformVector_Emitter_Func_Output_OutVector;
	Context.MapUpdate.Physics.DeltaTime = deltatime_IfResult1;
	Context.MapUpdate.Collision.IsResting = Result288;
	Context.MapUpdate.Particles.RestCounter = Result270;
	Context.MapUpdate.OUTPUT_VAR.Collision.CombinedCollisionNormal = DirectionAndLengthSafe_Func_Output_Direction11;
	Context.MapUpdate.Collision.AdvancedAgingRate = Context.MapUpdate.Constants.Emitter.Collision.AdvancedAgingRate;
}

void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime = Context.MapUpdate.SolveForcesAndVelocity.DeltaTime;
	Context.MapUpdate.Local.SolveForcesAndVelocity.Physics.Force = Context.MapUpdate.SolveForcesAndVelocity.Force;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.Local.SolveForcesAndVelocity.Mass = Context.MapUpdate.SolveForcesAndVelocity.Mass;
	float Constant333 = 0.0001;
	float Result289 = max(Context.MapUpdate.Local.SolveForcesAndVelocity.Mass, Constant333);
	float Result290 = Reciprocal(Result289);
	float3 Result291 = Result290 * Context.MapUpdate.Local.SolveForcesAndVelocity.Physics.Force;
	Context.MapUpdate.Local.SolveForcesAndVelocity.Physics.Force = Result291;
	float Result292 = Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime * Context.MapUpdate.Physics.Drag;
	float Constant334 = 0;
	float Constant335 = 1;
	float Result293 = clamp(Result292,Constant334,Constant335);
	float Result294 = -(Result293);
	float3 Result295 = Context.MapUpdate.Local.SolveForcesAndVelocity.Physics.Force * Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime + Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float3 Result296 = Result294 * Result295 + Result295;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Result296;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float3 Result297 = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity * Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime + Context.MapUpdate.SolveForcesAndVelocity.Position;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position = Result297;
	float3 Position_IfResult2;
	float3 Velocity_IfResult4;
	float3 PreviousVelocity_IfResult;
	if(Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	Position_IfResult2 = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position;
	Velocity_IfResult4 = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	}
	else
	{
	Position_IfResult2 = Context.MapUpdate.SolveForcesAndVelocity.Position;
	Velocity_IfResult4 = Context.MapUpdate.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.MapUpdate.SolveForcesAndVelocity.PreviousVelocity;
	}
	Context.MapUpdate.Particles.Position = Position_IfResult2;
	Context.MapUpdate.Particles.Velocity = Velocity_IfResult4;
	Context.MapUpdate.Particles.PreviousVelocity = PreviousVelocity_IfResult;
}

float GetSpawnInterpolation()
{
	return HackSpawnInterp;
}


void InterpolateParameters(inout FSimulationContext Context)
{
	int InterpSpawn_Index = GInterpSpawnIndex;
	float InterpSpawn_SpawnTime = Emitter_InterpSpawnStartDt + (Emitter_SpawnInterval * InterpSpawn_Index);
	float InterpSpawn_UpdateTime = Engine_DeltaTime - InterpSpawn_SpawnTime;
	float InterpSpawn_InvSpawnTime = 1.0 / InterpSpawn_SpawnTime;
	float InterpSpawn_InvUpdateTime = 1.0 / InterpSpawn_UpdateTime;
	float SpawnInterp = InterpSpawn_SpawnTime * Engine_InverseDeltaTime ;
	HackSpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.InterpSpawn_Index = InterpSpawn_Index;
	Context.MapSpawn.Interpolation.InterpSpawn_SpawnTime = InterpSpawn_SpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_UpdateTime = InterpSpawn_UpdateTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvSpawnTime = InterpSpawn_InvSpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvUpdateTime = InterpSpawn_InvUpdateTime;
	Context.MapSpawn.Interpolation.SpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.Emitter_SpawnInterval = Emitter_SpawnInterval;
	Context.MapSpawn.Interpolation.Emitter_InterpSpawnStartDt = Emitter_InterpSpawnStartDt;
	Context.MapSpawn.Interpolation.Emitter_SpawnGroup = Emitter_SpawnGroup;
	Context.MapSpawn.Engine.Owner.Position = lerp(PREV_Engine_Owner_Position.xyz, Engine_Owner_Position.xyz, SpawnInterp);
	Context.MapSpawn.Emitter.Age = lerp(PREV_Emitter_Age, Emitter_Age, SpawnInterp);
	Context.MapSpawn.Emitter.AlphaScale = lerp(PREV_Emitter_AlphaScale, Emitter_AlphaScale, SpawnInterp);
	Context.MapSpawn.Engine.Time = lerp(PREV_Engine_Time, Engine_Time, SpawnInterp);
	Context.MapSpawn.Engine.DeltaTime = 0.0f;
	Context.MapSpawn.Engine.InverseDeltaTime = 0.0f;
	Context.MapUpdate.Engine.DeltaTime = InterpSpawn_UpdateTime;
	Context.MapUpdate.Engine.InverseDeltaTime = InterpSpawn_InvUpdateTime;
}

void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void SimulateMapSpawn(inout FSimulationContext Context)
{


	float Constant = 1;
	Context.MapSpawn.Particles.Lifetime = Constant;
	float4 Constant1 = float4(1,1,1,1);
	Context.MapSpawn.Particles.Color = Constant1;
	float Constant2 = 1;
	Context.MapSpawn.Particles.Mass = Constant2;
	float2 Constant3 = float2(10,10);
	Context.MapSpawn.Particles.SpriteSize = Constant3;
	float Constant4 = 0;
	Context.MapSpawn.Particles.SpriteRotation = Constant4;
	float3 Constant5 = float3(1,1,1);
	Context.MapSpawn.Particles.Scale = Constant5;
	float Constant6 = 0;
	Context.MapSpawn.Particles.MaterialRandom = Constant6;
	float3 Constant7 = float3(0.0,0.0,0.0);
	Context.MapSpawn.Particles.NewPosition = Constant7;
	float Constant8 = 0;
	Context.MapSpawn.Particles.Age = Constant8;
	float Constant9 = (0.0);
	Context.MapSpawn.Particles.NormalizedAge = Constant9;
	float3 Constant10 = float3(0,0,0);
	Context.MapSpawn.Particles.Velocity = Constant10;
	int Constant11 = (0);
	Context.MapSpawn.Particles.Collision.CollisionQueryAndResponse.CollisionID = Constant11;
	bool Constant12 = false;
	Context.MapSpawn.Particles.HasCollided = Constant12;
	int Constant13 = (0);
	Context.MapSpawn.Particles.Collision.CollisionQueryAndResponse001.CollisionID = Constant13;
	float Constant14 = 0;
	Context.MapSpawn.Particles.Collision.OffscreenCounter = Constant14;
	int Constant15 = 0;
	Context.MapSpawn.Particles.NumberOfCollisions = Constant15;
	float Constant16 = 0;
	Context.MapSpawn.Particles.RestCounter = Constant16;

	bool Constant17 = false;
	Context.MapSpawn.UniformRangedFloat005.OverrideRandomness = Constant17;
	int Constant18 = 0;
	Context.MapSpawn.UniformRangedFloat005.RandomnessMode = Constant18;
	bool Constant19 = false;
	Context.MapSpawn.UniformRangedFloat005.OverrideSeed = Constant19;
	bool Constant20 = false;
	Context.MapSpawn.UniformRangedFloat005.FixedRandomSeed = Constant20;
	float UniformRangedFloat005_Emitter_Func_Output_UniformRangedFloat;
	UniformRangedFloat005_Emitter_Func_(UniformRangedFloat005_Emitter_Func_Output_UniformRangedFloat, Context);
	Context.MapSpawn.NormalizedAngleToDegrees001.NormalizedAngle = UniformRangedFloat005_Emitter_Func_Output_UniformRangedFloat;
	bool Constant35 = false;
	Context.MapSpawn.UniformRangedFloat004.OverrideRandomness = Constant35;
	int Constant36 = 0;
	Context.MapSpawn.UniformRangedFloat004.RandomnessMode = Constant36;
	bool Constant37 = false;
	Context.MapSpawn.UniformRangedFloat004.OverrideSeed = Constant37;
	bool Constant38 = false;
	Context.MapSpawn.UniformRangedFloat004.FixedRandomSeed = Constant38;
	float UniformRangedFloat004_Emitter_Func_Output_UniformRangedFloat;
	UniformRangedFloat004_Emitter_Func_(UniformRangedFloat004_Emitter_Func_Output_UniformRangedFloat, Context);
	bool Constant41 = true;
	bool Constant42 = true;
	float NormalizedAngleToDegrees001_Emitter_Func_Output_NewOutput;
	NormalizedAngleToDegrees001_Emitter_Func_(NormalizedAngleToDegrees001_Emitter_Func_Output_NewOutput, Context);
	bool Constant44 = false;
	bool Constant45 = false;
	float3 ParticleOwnerPosition_Emitter_Func_Output_OutPosition;
	ParticleOwnerPosition_Emitter_Func_(ParticleOwnerPosition_Emitter_Func_Output_OutPosition, Context);
	bool Constant48 = false;
	bool Constant49 = true;
	bool Constant50 = false;
	Context.MapSpawn.UniformRangedFloat003.OverrideRandomness = Constant50;
	int Constant51 = 0;
	Context.MapSpawn.UniformRangedFloat003.RandomnessMode = Constant51;
	bool Constant52 = false;
	Context.MapSpawn.UniformRangedFloat003.OverrideSeed = Constant52;
	bool Constant53 = false;
	Context.MapSpawn.UniformRangedFloat003.FixedRandomSeed = Constant53;
	float UniformRangedFloat003_Emitter_Func_Output_UniformRangedFloat;
	UniformRangedFloat003_Emitter_Func_(UniformRangedFloat003_Emitter_Func_Output_UniformRangedFloat, Context);
	Context.MapSpawn.InitializeParticle.Mass = UniformRangedFloat004_Emitter_Func_Output_UniformRangedFloat;
	Context.MapSpawn.InitializeParticle.WriteColor = Constant41;
	Context.MapSpawn.InitializeParticle.WriteSpriteRotation = Constant42;
	Context.MapSpawn.InitializeParticle.SpriteRotation = NormalizedAngleToDegrees001_Emitter_Func_Output_NewOutput;
	Context.MapSpawn.InitializeParticle.WritePosition = Constant44;
	Context.MapSpawn.InitializeParticle.Position = ParticleOwnerPosition_Emitter_Func_Output_OutPosition;
	Context.MapSpawn.InitializeParticle.WriteMass = Constant48;
	Context.MapSpawn.InitializeParticle.WriteSpriteSize = Constant49;
	Context.MapSpawn.InitializeParticle.Lifetime = UniformRangedFloat003_Emitter_Func_Output_UniformRangedFloat;
	bool Constant56 = true;
	Context.MapSpawn.InitializeParticle.WriteLifetime = Constant56;
	bool Constant57 = false;
	Context.MapSpawn.InitializeParticle.WriteScale = Constant57;
	float3 InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition;
	InitializeParticle_SimulationPosition_Emitter_Func_(InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition, Context);
	Context.MapSpawn.Particles.Position = InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition;
	bool Constant60 = true;
	Context.MapSpawn.InitializeParticle.WriteMaterialRandom = Constant60;
	float Constant61 = 0;
	float Constant62 = 1;
	int Constant63 = -1;
	int Constant64 = 0;
	bool Constant65 = false;
	float RandomRange_Func_Output_Result3;
	RandomRange_Func_(Constant61, Constant62, Constant63, Constant64, Constant65, RandomRange_Func_Output_Result3, Context);
	Context.MapSpawn.InitializeParticle.MaterialRandom = RandomRange_Func_Output_Result3;
	EnterStatScope(1 );
	InitializeParticle_Emitter_Func_(Context);
	ExitStatScope( );
	EnterStatScope(2 );
	SampleMeshScript001_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapSpawn.SetVariables_AF432E7748615D46285AADB56FA3CE5E.Particles.NewPosition = Context.MapSpawn.Particles.NewPosition;
	EnterStatScope(3 );
	SetVariables_AF432E7748615D46285AADB56FA3CE5E_Emitter_Func_(Context);
	ExitStatScope( );




	Context.MapSpawn.Particles.PreviousVelocity = Context.MapSpawn.Particles.Velocity;



}
void SimulateMapUpdate(inout FSimulationContext Context)
{

	bool Constant97 = true;
	Context.MapUpdate.DataInstance.Alive = Constant97;
	Context.MapUpdate.UpdateAge.DeltaTime = Context.MapUpdate.Engine.DeltaTime;
	Context.MapUpdate.UpdateAge.Lifetime = Context.MapUpdate.Particles.Lifetime;
	EnterStatScope(4 );
	UpdateAge_Emitter_Func_(Context);
	ExitStatScope( );
	float4 Constant101 = float4(1,1,1,1);
	Context.MapUpdate.OUTPUT_VAR.SampleTexture.SampledColor = Constant101;
	Context.MapUpdate.MakeVector3_FromColor001.Color = Context.MapUpdate.OUTPUT_VAR.SampleTexture.SampledColor;
	Context.MapUpdate.ColorFromCurve.CurveIndex = Context.MapUpdate.Particles.NormalizedAge;
	float4 ColorFromCurve_Emitter_Func_Output_Value;
	ColorFromCurve_Emitter_Func_(ColorFromCurve_Emitter_Func_Output_Value, Context);
	float3 MakeVector3_FromColor001_Emitter_Func_Output_Vector;
	MakeVector3_FromColor001_Emitter_Func_(MakeVector3_FromColor001_Emitter_Func_Output_Vector, Context);
	Context.MapUpdate.Color.Color = ColorFromCurve_Emitter_Func_Output_Value;
	Context.MapUpdate.Color.ScaleColor = MakeVector3_FromColor001_Emitter_Func_Output_Vector;
	EnterStatScope(5 );
	Color_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.FloatFromCurve001.CurveIndex = Context.MapUpdate.Particles.NormalizedAge;
	float FloatFromCurve001_Emitter_Func_Output_Value;
	FloatFromCurve001_Emitter_Func_(FloatFromCurve001_Emitter_Func_Output_Value, Context);
	Context.MapUpdate.SmoothLerpOverTime_Vector.SmoothValue = Context.MapUpdate.Particles.Position;
	Context.MapUpdate.SmoothLerpOverTime_Vector.TargetValue = Context.MapUpdate.Particles.NewPosition;
	Context.MapUpdate.SmoothLerpOverTime_Vector.ConvergenceRate = FloatFromCurve001_Emitter_Func_Output_Value;
	float3 SmoothLerpOverTime_Vector_Emitter_Func_Output_NewSmoothValue;
	SmoothLerpOverTime_Vector_Emitter_Func_(SmoothLerpOverTime_Vector_Emitter_Func_Output_NewSmoothValue, Context);
	Context.MapUpdate.SetVariables_C24DA8694ED1CFDB365D9582A5B9F487.Particles.Position = SmoothLerpOverTime_Vector_Emitter_Func_Output_NewSmoothValue;
	EnterStatScope(6 );
	SetVariables_C24DA8694ED1CFDB365D9582A5B9F487_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant102 = false;
	Context.MapUpdate.Collision.EnableRestState = Constant102;
	float Constant103 = (0.0);
	Context.MapUpdate.Local.Collision.ParticleRadius = Constant103;
	float3 Constant104 = float3(0,0,0);
	Context.MapUpdate.Physics.Force = Constant104;
	bool Constant105 = false;
	float3 Constant106 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Temp.Collision.PreviousPosition = Constant106;
	float3 Constant107 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Temp.Collision.PreviousForce = Constant107;
	float3 Constant108 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Temp.Collision.PreviousVelocity = Constant108;
	bool Constant109 = true;
	Context.MapUpdate.Collision.CollisionEnabled = Constant109;
	bool Constant110 = false;
	Context.MapUpdate.Collision.RandomizeCollisionNormalVector = Constant110;
	bool Constant111 = false;
	Context.MapUpdate.Local.UpdateMeshRotation = Constant111;
	float Constant112 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.DynamicFrictionCoefficient = Constant112;
	float Constant113 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.DynamicFrictionCoefficient = Constant113;
	float Constant114 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.StaticFrictionCoefficient = Constant114;
	float Constant115 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.StaticFrictionCoefficient = Constant115;
	float Constant116 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.StaticFrictionEngagementSpeed = Constant116;
	float Constant117 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.StaticFrictionEngagementSpeed = Constant117;
	float Constant118 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.ParticleRadius = Constant118;
	float Constant119 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.ParticleRadius = Constant119;
	float Constant120 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.ParticleRestitutionCoeffiecient = Constant120;
	float Constant121 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.ParticleRestitutionCoeffiecient = Constant121;
	float Constant122 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.CollisionNormalRandomizationPercentage = Constant122;
	float Constant123 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.CollisionNormalRandomizationPercentage = Constant123;
	bool Constant124 = (false);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.CollisionEnabled = Constant124;
	bool Constant125 = (false);
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.CollisionEnabled = Constant125;
	bool Constant126 = (false);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.RandomizeCollisionNormal = Constant126;
	bool Constant127 = (false);
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.RandomizeCollisionNormal = Constant127;
	float Constant128 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.BounceCollisionFriction = Constant128;
	float Constant129 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.BounceCollisionFriction = Constant129;
	bool Constant130 = false;
	Context.MapUpdate.Collision.AllowOffscreenDepthBufferCollisionParticlesToLiveAfteraBounce = Constant130;
	bool Constant131 = true;
	Context.MapUpdate.Collision.KillOccludedParticles = Constant131;
	bool Constant132 = (false);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.AllowOffscreenDepthBufferParticlesToLive = Constant132;
	bool Constant133 = (false);
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.AllowOffscreenDepthBufferParticlesToLive = Constant133;
	bool Constant134 = (false);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.KillOccludedParticles = Constant134;
	bool Constant135 = (false);
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.KillOccludedParticles = Constant135;
	Context.MapUpdate.Physics.DeltaTime = Context.MapUpdate.Engine.DeltaTime;
	float3 Constant136 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Collision.ParticleWorldPosition = Constant136;
	float Constant137 = (0.0);
	Context.MapUpdate.Collision.DistanceToCollision = Constant137;
	bool Constant138 = (false);
	Context.MapUpdate.Collision.Valid = Constant138;
	float3 Constant139 = float3(0,0,0);
	Context.MapUpdate.Collision.Normal = Constant139;
	float3 Constant140 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Collision.Velocity = Constant140;
	bool Constant141 = (false);
	Context.MapUpdate.OUTPUT_VAR.Collision.Collision1Valid = Constant141;
	float3 Constant142 = float3(0.0,0.0,0.0);
	Context.MapUpdate.OUTPUT_VAR.Collision.Collision1Normal = Constant142;
	bool Constant143 = (false);
	Context.MapUpdate.OUTPUT_VAR.Collision.Collision2Valid = Constant143;
	float3 Constant144 = float3(0.0,0.0,0.0);
	Context.MapUpdate.OUTPUT_VAR.Collision.Collision2Normal = Constant144;
	bool Constant145 = false;
	Context.MapUpdate.Collision.ControlRestStateViaSurfaceNormal = Constant145;
	EnterStatScope(7 );
	Collision_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.SolveForcesAndVelocity.DeltaTime = Context.MapUpdate.Physics.DeltaTime;
	float Constant326 = (0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime = Constant326;
	Context.MapUpdate.SolveForcesAndVelocity.Force = Context.MapUpdate.Physics.Force;
	Context.MapUpdate.SolveForcesAndVelocity.Velocity = Context.MapUpdate.Particles.Velocity;
	Context.MapUpdate.SolveForcesAndVelocity.Mass = Context.MapUpdate.Particles.Mass;
	float3 Constant327 = float3(0.0,0.0,0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.Physics.Force = Constant327;
	float3 Constant328 = float3(0.0,0.0,0.0);
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Constant328;
	float Constant329 = (0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.Mass = Constant329;
	float Constant330 = 0;
	Context.MapUpdate.Physics.Drag = Constant330;
	Context.MapUpdate.SolveForcesAndVelocity.PreviousVelocity = Context.MapUpdate.Particles.PreviousVelocity;
	Context.MapUpdate.SolveForcesAndVelocity.Position = Context.MapUpdate.Particles.Position;
	float3 Constant331 = float3(0.0,0.0,0.0);
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position = Constant331;
	bool Constant332 = true;
	Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties = Constant332;
	EnterStatScope(8 );
	SolveForcesAndVelocity_Emitter_Func_(Context);
	ExitStatScope( );



}
Buffer<uint> IndexBuffer_Particles_StaticMesh;
Buffer<float> VertexBuffer_Particles_StaticMesh;
Buffer<float4> TangentBuffer_Particles_StaticMesh;
Buffer<float2> TexCoordBuffer_Particles_StaticMesh;
Buffer<float4> ColorBuffer_Particles_StaticMesh;
Buffer<uint4> SectionBuffer_Particles_StaticMesh;
Buffer<uint4> TriangleBuffer_Particles_StaticMesh;
uint SectionCount_Particles_StaticMesh;
float4x4 InstanceTransform_Particles_StaticMesh;
float4x4 InstanceTransformInverseTransposed_Particles_StaticMesh;
float4x4 InstancePrevTransform_Particles_StaticMesh;
float InstanceInvDeltaTime_Particles_StaticMesh;
float4 InstanceWorldVelocity_Particles_StaticMesh;
uint AreaWeightedSamplingName_Particles_StaticMesh;
uint NumTexCoordName_Particles_StaticMesh;
Buffer<uint> IndexBuffer_Particles_StaticMesh2;
Buffer<float> VertexBuffer_Particles_StaticMesh2;
Buffer<float4> TangentBuffer_Particles_StaticMesh2;
Buffer<float2> TexCoordBuffer_Particles_StaticMesh2;
Buffer<float4> ColorBuffer_Particles_StaticMesh2;
Buffer<uint4> SectionBuffer_Particles_StaticMesh2;
Buffer<uint4> TriangleBuffer_Particles_StaticMesh2;
uint SectionCount_Particles_StaticMesh2;
float4x4 InstanceTransform_Particles_StaticMesh2;
float4x4 InstanceTransformInverseTransposed_Particles_StaticMesh2;
float4x4 InstancePrevTransform_Particles_StaticMesh2;
float InstanceInvDeltaTime_Particles_StaticMesh2;
float4 InstanceWorldVelocity_Particles_StaticMesh2;
uint AreaWeightedSamplingName_Particles_StaticMesh2;
uint NumTexCoordName_Particles_StaticMesh2;
Buffer<uint> IndexBuffer_Particles_StaticMesh3;
Buffer<float> VertexBuffer_Particles_StaticMesh3;
Buffer<float4> TangentBuffer_Particles_StaticMesh3;
Buffer<float2> TexCoordBuffer_Particles_StaticMesh3;
Buffer<float4> ColorBuffer_Particles_StaticMesh3;
Buffer<uint4> SectionBuffer_Particles_StaticMesh3;
Buffer<uint4> TriangleBuffer_Particles_StaticMesh3;
uint SectionCount_Particles_StaticMesh3;
float4x4 InstanceTransform_Particles_StaticMesh3;
float4x4 InstanceTransformInverseTransposed_Particles_StaticMesh3;
float4x4 InstancePrevTransform_Particles_StaticMesh3;
float InstanceInvDeltaTime_Particles_StaticMesh3;
float4 InstanceWorldVelocity_Particles_StaticMesh3;
uint AreaWeightedSamplingName_Particles_StaticMesh3;
uint NumTexCoordName_Particles_StaticMesh3;

Buffer<float> CurveLUT_Color_ColorCurve;
float MinTime_Color_ColorCurve;
float MaxTime_Color_ColorCurve;
float InvTimeRange_Color_ColorCurve;

float TimeToLUTFraction_Color_ColorCurve(float T)
{
	return saturate((T - MinTime_Color_ColorCurve) * InvTimeRange_Color_ColorCurve);
}
float SampleCurve_Color_ColorCurve(float T)
{
	return CurveLUT_Color_ColorCurve[(uint)T];
}


Buffer<float> CurveLUT_ConvergenceRate_Particles_Position_FloatCurve;
float MinTime_ConvergenceRate_Particles_Position_FloatCurve;
float MaxTime_ConvergenceRate_Particles_Position_FloatCurve;
float InvTimeRange_ConvergenceRate_Particles_Position_FloatCurve;

float TimeToLUTFraction_ConvergenceRate_Particles_Position_FloatCurve(float T)
{
	return saturate((T - MinTime_ConvergenceRate_Particles_Position_FloatCurve) * InvTimeRange_ConvergenceRate_Particles_Position_FloatCurve);
}
float SampleCurve_ConvergenceRate_Particles_Position_FloatCurve(float T)
{
	return CurveLUT_ConvergenceRate_Particles_Position_FloatCurve[(uint)T];
}


			void RandomTriCoord_ParticlesStaticMesh (out MeshTriCoordinate Out_Coord)
			{
				float RandS0 = NiagaraInternalNoise(1, 2, 3);


				uint SectionIndex = min(uint(RandS0 * float(SectionCount_Particles_StaticMesh)), SectionCount_Particles_StaticMesh-1);
				uint4 SectionData = SectionBuffer_Particles_StaticMesh[SectionIndex];


				float RandS1 = NiagaraInternalNoise(1, 2, 3);
				if( RandS1 > asfloat(SectionData.z) )
				{
					SectionData = SectionBuffer_Particles_StaticMesh[SectionData.w];
				}

				uint SectionFirstTriangle = SectionData.x;
				uint SectionTriangleCount = SectionData.y;

				float RandT0 = NiagaraInternalNoise(1, 2, 3);
				[branch]
				if(AreaWeightedSamplingName_Particles_StaticMesh==0)
				{

					Out_Coord.Tri = SectionFirstTriangle + min(uint(RandT0*float(SectionTriangleCount)), SectionTriangleCount-1);
				}
				else
				{

					uint TriangleIndex = min(uint(RandT0*float(SectionTriangleCount)), SectionTriangleCount-1);
					uint4 TriangleData = TriangleBuffer_Particles_StaticMesh[SectionFirstTriangle + TriangleIndex];


					float RandT1 = NiagaraInternalNoise(1, 2, 3);
					if( RandT1 > asfloat(TriangleData.x) )
					{
						TriangleIndex = TriangleData.y;
					}
					Out_Coord.Tri = SectionFirstTriangle + TriangleIndex;
				}

				float r0 = NiagaraInternalNoise(1, 2, 3);
				float r1 = NiagaraInternalNoise(1, 2, 3);
				float sqrt0 = sqrt(r0);
				float sqrt1 = sqrt(r1);
				Out_Coord.BaryCoord = float3(1.0f - sqrt0, sqrt0 * (1.0 - r1), r1 * sqrt0);
			}


			void GetTriPositionWS_ParticlesStaticMesh (in MeshTriCoordinate In_Coord, out float3 Out_Position)
			{
				uint TriangleIndex = In_Coord.Tri * 3;
				uint VertexIndex0 = IndexBuffer_Particles_StaticMesh[TriangleIndex ] * 3;
				uint VertexIndex1 = IndexBuffer_Particles_StaticMesh[TriangleIndex+1] * 3;
				uint VertexIndex2 = IndexBuffer_Particles_StaticMesh[TriangleIndex+2] * 3;


				float3 vertex0 = float3(VertexBuffer_Particles_StaticMesh[VertexIndex0], VertexBuffer_Particles_StaticMesh[VertexIndex0+1], VertexBuffer_Particles_StaticMesh[VertexIndex0+2]);
				float3 vertex1 = float3(VertexBuffer_Particles_StaticMesh[VertexIndex1], VertexBuffer_Particles_StaticMesh[VertexIndex1+1], VertexBuffer_Particles_StaticMesh[VertexIndex1+2]);
				float3 vertex2 = float3(VertexBuffer_Particles_StaticMesh[VertexIndex2], VertexBuffer_Particles_StaticMesh[VertexIndex2+1], VertexBuffer_Particles_StaticMesh[VertexIndex2+2]);
				float3 Position = vertex0 * In_Coord.BaryCoord.x + vertex1 * In_Coord.BaryCoord.y + vertex2 * In_Coord.BaryCoord.z;

				Out_Position = mul(float4(Position, 1.0), InstanceTransform_Particles_StaticMesh).xyz;
			}


			void RandomTriCoord_ParticlesStaticMesh2 (out MeshTriCoordinate Out_Coord)
			{
				float RandS0 = NiagaraInternalNoise(1, 2, 3);


				uint SectionIndex = min(uint(RandS0 * float(SectionCount_Particles_StaticMesh2)), SectionCount_Particles_StaticMesh2-1);
				uint4 SectionData = SectionBuffer_Particles_StaticMesh2[SectionIndex];


				float RandS1 = NiagaraInternalNoise(1, 2, 3);
				if( RandS1 > asfloat(SectionData.z) )
				{
					SectionData = SectionBuffer_Particles_StaticMesh2[SectionData.w];
				}

				uint SectionFirstTriangle = SectionData.x;
				uint SectionTriangleCount = SectionData.y;

				float RandT0 = NiagaraInternalNoise(1, 2, 3);
				[branch]
				if(AreaWeightedSamplingName_Particles_StaticMesh2==0)
				{

					Out_Coord.Tri = SectionFirstTriangle + min(uint(RandT0*float(SectionTriangleCount)), SectionTriangleCount-1);
				}
				else
				{

					uint TriangleIndex = min(uint(RandT0*float(SectionTriangleCount)), SectionTriangleCount-1);
					uint4 TriangleData = TriangleBuffer_Particles_StaticMesh2[SectionFirstTriangle + TriangleIndex];


					float RandT1 = NiagaraInternalNoise(1, 2, 3);
					if( RandT1 > asfloat(TriangleData.x) )
					{
						TriangleIndex = TriangleData.y;
					}
					Out_Coord.Tri = SectionFirstTriangle + TriangleIndex;
				}

				float r0 = NiagaraInternalNoise(1, 2, 3);
				float r1 = NiagaraInternalNoise(1, 2, 3);
				float sqrt0 = sqrt(r0);
				float sqrt1 = sqrt(r1);
				Out_Coord.BaryCoord = float3(1.0f - sqrt0, sqrt0 * (1.0 - r1), r1 * sqrt0);
			}


			void GetTriPositionWS_ParticlesStaticMesh2 (in MeshTriCoordinate In_Coord, out float3 Out_Position)
			{
				uint TriangleIndex = In_Coord.Tri * 3;
				uint VertexIndex0 = IndexBuffer_Particles_StaticMesh2[TriangleIndex ] * 3;
				uint VertexIndex1 = IndexBuffer_Particles_StaticMesh2[TriangleIndex+1] * 3;
				uint VertexIndex2 = IndexBuffer_Particles_StaticMesh2[TriangleIndex+2] * 3;


				float3 vertex0 = float3(VertexBuffer_Particles_StaticMesh2[VertexIndex0], VertexBuffer_Particles_StaticMesh2[VertexIndex0+1], VertexBuffer_Particles_StaticMesh2[VertexIndex0+2]);
				float3 vertex1 = float3(VertexBuffer_Particles_StaticMesh2[VertexIndex1], VertexBuffer_Particles_StaticMesh2[VertexIndex1+1], VertexBuffer_Particles_StaticMesh2[VertexIndex1+2]);
				float3 vertex2 = float3(VertexBuffer_Particles_StaticMesh2[VertexIndex2], VertexBuffer_Particles_StaticMesh2[VertexIndex2+1], VertexBuffer_Particles_StaticMesh2[VertexIndex2+2]);
				float3 Position = vertex0 * In_Coord.BaryCoord.x + vertex1 * In_Coord.BaryCoord.y + vertex2 * In_Coord.BaryCoord.z;

				Out_Position = mul(float4(Position, 1.0), InstanceTransform_Particles_StaticMesh2).xyz;
			}


			void RandomTriCoord_ParticlesStaticMesh3 (out MeshTriCoordinate Out_Coord)
			{
				float RandS0 = NiagaraInternalNoise(1, 2, 3);


				uint SectionIndex = min(uint(RandS0 * float(SectionCount_Particles_StaticMesh3)), SectionCount_Particles_StaticMesh3-1);
				uint4 SectionData = SectionBuffer_Particles_StaticMesh3[SectionIndex];


				float RandS1 = NiagaraInternalNoise(1, 2, 3);
				if( RandS1 > asfloat(SectionData.z) )
				{
					SectionData = SectionBuffer_Particles_StaticMesh3[SectionData.w];
				}

				uint SectionFirstTriangle = SectionData.x;
				uint SectionTriangleCount = SectionData.y;

				float RandT0 = NiagaraInternalNoise(1, 2, 3);
				[branch]
				if(AreaWeightedSamplingName_Particles_StaticMesh3==0)
				{

					Out_Coord.Tri = SectionFirstTriangle + min(uint(RandT0*float(SectionTriangleCount)), SectionTriangleCount-1);
				}
				else
				{

					uint TriangleIndex = min(uint(RandT0*float(SectionTriangleCount)), SectionTriangleCount-1);
					uint4 TriangleData = TriangleBuffer_Particles_StaticMesh3[SectionFirstTriangle + TriangleIndex];


					float RandT1 = NiagaraInternalNoise(1, 2, 3);
					if( RandT1 > asfloat(TriangleData.x) )
					{
						TriangleIndex = TriangleData.y;
					}
					Out_Coord.Tri = SectionFirstTriangle + TriangleIndex;
				}

				float r0 = NiagaraInternalNoise(1, 2, 3);
				float r1 = NiagaraInternalNoise(1, 2, 3);
				float sqrt0 = sqrt(r0);
				float sqrt1 = sqrt(r1);
				Out_Coord.BaryCoord = float3(1.0f - sqrt0, sqrt0 * (1.0 - r1), r1 * sqrt0);
			}


			void GetTriPositionWS_ParticlesStaticMesh3 (in MeshTriCoordinate In_Coord, out float3 Out_Position)
			{
				uint TriangleIndex = In_Coord.Tri * 3;
				uint VertexIndex0 = IndexBuffer_Particles_StaticMesh3[TriangleIndex ] * 3;
				uint VertexIndex1 = IndexBuffer_Particles_StaticMesh3[TriangleIndex+1] * 3;
				uint VertexIndex2 = IndexBuffer_Particles_StaticMesh3[TriangleIndex+2] * 3;


				float3 vertex0 = float3(VertexBuffer_Particles_StaticMesh3[VertexIndex0], VertexBuffer_Particles_StaticMesh3[VertexIndex0+1], VertexBuffer_Particles_StaticMesh3[VertexIndex0+2]);
				float3 vertex1 = float3(VertexBuffer_Particles_StaticMesh3[VertexIndex1], VertexBuffer_Particles_StaticMesh3[VertexIndex1+1], VertexBuffer_Particles_StaticMesh3[VertexIndex1+2]);
				float3 vertex2 = float3(VertexBuffer_Particles_StaticMesh3[VertexIndex2], VertexBuffer_Particles_StaticMesh3[VertexIndex2+1], VertexBuffer_Particles_StaticMesh3[VertexIndex2+2]);
				float3 Position = vertex0 * In_Coord.BaryCoord.x + vertex1 * In_Coord.BaryCoord.y + vertex2 * In_Coord.BaryCoord.z;

				Out_Position = mul(float4(Position, 1.0), InstanceTransform_Particles_StaticMesh3).xyz;
			}

void SampleColorCurve_ColorColorCurve(in float In_X, out float4 Out_Value)
{
	float RemappedX = TimeToLUTFraction_Color_ColorCurve(In_X) * 127;
	float Prev = floor(RemappedX);
	float Next = Prev < 127 ? Prev + 1.0 : Prev;
	float Interp = RemappedX - Prev;
	Prev *= 4;
	Next *= 4;
	float4 A = float4(SampleCurve_Color_ColorCurve(Prev), SampleCurve_Color_ColorCurve(Prev + 1), SampleCurve_Color_ColorCurve(Prev + 2), SampleCurve_Color_ColorCurve(Prev + 3));
	float4 B = float4(SampleCurve_Color_ColorCurve(Next), SampleCurve_Color_ColorCurve(Next + 1), SampleCurve_Color_ColorCurve(Next + 2), SampleCurve_Color_ColorCurve(Next + 3));
	Out_Value = lerp(A, B, Interp);
}
void SampleCurve_ConvergenceRateParticlesPositionFloatCurve(in float In_X, out float Out_Value)
{
	float RemappedX = TimeToLUTFraction_ConvergenceRate_Particles_Position_FloatCurve(In_X) * 127;
	float Prev = floor(RemappedX);
	float Next = Prev < 127 ? Prev + 1.0 : Prev;
	float Interp = RemappedX - Prev;
	float A = SampleCurve_ConvergenceRate_Particles_Position_FloatCurve(Prev);
	float B = SampleCurve_ConvergenceRate_Particles_Position_FloatCurve(Next);
	Out_Value = lerp(A, B, Interp);
}
void QuerySceneDepthGPU_CollisionCollisionQueryAndResponseQuery(in float3 In_SamplePos, out float Out_SceneDepth, out float3 Out_CameraPosWorld, out bool Out_IsInsideView, out float3 Out_WorldPos, out float3 Out_WorldNormal)
{
			Out_SceneDepth = -1;
			Out_WorldPos = float3(0.0, 0.0, 0.0);
			Out_WorldNormal = float3(0.0, 0.0, 1.0);
			Out_IsInsideView = true;
			Out_CameraPosWorld.xyz = View_WorldCameraOrigin.xyz;
			float4 SamplePosition = float4(In_SamplePos + View_PreViewTranslation, 1);
			float4 ClipPosition = mul(SamplePosition, View_TranslatedWorldToClip);
			float2 ScreenPosition = ClipPosition.xy / ClipPosition.w;

			if (all(abs(ScreenPosition.xy) <= float2(1, 1)))
			{

				float2 ScreenUV = ScreenPosition * View_ScreenPositionScaleBias.xy + View_ScreenPositionScaleBias.wz;
				float SceneDepth = CalcSceneDepth(ScreenUV);
				Out_SceneDepth = SceneDepth;

				Out_WorldPos = WorldPositionFromSceneDepth(ScreenPosition.xy, SceneDepth);

				Out_WorldNormal = Texture2DSampleLevel(SceneTexturesStruct_GBufferATexture, SceneTexturesStruct_GBufferATextureSampler, ScreenUV, 0).xyz * 2.0 - 1.0;
			}
			else
			{
				Out_IsInsideView = false;
			}
}

void QuerySceneDepthGPU_CollisionCollisionQueryAndResponse001Query(in float3 In_SamplePos, out float Out_SceneDepth, out float3 Out_CameraPosWorld, out bool Out_IsInsideView, out float3 Out_WorldPos, out float3 Out_WorldNormal)
{
			Out_SceneDepth = -1;
			Out_WorldPos = float3(0.0, 0.0, 0.0);
			Out_WorldNormal = float3(0.0, 0.0, 1.0);
			Out_IsInsideView = true;
			Out_CameraPosWorld.xyz = View_WorldCameraOrigin.xyz;
			float4 SamplePosition = float4(In_SamplePos + View_PreViewTranslation, 1);
			float4 ClipPosition = mul(SamplePosition, View_TranslatedWorldToClip);
			float2 ScreenPosition = ClipPosition.xy / ClipPosition.w;

			if (all(abs(ScreenPosition.xy) <= float2(1, 1)))
			{

				float2 ScreenUV = ScreenPosition * View_ScreenPositionScaleBias.xy + View_ScreenPositionScaleBias.wz;
				float SceneDepth = CalcSceneDepth(ScreenUV);
				Out_SceneDepth = SceneDepth;

				Out_WorldPos = WorldPositionFromSceneDepth(ScreenPosition.xy, SceneDepth);

				Out_WorldNormal = Texture2DSampleLevel(SceneTexturesStruct_GBufferATexture, SceneTexturesStruct_GBufferATextureSampler, ScreenUV, 0).xyz * 2.0 - 1.0;
			}
			else
			{
				Out_IsInsideView = false;
			}
}

void SimulateMain(in int InstanceIdx, in int InEventIndex, in int Phase)
{

			float RandomSeedInitialisation = NiagaraInternalNoise(InstanceIdx*16384, InEventIndex*8196, Phase*4096 + EmitterTickCounter);
		EnterStatScope(9 );

	FSimulationContext Context = (FSimulationContext)0;
	if (Phase == 0)
	{
		GetEmitterSpawnInfoForParticle(ExecIndex());
	}
	if(Phase==0)
	{
	Context.MapSpawn.Particles.Age = 0.0f;
	Context.MapSpawn.Particles.Collision.CollisionQueryAndResponse.CollisionID = 0;
	Context.MapSpawn.Particles.Collision.CollisionQueryAndResponse001.CollisionID = 0;
	Context.MapSpawn.Particles.Collision.OffscreenCounter = 0.0f;
	Context.MapSpawn.Particles.Color.r = 0.0f;
	Context.MapSpawn.Particles.Color.g = 0.0f;
	Context.MapSpawn.Particles.Color.b = 0.0f;
	Context.MapSpawn.Particles.Color.a = 0.0f;
	Context.MapSpawn.Particles.HasCollided = false;
	Context.MapSpawn.Particles.Lifetime = 0.0f;
	Context.MapSpawn.Particles.Mass = 0.0f;
	Context.MapSpawn.Particles.MaterialRandom = 0.0f;
	Context.MapSpawn.Particles.NewPosition.x = 0.0f;
	Context.MapSpawn.Particles.NewPosition.y = 0.0f;
	Context.MapSpawn.Particles.NewPosition.z = 0.0f;
	Context.MapSpawn.Particles.NormalizedAge = 0.0f;
	Context.MapSpawn.Particles.NumberOfCollisions = 0;
	Context.MapSpawn.Particles.Position.x = 0.0f;
	Context.MapSpawn.Particles.Position.y = 0.0f;
	Context.MapSpawn.Particles.Position.z = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.x = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.y = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.z = 0.0f;
	Context.MapSpawn.Particles.RestCounter = 0.0f;
	Context.MapSpawn.Particles.Scale.x = 0.0f;
	Context.MapSpawn.Particles.Scale.y = 0.0f;
	Context.MapSpawn.Particles.Scale.z = 0.0f;
	Context.MapSpawn.Particles.SpriteRotation = 0.0f;
	Context.MapSpawn.Particles.SpriteSize.x = 0.0f;
	Context.MapSpawn.Particles.SpriteSize.y = 0.0f;
	Context.MapSpawn.Particles.UniqueID = 0;
	Context.MapSpawn.Particles.Velocity.x = 0.0f;
	Context.MapSpawn.Particles.Velocity.y = 0.0f;
	Context.MapSpawn.Particles.Velocity.z = 0.0f;
	}
	if(Phase==1)
	{
	Context.MapUpdate.Particles.Age = InputDataFloat(0, 0, InstanceIdx);
	Context.MapUpdate.Particles.Collision.CollisionQueryAndResponse.CollisionID = InputDataInt(0, 0, InstanceIdx);
	Context.MapUpdate.Particles.Collision.CollisionQueryAndResponse001.CollisionID = InputDataInt(0, 1, InstanceIdx);
	Context.MapUpdate.Particles.Collision.OffscreenCounter = InputDataFloat(0, 1, InstanceIdx);
	Context.MapUpdate.Particles.Color.r = InputDataFloat(0, 2, InstanceIdx);
	Context.MapUpdate.Particles.Color.g = InputDataFloat(0, 3, InstanceIdx);
	Context.MapUpdate.Particles.Color.b = InputDataFloat(0, 4, InstanceIdx);
	Context.MapUpdate.Particles.Color.a = InputDataFloat(0, 5, InstanceIdx);
	Context.MapUpdate.Particles.HasCollided = InputDataBool(0, 2, InstanceIdx);
	Context.MapUpdate.Particles.Lifetime = InputDataFloat(0, 6, InstanceIdx);
	Context.MapUpdate.Particles.Mass = InputDataFloat(0, 7, InstanceIdx);
	Context.MapUpdate.Particles.MaterialRandom = InputDataFloat(0, 8, InstanceIdx);
	Context.MapUpdate.Particles.NewPosition.x = InputDataFloat(0, 9, InstanceIdx);
	Context.MapUpdate.Particles.NewPosition.y = InputDataFloat(0, 10, InstanceIdx);
	Context.MapUpdate.Particles.NewPosition.z = InputDataFloat(0, 11, InstanceIdx);
	Context.MapUpdate.Particles.NormalizedAge = InputDataFloat(0, 12, InstanceIdx);
	Context.MapUpdate.Particles.NumberOfCollisions = InputDataInt(0, 3, InstanceIdx);
	Context.MapUpdate.Particles.Position.x = InputDataFloat(0, 13, InstanceIdx);
	Context.MapUpdate.Particles.Position.y = InputDataFloat(0, 14, InstanceIdx);
	Context.MapUpdate.Particles.Position.z = InputDataFloat(0, 15, InstanceIdx);
	Context.MapUpdate.Particles.PreviousVelocity.x = InputDataFloat(0, 16, InstanceIdx);
	Context.MapUpdate.Particles.PreviousVelocity.y = InputDataFloat(0, 17, InstanceIdx);
	Context.MapUpdate.Particles.PreviousVelocity.z = InputDataFloat(0, 18, InstanceIdx);
	Context.MapUpdate.Particles.RestCounter = InputDataFloat(0, 19, InstanceIdx);
	Context.MapUpdate.Particles.Scale.x = InputDataFloat(0, 20, InstanceIdx);
	Context.MapUpdate.Particles.Scale.y = InputDataFloat(0, 21, InstanceIdx);
	Context.MapUpdate.Particles.Scale.z = InputDataFloat(0, 22, InstanceIdx);
	Context.MapUpdate.Particles.SpriteRotation = InputDataFloat(0, 23, InstanceIdx);
	Context.MapUpdate.Particles.SpriteSize.x = InputDataFloat(0, 24, InstanceIdx);
	Context.MapUpdate.Particles.SpriteSize.y = InputDataFloat(0, 25, InstanceIdx);
	Context.MapUpdate.Particles.UniqueID = InputDataInt(0, 4, InstanceIdx);
	Context.MapUpdate.Particles.Velocity.x = InputDataFloat(0, 26, InstanceIdx);
	Context.MapUpdate.Particles.Velocity.y = InputDataFloat(0, 27, InstanceIdx);
	Context.MapUpdate.Particles.Velocity.z = InputDataFloat(0, 28, InstanceIdx);

	}
	if (Phase == 0)
	{
		Context.MapSpawn.Particles.UniqueID = Engine_Emitter_TotalSpawnedParticles + ExecIndex();
	}
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.Minimum = Constants_Emitter_UniformRangedFloat005_Minimum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.Maximum = Constants_Emitter_UniformRangedFloat005_Maximum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.RandomSeed = Constants_Emitter_UniformRangedFloat005_RandomSeed;
	Context.MapSpawn.Emitter.RandomSeed = Emitter_RandomSeed;
	Context.MapSpawn.Engine.System.TickCount = Engine_System_TickCount;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.Minimum = Constants_Emitter_UniformRangedFloat004_Minimum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.Maximum = Constants_Emitter_UniformRangedFloat004_Maximum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.RandomSeed = Constants_Emitter_UniformRangedFloat004_RandomSeed;
	Context.MapSpawn.Engine.Owner.Position = Engine_Owner_Position.xyz;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat003.Minimum = Constants_Emitter_UniformRangedFloat003_Minimum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat003.Maximum = Constants_Emitter_UniformRangedFloat003_Maximum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat003.RandomSeed = Constants_Emitter_UniformRangedFloat003_RandomSeed;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.Color = Constants_Emitter_InitializeParticle_Color;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteSize = Constants_Emitter_InitializeParticle_SpriteSize.xy;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.MeshScale = Constants_Emitter_InitializeParticle_MeshScale.xyz;
	Context.MapSpawn.Emitter.Age = Emitter_Age;
	Context.MapSpawn.Engine.Owner.SystemLocalToWorld = Engine_Owner_SystemLocalToWorld;
	Context.MapSpawn.Engine.Owner.SystemWorldToLocal = Engine_Owner_SystemWorldToLocal;
	Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale = Engine_Owner_SystemLocalToWorldNoScale;
	Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale = Engine_Owner_SystemWorldToLocalNoScale;
	Context.MapUpdate.Engine.DeltaTime = Engine_DeltaTime;
	Context.MapUpdate.Constants.Emitter.Color.ScaleAlpha = Constants_Emitter_Color_ScaleAlpha;
	Context.MapUpdate.Emitter.AlphaScale = Emitter_AlphaScale;
	Context.MapUpdate.Constants.Emitter.FloatFromCurve001.ScaleCurve = Constants_Emitter_FloatFromCurve001_ScaleCurve;
	Context.MapUpdate.Constants.Emitter.Collision.ParticleRadiusScale = Constants_Emitter_Collision_ParticleRadiusScale;
	Context.MapUpdate.Engine.Owner.SystemLocalToWorld = Engine_Owner_SystemLocalToWorld;
	Context.MapUpdate.Engine.Owner.SystemWorldToLocal = Engine_Owner_SystemWorldToLocal;
	Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale = Engine_Owner_SystemLocalToWorldNoScale;
	Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale = Engine_Owner_SystemWorldToLocalNoScale;
	Context.MapUpdate.Engine.Owner.SystemWorldToLocalTransposed = Engine_Owner_SystemWorldToLocalTransposed;
	Context.MapUpdate.Engine.Owner.SystemLocalToWorldTransposed = Engine_Owner_SystemLocalToWorldTransposed;
	Context.MapUpdate.Constants.Emitter.Collision.Friction = Constants_Emitter_Collision_Friction;
	Context.MapUpdate.Constants.Emitter.Collision.StaticFriction = Constants_Emitter_Collision_StaticFriction;
	Context.MapUpdate.Constants.Emitter.Collision.StaticFrictionEngagementSpeed = Constants_Emitter_Collision_StaticFrictionEngagementSpeed;
	Context.MapUpdate.Constants.Emitter.Collision.Restitution = Constants_Emitter_Collision_Restitution;
	Context.MapUpdate.Constants.Emitter.Collision.RandomizeCollisionNormal = Constants_Emitter_Collision_RandomizeCollisionNormal;
	Context.MapUpdate.Constants.Emitter.Collision.FrictionDuringaBounce = Constants_Emitter_Collision_FrictionDuringaBounce;
	Context.MapUpdate.Constants.Emitter.Collision.Maximumtimeoffscreen = Constants_Emitter_Collision_Maximumtimeoffscreen;
	Context.MapUpdate.Constants.Emitter.Collision.PercentageofPenetrationBeforeRest = Constants_Emitter_Collision_PercentageofPenetrationBeforeRest;
	Context.MapUpdate.Constants.Emitter.Collision.RestStateTimeRange = Constants_Emitter_Collision_RestStateTimeRange;
	Context.MapUpdate.Constants.Emitter.Collision.MaximumPenetrationCorrectionDistance = Constants_Emitter_Collision_MaximumPenetrationCorrectionDistance;
	Context.MapUpdate.Constants.Emitter.Collision.ValidCollisionPlaneNormalForRest = Constants_Emitter_Collision_ValidCollisionPlaneNormalForRest.xyz;
	Context.MapUpdate.Constants.Emitter.Collision.MinimumCollisionNormalASC47RestNormalAlignmentPercentage = Constants_Emitter_Collision_MinimumCollisionNormalASC47RestNormalAlignmentPercentage;
	Context.MapUpdate.Constants.Emitter.Collision.AdvancedAgingRate = Constants_Emitter_Collision_AdvancedAgingRate;
	Context.MapUpdate.Constants.Emitter.SolveForcesAndVelocity.SpeedLimit = Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	Context.MapUpdate.Constants.Emitter.SolveForcesAndVelocity.AccelerationLimit = Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	Context.MapUpdate.Engine.Time = Engine_Time;
	Context.MapUpdate.Engine.InverseDeltaTime = Engine_InverseDeltaTime;
	Context.MapUpdate.Engine.ExecutionCount = Engine_ExecutionCount;
	Context.MapUpdate.Emitter.SpawnRate = Emitter_SpawnRate;
	Context.MapUpdate.Engine.Emitter.TotalSpawnedParticles = Engine_Emitter_TotalSpawnedParticles;
	Context.MapUpdate.Emitter.RandomSeed = Emitter_RandomSeed;
	ReadDataSets(Context);
	int StartingPhase = Phase;
	GCurrentPhase = Phase;
	if(Phase==0)
	{
		if (StartingPhase == 0)
		{
			Context.MapSpawn.DataInstance.Alive=true;
		}
		InterpolateParameters(Context);
		SimulateMapSpawn(Context);

		Context.MapUpdate.Particles = Context.MapSpawn.Particles;
		Context.MapUpdate.DataInstance = Context.MapSpawn.DataInstance;


		Phase = 1;
		GCurrentPhase = 1;
	}
	if(Phase==1)
	{
		if (StartingPhase == 1)
		{
			Context.MapUpdate.DataInstance.Alive=true;
		}
		SimulateMapUpdate(Context);
	}
	WriteDataSets(Context);
	{
	bool bValid = Context.MapUpdate.DataInstance.Alive;
	int TmpWriteIndex = OutputIndex(0, false, bValid);
	OutputDataFloat(0, 0, TmpWriteIndex, Context.MapUpdate.Particles.Age);
	OutputDataInt(0, 0, TmpWriteIndex, Context.MapUpdate.Particles.Collision.CollisionQueryAndResponse.CollisionID);
	OutputDataInt(0, 1, TmpWriteIndex, Context.MapUpdate.Particles.Collision.CollisionQueryAndResponse001.CollisionID);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.MapUpdate.Particles.Collision.OffscreenCounter);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.MapUpdate.Particles.Color.r);
	OutputDataFloat(0, 3, TmpWriteIndex, Context.MapUpdate.Particles.Color.g);
	OutputDataFloat(0, 4, TmpWriteIndex, Context.MapUpdate.Particles.Color.b);
	OutputDataFloat(0, 5, TmpWriteIndex, Context.MapUpdate.Particles.Color.a);
	OutputDataBool(0, 2, TmpWriteIndex, Context.MapUpdate.Particles.HasCollided);
	OutputDataFloat(0, 6, TmpWriteIndex, Context.MapUpdate.Particles.Lifetime);
	OutputDataFloat(0, 7, TmpWriteIndex, Context.MapUpdate.Particles.Mass);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.MapUpdate.Particles.MaterialRandom);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.MapUpdate.Particles.NewPosition.x);
	OutputDataFloat(0, 10, TmpWriteIndex, Context.MapUpdate.Particles.NewPosition.y);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.MapUpdate.Particles.NewPosition.z);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.MapUpdate.Particles.NormalizedAge);
	OutputDataInt(0, 3, TmpWriteIndex, Context.MapUpdate.Particles.NumberOfCollisions);
	OutputDataFloat(0, 13, TmpWriteIndex, Context.MapUpdate.Particles.Position.x);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.MapUpdate.Particles.Position.y);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.MapUpdate.Particles.Position.z);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.x);
	OutputDataFloat(0, 17, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.y);
	OutputDataFloat(0, 18, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.z);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.MapUpdate.Particles.RestCounter);
	OutputDataFloat(0, 20, TmpWriteIndex, Context.MapUpdate.Particles.Scale.x);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.MapUpdate.Particles.Scale.y);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.MapUpdate.Particles.Scale.z);
	OutputDataFloat(0, 23, TmpWriteIndex, Context.MapUpdate.Particles.SpriteRotation);
	OutputDataFloat(0, 24, TmpWriteIndex, Context.MapUpdate.Particles.SpriteSize.x);
	OutputDataFloat(0, 25, TmpWriteIndex, Context.MapUpdate.Particles.SpriteSize.y);
	OutputDataInt(0, 4, TmpWriteIndex, Context.MapUpdate.Particles.UniqueID);
	OutputDataFloat(0, 26, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.x);
	OutputDataFloat(0, 27, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.y);
	OutputDataFloat(0, 28, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.z);
	}
ExitStatScope( );
}
void CopyInstance(in int InstanceIdx)
{
	FSimulationContext Context = (FSimulationContext)0;
}
#line 479 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 487 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
[numthreads( 64 , 1, 1)]
void SimulateMainComputeCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID)
{
	GDispatchThreadId = DispatchThreadId;
	GGroupThreadId = GroupThreadId;
	GEmitterTickCounter = EmitterTickCounter;
	GSimStart = SimStart;
	GRandomSeedOffset = 0;
#line 505 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	uint InstanceID = UpdateStartInstance + DispatchThreadId.x;
	if (ReadInstanceCountOffset == 0xFFFFFFFF)
	{
		GSpawnStartInstance = 0;
	}
	else
	{
		GSpawnStartInstance = RWInstanceCounts[ReadInstanceCountOffset];
	}
	int MaxInstances = GSpawnStartInstance + SpawnedInstances;

	bool UseInterface = false;
#line 534 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	if( !UseInterface && InstanceID < UpdateStartInstance + MaxInstances )
	{


		uint EventIndex = 0;



		if(InstanceID < GSpawnStartInstance)
		{
#line 552 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			{
				GCurrentPhase = 1;
				SimulateMain(InstanceID, EventIndex, 1);
			}

		}



		else if(InstanceID >= GSpawnStartInstance)
		{
			GCurrentPhase = 0;
			SimulateMain(InstanceID, EventIndex, 0);
		}
	}
}

#if 0 /*BEGIN_RESOURCE_TABLES*/
View, 259395430
DrawRectangleParameters, 3145728
InstancedView, 227540992
MobileSceneTextures, 5570560
SceneTexturesStruct, 252709899
NULL, 0
View_MaterialTextureBilinearWrapedSampler, View, 8, 0
View_MaterialTextureBilinearClampedSampler, View, 8, 1
View_VolumetricLightmapIndirectionTexture, View, 5, 2
View_VolumetricLightmapBrickAmbientVector, View, 5, 3
View_VolumetricLightmapBrickSHCoefficients0, View, 5, 4
View_VolumetricLightmapBrickSHCoefficients1, View, 5, 5
View_VolumetricLightmapBrickSHCoefficients2, View, 5, 6
View_VolumetricLightmapBrickSHCoefficients3, View, 5, 7
View_VolumetricLightmapBrickSHCoefficients4, View, 5, 8
View_VolumetricLightmapBrickSHCoefficients5, View, 5, 9
View_SkyBentNormalBrickTexture, View, 5, 10
View_DirectionalLightShadowingBrickTexture, View, 5, 11
View_VolumetricLightmapBrickAmbientVectorSampler, View, 8, 12
View_VolumetricLightmapTextureSampler0, View, 8, 13
View_VolumetricLightmapTextureSampler1, View, 8, 14
View_VolumetricLightmapTextureSampler2, View, 8, 15
View_VolumetricLightmapTextureSampler3, View, 8, 16
View_VolumetricLightmapTextureSampler4, View, 8, 17
View_VolumetricLightmapTextureSampler5, View, 8, 18
View_SkyBentNormalTextureSampler, View, 8, 19
View_DirectionalLightShadowingTextureSampler, View, 8, 20
View_GlobalDistanceFieldTexture0, View, 5, 21
View_GlobalDistanceFieldSampler0, View, 8, 22
View_GlobalDistanceFieldTexture1, View, 5, 23
View_GlobalDistanceFieldSampler1, View, 8, 24
View_GlobalDistanceFieldTexture2, View, 5, 25
View_GlobalDistanceFieldSampler2, View, 8, 26
View_GlobalDistanceFieldTexture3, View, 5, 27
View_GlobalDistanceFieldSampler3, View, 8, 28
View_AtmosphereTransmittanceTexture, View, 5, 29
View_AtmosphereTransmittanceTextureSampler, View, 8, 30
View_AtmosphereIrradianceTexture, View, 5, 31
View_AtmosphereIrradianceTextureSampler, View, 8, 32
View_AtmosphereInscatterTexture, View, 5, 33
View_AtmosphereInscatterTextureSampler, View, 8, 34
View_PerlinNoiseGradientTexture, View, 5, 35
View_PerlinNoiseGradientTextureSampler, View, 8, 36
View_PerlinNoise3DTexture, View, 5, 37
View_PerlinNoise3DTextureSampler, View, 8, 38
View_SobolSamplingTexture, View, 5, 39
View_SharedPointWrappedSampler, View, 8, 40
View_SharedPointClampedSampler, View, 8, 41
View_SharedBilinearWrappedSampler, View, 8, 42
View_SharedBilinearClampedSampler, View, 8, 43
View_SharedTrilinearWrappedSampler, View, 8, 44
View_SharedTrilinearClampedSampler, View, 8, 45
View_PreIntegratedBRDF, View, 5, 46
View_PreIntegratedBRDFSampler, View, 8, 47
View_PrimitiveSceneData, View, 6, 48
View_PrimitiveSceneDataTexture, View, 5, 49
View_LightmapSceneData, View, 6, 50
View_TransmittanceLutTexture, View, 5, 51
View_TransmittanceLutTextureSampler, View, 8, 52
View_SkyViewLutTexture, View, 5, 53
View_SkyViewLutTextureSampler, View, 8, 54
View_DistantSkyLightLutTexture, View, 5, 55
View_DistantSkyLightLutTextureSampler, View, 8, 56
View_CameraAerialPerspectiveVolume, View, 5, 57
View_CameraAerialPerspectiveVolumeSampler, View, 8, 58
MobileSceneTextures_SceneColorTexture, MobileSceneTextures, 5, 0
MobileSceneTextures_SceneColorTextureSampler, MobileSceneTextures, 8, 1
MobileSceneTextures_SceneDepthTexture, MobileSceneTextures, 5, 2
MobileSceneTextures_SceneDepthTextureSampler, MobileSceneTextures, 8, 3
MobileSceneTextures_SceneAlphaCopyTexture, MobileSceneTextures, 5, 4
MobileSceneTextures_SceneAlphaCopyTextureSampler, MobileSceneTextures, 8, 5
MobileSceneTextures_CustomDepthTexture, MobileSceneTextures, 5, 6
MobileSceneTextures_CustomDepthTextureSampler, MobileSceneTextures, 8, 7
MobileSceneTextures_MobileCustomStencilTexture, MobileSceneTextures, 5, 8
MobileSceneTextures_MobileCustomStencilTextureSampler, MobileSceneTextures, 8, 9
SceneTexturesStruct_SceneColorTexture, SceneTexturesStruct, 5, 0
SceneTexturesStruct_SceneColorTextureSampler, SceneTexturesStruct, 8, 1
SceneTexturesStruct_SceneDepthTexture, SceneTexturesStruct, 5, 2
SceneTexturesStruct_SceneDepthTextureSampler, SceneTexturesStruct, 8, 3
SceneTexturesStruct_SceneDepthTextureNonMS, SceneTexturesStruct, 5, 4
SceneTexturesStruct_GBufferATexture, SceneTexturesStruct, 5, 5
SceneTexturesStruct_GBufferBTexture, SceneTexturesStruct, 5, 6
SceneTexturesStruct_GBufferCTexture, SceneTexturesStruct, 5, 7
SceneTexturesStruct_GBufferDTexture, SceneTexturesStruct, 5, 8
SceneTexturesStruct_GBufferETexture, SceneTexturesStruct, 5, 9
SceneTexturesStruct_GBufferVelocityTexture, SceneTexturesStruct, 5, 10
SceneTexturesStruct_GBufferATextureNonMS, SceneTexturesStruct, 5, 11
SceneTexturesStruct_GBufferBTextureNonMS, SceneTexturesStruct, 5, 12
SceneTexturesStruct_GBufferCTextureNonMS, SceneTexturesStruct, 5, 13
SceneTexturesStruct_GBufferDTextureNonMS, SceneTexturesStruct, 5, 14
SceneTexturesStruct_GBufferETextureNonMS, SceneTexturesStruct, 5, 15
SceneTexturesStruct_GBufferVelocityTextureNonMS, SceneTexturesStruct, 5, 16
SceneTexturesStruct_GBufferATextureSampler, SceneTexturesStruct, 8, 17
SceneTexturesStruct_GBufferBTextureSampler, SceneTexturesStruct, 8, 18
SceneTexturesStruct_GBufferCTextureSampler, SceneTexturesStruct, 8, 19
SceneTexturesStruct_GBufferDTextureSampler, SceneTexturesStruct, 8, 20
SceneTexturesStruct_GBufferETextureSampler, SceneTexturesStruct, 8, 21
SceneTexturesStruct_GBufferVelocityTextureSampler, SceneTexturesStruct, 8, 22
SceneTexturesStruct_ScreenSpaceAOTexture, SceneTexturesStruct, 5, 23
SceneTexturesStruct_ScreenSpaceAOTextureSampler, SceneTexturesStruct, 8, 24
SceneTexturesStruct_CustomDepthTextureNonMS, SceneTexturesStruct, 5, 25
SceneTexturesStruct_CustomDepthTexture, SceneTexturesStruct, 5, 26
SceneTexturesStruct_CustomDepthTextureSampler, SceneTexturesStruct, 8, 27
SceneTexturesStruct_CustomStencilTexture, SceneTexturesStruct, 6, 28
SceneTexturesStruct_SceneStencilTexture, SceneTexturesStruct, 6, 29
SceneTexturesStruct_EyeAdaptation, SceneTexturesStruct, 5, 30
SceneTexturesStruct_SceneColorCopyTexture, SceneTexturesStruct, 5, 31
SceneTexturesStruct_SceneColorCopyTextureSampler, SceneTexturesStruct, 8, 32
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
#if 0 /*DIRECT COMPILE*/
-directcompile -format=PCD3D_SM5 -entry=SimulateMainComputeCS -cs C:/Users/u1215928/Documents/VFX_Learning/Saved/ShaderDebugInfo/PCD3D_SM5/Character/FNiagaraShader/0/NiagaraEmitterInstanceShader.usf -cflags=4096 -nocrashreports
#endif /*DIRECT COMPILE*/
//
